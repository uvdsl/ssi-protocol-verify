(* This is a ProVerif description of the Protocol Flow. *)

(* START keys *)
type SecretKey.
type PublicKey.
fun pk(SecretKey):PublicKey.
(* END keys *)

(* START asymmetric encryption *)
fun aenc(bitstring(*the message*), PublicKey):bitstring (*asymmetric encrypt input msg*).
reduc forall msg:bitstring,sk:SecretKey; adec(aenc(msg,pk(sk)),sk)=msg (*asymmetric decrypt*).
(* END Asymmetric encryption *)

(* START digital signature *)
fun sig(bitstring(*the message*), SecretKey):bitstring(*the signature value*).
reduc forall msg:bitstring,sk:SecretKey; check(msg,sig(msg,sk),pk(sk))=true (*check(msg,sigVal,pk)*).
(* END digital signature *)

(* START DID *)
type DID.
fun genDID(PublicKey,SecretKey(*such that DID can not be inferred by others*)):DID.
reduc forall sk:SecretKey; getPubKey(genDID(pk(sk),sk)) = pk(sk). (* as of page 129 of manual *)
(* this implies that a DID may only be associated to only one pubKey, which is not true => model as table*)
(* but tables do not seem to be publically available? as of page 41 of manual *)
(* END DID *)

(* START credential *)
(*
VC = (claims, sig(claims, sk) )
*)
(* END credential *)

(* START access control rule (ACR) *)
(*
ACR = (attr, DID_I)
*)
(* END access control rule *)

(*DEFS*)
free h:channel.
const attr:bitstring.
const uri:bitstring.

fun ch(bitstring): channel.

free m'_0_fromHolder: bitstring [private].
free m'_2_fromHolder: bitstring [private].
free cred_fromHolder: bitstring [private].

free m'_1_fromIssuer: bitstring [private].
free m'_3_fromIssuer: bitstring [private]. 
free cred_fromIssuer: bitstring [private].

free m'_4_fromProver: bitstring [private].
free m'_6_fromProver: bitstring [private].
free rule_fromProver: bitstring [private].
free m'_8_fromProver: bitstring [private].
free cred_fromProver: bitstring [private].
free access_token_fromProver: bitstring [private].

free m'_5_fromVerifier: bitstring [private].
free rule_fromVerifier: bitstring [private].
free m'_7_fromVerifier: bitstring [private].
free vp_fromVerifier: bitstring [private].
free cred_fromVerifier: bitstring [private].
free m'_9_fromVerifier: bitstring [private].
free access_token_fromVerifier: bitstring [private].

free Issuer_Completes:bitstring [private].
free Holder_Completes:bitstring [private].
free Prover_Completes:bitstring [private].
free Verifier_Completes:bitstring [private].


(* Authentication *)
event auth_VerifierSendsLastMessageToProver(bitstring,bitstring,bitstring,bitstring,bitstring, bitstring).
event auth_ProverCompletesProtocol(bitstring,bitstring,bitstring,bitstring,bitstring, bitstring).
event auth_ProverSendsLastMessageToVerifier(bitstring,bitstring,bitstring,bitstring, bitstring).
event auth_VerifierCompletesProtocol(bitstring,bitstring,bitstring,bitstring, bitstring).

event auth_IssuerSendsLastMessageToHolder(bitstring,bitstring,bitstring,bitstring).
event auth_HolderCompletesProtocol(bitstring,bitstring,bitstring,bitstring).
event auth_HolderSendsLastMessageToIssuer(bitstring,bitstring,bitstring).
event auth_IssuerCompletesProtocol(bitstring,bitstring,bitstring).

event auth_ProverSendsLastMessageToVerifierInProtocolFull(bitstring,bitstring,bitstring,bitstring,bitstring, bitstring, bitstring,bitstring,bitstring).

(* START process macros ~ agent *)

(** START Prover **)
let prover(DID_P:DID, sk_P:SecretKey, VC:bitstring, DID_V:DID, pk_V:PublicKey, talksOnlyToHonest:bool, m_0:bitstring,m_1:bitstring,m_2:bitstring,m_3:bitstring) (* input ~ what the agent starts with in private*) =
    new ssk_P:SecretKey;                          
    new n_p:bitstring;
    let m'_4 = (n_p,pk(ssk_P)) in
    let m_4 = aenc( ( m'_4, sig(m'_4,ssk_P) ) ,pk_V) in
    out(h, m_4);
    (**)
    (**)
    (* receive let m_5 = aenc( (m'_5,sig(m'_5,sk_V)),spk_P) in *)
    in(h,m_5:bitstring);
    let ((n'_p:bitstring,n_v:bitstring,spk_V:PublicKey),sigVal_5:bitstring) = adec(m_5,ssk_P) in
    if check((n'_p,n_v,spk_V),sigVal_5,pk_V) then
    if n'_p = n_p then
    let m'_6 = (n_v,uri) in
    let m_6 = aenc( ( m'_6, sig(m'_6,ssk_P) ) ,spk_V) in
    out(h, m_6);
    (**)
    (**)
    (* receive let m_7 = aenc( (m'_7,sig(m'_7,ssk_V)),spk_P) in *)
    in(h,m_7:bitstring);
    (* let ((n_c:bitstring,rule:bitstring),sigVal_7:bitstring) = adec(m_7,ssk_P) in *)
    let ((rule:bitstring),sigVal_7:bitstring) = adec(m_7,ssk_P) in
    (* if check((n_c,rule),sigVal_7,spk_V) then *)
    if check((rule),sigVal_7,spk_V) then
    let (claims:bitstring,sigVal_VC:bitstring)=VC in
    if claims = rule then
    (* let m''_8 = (n_c,DID_V,VC) in *)
    let m''_8 = (DID_V,VC) in
    let m'_8 = (m''_8, sig(m''_8,sk_P) ) in
    let m_8 = aenc( ( m'_8, sig(m'_8,ssk_P) ) ,spk_V) in
    (* event_just_before_the_last_send_message_of_S  *)
    event auth_ProverSendsLastMessageToVerifier(m_4,m_5,m_6,m_7,m_8);
    event auth_ProverSendsLastMessageToVerifierInProtocolFull(m_0,m_1,m_2,m_3, m_4,m_5,m_6,m_7,m_8);
    out(h, m_8);
    (**)
    (**)
    in(h,m_9:bitstring);
    let ((tkn_access:bitstring,sigVal_tkn:bitstring),sigVal_9:bitstring) = adec(m_9,ssk_P) in
    if check((tkn_access,sigVal_tkn),sigVal_9,spk_V) then
    if check(tkn_access,sigVal_tkn,pk_V) then
    (* Prover about to complete protocol! *)
    out(h, Prover_Completes);
    (* phase 1 ; *)
    if talksOnlyToHonest then
    (* event_at_the_very_end_of_role_R_in_parallel_with_secrecy_checks *)
    event auth_ProverCompletesProtocol(m_4,m_5,m_6,m_7,m_8,m_9) |
    out(ch(( m'_4, sig(m'_4,ssk_P) )),m'_4_fromProver) |
    out(ch(( m'_6, sig(m'_6,ssk_P) )),m'_6_fromProver) |
    out(ch(( m'_8, sig(m'_8,ssk_P) )), m'_8_fromProver) | (*VP*)
    out(ch(VC),cred_fromProver) |
    out(ch(tkn_access),access_token_fromProver);
    0.
(** END Prover **)

(** START Verifier **)
let verifier(DID_V:DID, sk_V:SecretKey, rule:bitstring, pk_P:PublicKey, pk_I:PublicKey, talksOnlyToHonest:bool) (* input ~ what the agent starts with in private*) =
    let ( DID_P:DID, attr:bitstring, DID_I:DID ) = rule in
    (* receive  m_4 = aenc( ( m'_4, sig(m'_4,ssk_p) ) ,pk_V) in *)
    in(h,m_4:bitstring);
    let ((n_p:bitstring,spk_P:PublicKey),sigVal_4:bitstring) = adec(m_4,sk_V) in
    if check((n_p,spk_P),sigVal_4,spk_P) then  
    new ssk_V:SecretKey;                          
    new n_v:bitstring;
    let m'_5 = (n_p,n_v,pk(ssk_V)) in
    let m_5 = aenc( (m'_5,sig(m'_5,sk_V)),spk_P) in
    out(h,m_5); 
    (**)
    (**)
    (* receive let m_6 = aenc( (m'_6,sig(m'_6,ssk_P)),spk_V) in *)
    in(h,m_6:bitstring);
    let ((n'_v:bitstring,uri':bitstring),sigVal_6:bitstring) = adec(m_6,ssk_V) in
    if check((n'_v,uri'),sigVal_6,spk_P) then
    if (n'_v, uri') = (n_v, uri) then
    (* new n_c:bitstring; *)
    (* let m'_7 = (n_c,rule) in *)
    let m'_7 = (rule) in
    let m_7 = aenc( ( m'_7, sig(m'_7,ssk_V) ) ,spk_P) in
    out(h, m_7);
    (**)
    (**)
    (* receive let m_8 = aenc( (m'_8,sig(m'_8,ssk_P)),spk_V) in *)
    in(h,m_8:bitstring);
    (* let (((n'_c:bitstring,DID'_V:DID,((DID'_P:DID,attr':bitstring,DID'_I:DID), sigVal_I:bitstring)), sigVal_P:bitstring), sigVal_8:bitstring) = adec(m_8,ssk_V) in *)
    let (((DID'_V:DID,((DID'_P:DID,attr':bitstring,DID'_I:DID), sigVal_I:bitstring)), sigVal_P:bitstring), sigVal_8:bitstring) = adec(m_8,ssk_V) in
    (* if check(((n'_c,DID'_V,((DID'_P,attr',DID'_I), sigVal_I)), sigVal_P ),sigVal_8,spk_P) then *)
    if check(((DID'_V,((DID'_P,attr',DID'_I), sigVal_I)), sigVal_P ),sigVal_8,spk_P) then
    (* if check((n'_c,DID'_V,((DID'_P,attr',DID'_I), sigVal_I)), sigVal_P ,pk_P) then *)
    if check((DID'_V,((DID'_P,attr',DID'_I), sigVal_I)), sigVal_P ,pk_P) then
    if check((DID'_P,attr',DID'_I), sigVal_I,pk_I) then
    (* if (n'_c,DID'_V,(DID'_P,attr',DID'_I)) = (n_c,DID_V,(DID_P,attr,DID_I)) then *)
    if (DID'_V,(DID'_P,attr',DID'_I)) = (DID_V,(DID_P,attr,DID_I)) then
    new tkn_access:bitstring;
    let m'_9 = (tkn_access, sig(tkn_access,sk_V)) in
    let m_9 = aenc( (m'_9,sig(m'_9,ssk_V)),spk_P) in
    (* event_just_before_the_last_send_message_of_S  *)
    event auth_VerifierSendsLastMessageToProver(m_4,m_5,m_6,m_7,m_8,m_9);
    out(h, m_9);
    (* Verifier about to complete the protocol *)
    out(h, Verifier_Completes);
    (* phase 1 ; *)
    (* ATTACK - LEAK Verifiable Presentation *)
    out(h,adec(m_8,ssk_V)); (* m_8 is the encrypted message with the VP *)
    (* ATTACK *)
    if talksOnlyToHonest then
    (* event_at_the_very_end_of_role_R_in_parallel_with_secrecy_checks *)
    event auth_VerifierCompletesProtocol(m_4,m_5,m_6,m_7,m_8) |
    out(ch((m'_5,sig(m'_5,sk_V))),m'_5_fromVerifier) |
    out(ch(rule), rule_fromVerifier) |
    out(ch( ( m'_7, sig(m'_7,ssk_V) )), m'_7_fromVerifier) |
    (* out(ch((n'_c,DID'_V,(DID'_P,attr',DID'_I, sigVal_I), sigVal_P)),vp_fromVerifier) | *)
    out(ch((DID'_V,(DID'_P,attr',DID'_I, sigVal_I), sigVal_P)),vp_fromVerifier) |
    out(ch((DID'_P,attr',DID'_I, sigVal_I)),cred_fromVerifier) |
    out(ch( ( m'_9, sig(m'_9,ssk_V) )), m'_9_fromVerifier) |
    out(ch(tkn_access),access_token_fromVerifier);
    0.
(** END Verifier **)

(** START Holder/Prover **)
let holder(DID_P:DID, sk_P:SecretKey, DID_I:DID, pk_I:PublicKey, DID_V:DID, pk_V:PublicKey, talksOnlyToHonest:bool) (* input ~ what the agent starts with in private*) =
    new ssk_P:SecretKey;                          
    new n_p:bitstring;
    let m'_0 = (n_p,pk(ssk_P)) in
    let m_0 = aenc( ( m'_0, sig(m'_0,ssk_P) ) ,pk_I) in
    out(h, m_0);
    (**)
    (**)
    (* receive let m_1 = aenc( (m'_1,sig(m'_1,sk_I)),spk_P) in *)
    in(h,m_1:bitstring);
    let ((n'_p:bitstring,n_i:bitstring,spk_I:PublicKey),sigVal_1:bitstring) = adec(m_1,ssk_P) in
    if check((n'_p,n_i,spk_I),sigVal_1,pk_I) then
    if n'_p = n_p then
    new n_h:bitstring;
    let m''_2 = (n_i,DID_P,DID_I,n_h) in
    let m'_2 = (m''_2, sig(m''_2,sk_P)) in
    let m_2 = aenc( ( m'_2, sig(m'_2,ssk_P) ) ,spk_I) in
    (* event_just_before_the_last_send_message_of_S  *) 
    event auth_HolderSendsLastMessageToIssuer(m_0,m_1,m_2);
    out(h, m_2);
    (**)
    (**)
    (* receive let m_3 = aenc( (m'_3,sig(m'_3,ssk_I)),spk_P) in *)
    in(h,m_3:bitstring);
    let (((((DID'_P:DID,attr':bitstring,DID'_I:DID), sigVal_I:bitstring),DID''_P:DID,n'_h:bitstring),sigVal'_I:bitstring), sigVal_3:bitstring)  = adec(m_3,ssk_P) in
    if check(((((DID'_P,attr',DID'_I), sigVal_I), DID''_P, n'_h),sigVal'_I),sigVal_3,spk_I) then
    if check((((DID'_P,attr',DID'_I), sigVal_I), DID''_P,n'_h),sigVal'_I, pk_I) then
    if (DID''_P,n'_h) = (DID_P,n_h) then
    if check((DID'_P,attr',DID'_I), sigVal_I, pk_I) then
    if (DID'_P, DID'_I)= (DID_P, DID_I) then
    (* Holder about to complete the Protocol *)
    out(h, Holder_Completes);

    !prover(DID_P, sk_P, ((DID'_P,attr',DID'_I), sigVal_I), DID_V, pk_V, talksOnlyToHonest, m_0,m_1,m_2,m_3) |
   
    (* phase 1 ; *)
    if talksOnlyToHonest then
    event auth_HolderCompletesProtocol(m_0,m_1,m_2,m_3) | 
    out(ch(( m'_0, sig(m'_0,ssk_P) )),m'_0_fromHolder) |
    out(ch(( m'_2, sig(m'_2,ssk_P) )),m'_2_fromHolder) |
    out(ch(((DID'_P,attr,DID'_I), sigVal_I)),cred_fromHolder); (*currently public anyway...?*)
    0.
(** END Holder/Prover **)

(** START Issuer **)
let issuer(DID_I:DID, sk_I:SecretKey, attr:bitstring, DID_P:DID, pk_P:PublicKey, talksOnlyToHonest:bool) (* input ~ what the agent starts with in private*) =
    (* receive  m_0 = aenc( ( m'_0, sig(m'_0,ssk_p) ) ,pk_I) in *)
    in(h,m_0:bitstring);
    let ((n_p:bitstring,spk_P:PublicKey),sigVal_0:bitstring) = adec(m_0,sk_I) in
    if check((n_p,spk_P),sigVal_0,spk_P) then  
    new ssk_I:SecretKey;                          
    new n_i:bitstring;
    let m'_1 = (n_p,n_i,pk(ssk_I)) in
    let m_1 = aenc( (m'_1,sig(m'_1,sk_I)),spk_P) in
    out(h,m_1); 
    (**)
    (**)
    (* receive let m_2 = aenc( ( m'_2, sig(m'_2,ssk_P) ) ,spk_I) in *)
    in(h,m_2:bitstring);
    let (((n'_i:bitstring,DID'_P:DID,DID'_I:DID,n_h:bitstring),sigVal_P:bitstring),sigVal_2:bitstring) = adec(m_2,ssk_I) in
    if check(((n'_i,DID'_P,DID'_I,n_h),sigVal_P),sigVal_2,spk_P) then
    if check((n'_i,DID'_P,DID'_I,n_h),sigVal_P,pk_P) then
    if (n'_i,DID'_P,DID'_I) = (n_i,DID_P,DID_I) then 
    let claims = (DID_P,attr,DID_I) in
    let VC = (claims, sig(claims, sk_I) ) in
    let m'_3 = ((VC,DID_P,n_h), sig((VC,DID_P,n_h),sk_I)) in
    let m_3 = aenc( (m'_3,sig(m'_3,ssk_I)),spk_P) in
    (* event_just_before_the_last_send_message_of_S *)
    event auth_IssuerSendsLastMessageToHolder(m_0,m_1,m_2,m_3);
    out(h, m_3);
    (* Issuer about to complete the protocol *)
    out(h, Issuer_Completes);
    (* phase 1 ; *)
    if talksOnlyToHonest then
    event auth_IssuerCompletesProtocol(m_0,m_1,m_2) | 
    out(ch((m'_1,sig(m'_1,sk_I))),m'_1_fromIssuer) |
    out(ch(VC),cred_fromIssuer) | (* currently public anyway ...? *)
    out(ch((m'_3,sig(m'_3,ssk_I))),m'_3_fromIssuer);
    0.
(** END Issuer **)

(* END process macros *)

(*
query attacker(Issuer_Completes).
query attacker(Holder_Completes).
query attacker(Prover_Completes).
query attacker(Verifier_Completes).
*)

(* SECRECY *)

query attacker(m'_0_fromHolder).
query attacker(m'_1_fromIssuer).
query attacker(m'_2_fromHolder).
query attacker(m'_3_fromIssuer).
query attacker(m'_4_fromProver).
query attacker(m'_5_fromVerifier). 
query attacker(m'_6_fromProver).
query attacker(m'_7_fromVerifier).
query attacker(m'_8_fromProver).  
query attacker(m'_9_fromVerifier).

query attacker(rule_fromVerifier). (* basically public, as it is discoverable by an attacker by simply asking the verifier*)
query attacker(cred_fromVerifier). (* can be leaked in our model, as the prover explicitly/knowlingly talks to otherAgent (attacker) trying to authenticate with them (dishonest verifier) *)
query attacker(vp_fromVerifier). 
query attacker(access_token_fromVerifier). (* should be private, even with the credential leaked (this is the actual token, not the message containing it) *)

(*query attacker(cred_fromHolder). *) (* can be leaked in our model, as the prover explicitly/knowlingly talks to otherAgent (attacker) trying to authenticate with them (dishonest verifier) *)
(*query attacker(cred_fromIssuer).*)  (* can be leaked in our model, as the prover explicitly/knowlingly talks to otherAgent (attacker) trying to authenticate with them (dishonest verifier) *)


(* AUTHETNICATION *)

(* event_at_the_very_end_of_role_R_in_parallel_with_secrecy_checks
==> 
event_just_before_the_last_send_message_of_S *)

query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_uri:bitstring, m_rule:bitstring, m_vp:bitstring, m_accessToken:bitstring; 
    inj-event(auth_ProverCompletesProtocol(m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp, m_accessToken))
    ==>
    inj-event(auth_VerifierSendsLastMessageToProver(m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp, m_accessToken)) .


query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_uri:bitstring, m_rule:bitstring, m_vp:bitstring; 
    inj-event(auth_VerifierCompletesProtocol(m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp))
    ==>
    inj-event(auth_ProverSendsLastMessageToVerifier(m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp)) .


query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_did:bitstring, m_cred:bitstring; 
    inj-event(auth_HolderCompletesProtocol(m_handshakeReq, m_handshakeResp, m_did, m_cred))
    ==>
    inj-event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq, m_handshakeResp, m_did, m_cred)) .


query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_did:bitstring; 
    inj-event(auth_IssuerCompletesProtocol(m_handshakeReq, m_handshakeResp,  m_did))
    ==>
    inj-event(auth_HolderSendsLastMessageToIssuer(m_handshakeReq, m_handshakeResp, m_did)) . 

(* inj-agreement will not work, expected, since re-use of credentials issued once for multiple provings *)
query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_uri:bitstring, m_rule:bitstring, m_vp:bitstring, m_handshakeReq_2:bitstring, m_handshakeResp_2:bitstring, m_did:bitstring, m_cred:bitstring; 
    inj-event(auth_VerifierCompletesProtocol(m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp))
    ==>
    inj-event(auth_ProverSendsLastMessageToVerifier(m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp)) 
    &&
    inj-event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq_2, m_handshakeResp_2, m_did, m_cred)) 
    &&
    inj-event(auth_HolderCompletesProtocol(m_handshakeReq_2, m_handshakeResp_2, m_did, m_cred))
    .

(* this should hold, "for every proving, there must be an issuing" *)
query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_uri:bitstring, m_rule:bitstring, m_vp:bitstring, m_handshakeReq_2:bitstring, m_handshakeResp_2:bitstring, m_did:bitstring, m_cred:bitstring; 
    event(auth_VerifierCompletesProtocol(m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp))
    ==>
    event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq_2, m_handshakeResp_2, m_did, m_cred)) 
    &&
    event(auth_ProverSendsLastMessageToVerifierInProtocolFull(m_handshakeReq_2, m_handshakeResp_2, m_did, m_cred, m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp))
    .

(* MAIN *)

free sk_E:SecretKey. (*other agent may or may not be honest, but we don't know*)
process (*use root process for setup *)
    (*declare secret keys*)
    new sk_I:SecretKey;
    new sk_V:SecretKey;
    new sk_P:SecretKey;
    (*advertise public keys*)
    out(h,pk(sk_I));
    out(h,pk(sk_V));
    out(h,pk(sk_P));
    (*advertise DIDs*)
    let DID_I = genDID(pk(sk_I),sk_I) in
    let DID_V = genDID(pk(sk_V),sk_V) in
    let DID_P = genDID(pk(sk_P),sk_P) in
    let DID_E = genDID(pk(sk_E),sk_E) in
    out(h,DID_I);
    out(h,DID_V);
    out(h,DID_P);
    out(h,DID_E);
    
    let rule_PI    = ( DID_P, attr, DID_I ) in 
    let rule_EI = ( DID_E, attr, DID_I ) in 
    let rule_PE = ( DID_P, attr, DID_E ) in
    let rule_EE = ( DID_E, attr, DID_E ) in

    (*let agents dance*)
    ( (
         !issuer   (DID_I, sk_I, attr, DID_P, pk(sk_P), true)      
       | !issuer   (DID_I, sk_I, attr, DID_E, pk(sk_E), false)  
       | !holder   (DID_P, sk_P, DID_I, pk(sk_I), DID_V, pk(sk_V), true)    
       | !holder   (DID_P, sk_P, DID_I, pk(sk_I), DID_E, pk(sk_E), false)   
       | !holder   (DID_P, sk_P, DID_E, pk(sk_E), DID_V, pk(sk_V), false)   
       | !holder   (DID_P, sk_P, DID_E, pk(sk_E), DID_E, pk(sk_E), false)   
       | !verifier (DID_V, sk_V, rule_PI, pk(sk_P), pk(sk_I), true)    
       | !verifier (DID_V, sk_V, rule_EI, pk(sk_E), pk(sk_I), false)   
       | !verifier (DID_V, sk_V, rule_PE, pk(sk_P), pk(sk_E), false)   
       | !verifier (DID_V, sk_V, rule_EE, pk(sk_E), pk(sk_E), false) 
    ) )