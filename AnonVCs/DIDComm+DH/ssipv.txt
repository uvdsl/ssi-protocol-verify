File "ssipv_dh.pv", line 171, characters 11-14:
Warning: identifier attr rebound.
Linear part:
exp(g(x),y) = exp(g(y),x)
Completing equations...
Completed equations:
exp(g(x),y) = exp(g(y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}new attr_2: bitstring;
{2}out(h, attr_2);
{3}new sk_I: SecretKey;
{4}new sk_V: SecretKey;
{5}new sk_P: SecretKey;
{6}out(h, pk(sk_I));
{7}out(h, pk(sk_V));
{8}out(h, pk(sk_P));
{9}let DID_I: DID = genDID(pk(sk_I),sk_I) in
{10}let DID_V: DID = genDID(pk(sk_V),sk_V) in
{11}let DID_P: DID = genDID(pk(sk_P),sk_P) in
{12}let DID_E: DID = genDID(pk(sk_E),sk_E) in
{13}out(h, DID_I);
{14}out(h, DID_V);
{15}out(h, DID_P);
{16}out(h, DID_E);
{17}let rule_I: bitstring = (attr,DID_I) in
{18}let rule_E: bitstring = (attr,DID_E) in
{19}let rule_I_2: bitstring = (attr_2,DID_I) in
{20}let rule_E_2: bitstring = (attr_2,DID_E) in
(
    {21}!
    {22}let sk_I_1: SecretKey = sk_I in
    {23}let attr_1: bitstring = attr in
    {24}let pk_P: PublicKey = pk(sk_P) in
    {25}let talksOnlyToHonest: bool = true in
    {26}in(h, m_0: bitstring);
    {27}let gx: G = unbitG(m_0) in
    {28}new y: exponent;
    {29}let gy: G = g(y) in
    {30}let K: SymmetricKey = GtoSymK(exp(gx,y)) in
    {31}let m'_1: bitstring = sig((gy,gx),sk_I_1) in
    {32}let m_1: bitstring = (bitG(gy),enc(m'_1,K)) in
    {33}out(h, m_1);
    {34}in(h, m_2: bitstring);
    {35}let (s_K: bitstring,DID'_P: DID,DID'_I: DID,n_h: bitstring) = dec(m_2,K) in
    {36}if check((gx,gy),s_K,pk_P) then
    {37}if ((DID'_P,DID'_I) = (DID_P,DID_I)) then
    {38}let claims: bitstring = (attr_1,DID_I) in
    {39}let VC: bitstring = (claims,sig(claims,sk_I_1)) in
    {40}let m'_3: bitstring = ((VC,DID_P,n_h),sig((VC,DID_P,n_h),sk_I_1)) in
    {41}let m_3: bitstring = enc(m'_3,K) in
    {42}event auth_IssuerSendsLastMessageToHolder(m_0,m_1,m_2,m_3);
    {43}out(h, m_3);
    {44}out(h, Issuer_Completes);
    {45}if talksOnlyToHonest then
    (
        {46}event auth_IssuerCompletesProtocol(m_0,m_1,m_2)
    ) | (
        {47}out(ch(m'_1), m'_1_fromIssuer)
    ) | (
        {48}out(ch(VC), cred_fromIssuer)
    ) | (
        {49}out(ch(m'_3), m'_3_fromIssuer)
    )
) | (
    {50}!
    {51}let sk_I_2: SecretKey = sk_I in
    {52}let attr_3: bitstring = attr_2 in
    {53}let pk_P_1: PublicKey = pk(sk_E) in
    {54}let talksOnlyToHonest_1: bool = false in
    {55}in(h, m_0_1: bitstring);
    {56}let gx_1: G = unbitG(m_0_1) in
    {57}new y_1: exponent;
    {58}let gy_1: G = g(y_1) in
    {59}let K_1: SymmetricKey = GtoSymK(exp(gx_1,y_1)) in
    {60}let m': bitstring = sig((gy_1,gx_1),sk_I_2) in
    {61}let m: bitstring = (bitG(gy_1),enc(m',K_1)) in
    {62}out(h, m);
    {63}in(h, m_4: bitstring);
    {64}let (s_K_1: bitstring,DID'_P_1: DID,DID'_I_1: DID,n_h_1: bitstring) = dec(m_4,K_1) in
    {65}if check((gx_1,gy_1),s_K_1,pk_P_1) then
    {66}if ((DID'_P_1,DID'_I_1) = (DID_E,DID_I)) then
    {67}let claims_1: bitstring = (attr_3,DID_I) in
    {68}let VC_1: bitstring = (claims_1,sig(claims_1,sk_I_2)) in
    {69}let m'_2: bitstring = ((VC_1,DID_E,n_h_1),sig((VC_1,DID_E,n_h_1),sk_I_2)) in
    {70}let m_5: bitstring = enc(m'_2,K_1) in
    {71}event auth_IssuerSendsLastMessageToHolder(m_0_1,m,m_4,m_5);
    {72}out(h, m_5);
    {73}out(h, Issuer_Completes);
    {74}if talksOnlyToHonest_1 then
    (
        {75}event auth_IssuerCompletesProtocol(m_0_1,m,m_4)
    ) | (
        {76}out(ch(m'), m'_1_fromIssuer)
    ) | (
        {77}out(ch(VC_1), cred_fromIssuer)
    ) | (
        {78}out(ch(m'_2), m'_3_fromIssuer)
    )
) | (
    {79}!
    {80}let sk_P_1: SecretKey = sk_P in
    {81}let pk_I: PublicKey = pk(sk_I) in
    {82}let pk_V: PublicKey = pk(sk_V) in
    {83}let talksOnlyToHonest_2: bool = true in
    {84}new x: exponent;
    {85}let gx_2: G = g(x) in
    {86}let m'_0: bitstring = bitG(gx_2) in
    {87}let m_0_2: bitstring = m'_0 in
    {88}out(h, m_0_2);
    {89}in(h, m_6: bitstring);
    {90}let (eGY: bitstring,m_7: bitstring) = m_6 in
    {91}let gy_2: G = unbitG(eGY) in
    {92}let K_2: SymmetricKey = GtoSymK(exp(gy_2,x)) in
    {93}let s_K_2: bitstring = dec(m_7,K_2) in
    {94}if check((gy_2,gx_2),s_K_2,pk_I) then
    {95}new n_i: bitstring;
    {96}let m'_4: bitstring = (sig((gx_2,gy_2),sk_P_1),DID_P,DID_I,n_i) in
    {97}let m_8: bitstring = enc(m'_4,K_2) in
    {98}event auth_HolderSendsLastMessageToIssuer(m_0_2,m_6,m_8);
    {99}out(h, m_8);
    {100}in(h, m_9: bitstring);
    {101}let ((((attr': bitstring,DID'_I_2: DID),sigVal_I: bitstring),DID''_P: DID,n'_h: bitstring),sigVal'_I: bitstring) = dec(m_9,K_2) in
    {102}if check((((attr',DID'_I_2),sigVal_I),DID''_P,n'_h),sigVal'_I,pk_I) then
    {103}if ((DID''_P,n'_h) = (DID_P,n_i)) then
    {104}if check((attr',DID'_I_2),sigVal_I,pk_I) then
    {105}if (DID'_I_2 = DID_I) then
    {106}out(h, Holder_Completes);
    (
        {107}!
        {108}let VC_2: bitstring = ((attr',DID'_I_2),sigVal_I) in
        {109}new x_1: exponent;
        {110}let gx_3: G = g(x_1) in
        {111}let m'_5: bitstring = bitG(gx_3) in
        {112}let m_10: bitstring = m'_5 in
        {113}out(h, m_10);
        {114}in(h, m_11: bitstring);
        {115}let (eGY_1: bitstring,m_12: bitstring) = m_11 in
        {116}let gy_3: G = unbitG(eGY_1) in
        {117}let K_3: SymmetricKey = GtoSymK(exp(gy_3,x_1)) in
        {118}let s_K_3: bitstring = dec(m_12,K_3) in
        {119}if check((gy_3,gx_3),s_K_3,pk_V) then
        {120}let m'_6: bitstring = ((gx_3,gy_3),uri) in
        {121}let m_13: bitstring = enc(m'_6,K_3) in
        {122}out(h, m_13);
        {123}in(h, m_14: bitstring);
        {124}let (n_c: bitstring,rule: bitstring) = dec(m_14,K_3) in
        {125}let (claims_2: bitstring,sigVal_VC: bitstring) = VC_2 in
        {126}if (claims_2 = rule) then
        {127}let ph: bitstring = ((gx_3,gy_3),n_c,DID_V) in
        {128}new randomness: bitstring;
        {129}let poks: bitstring = proofGen(VC_2,ph,pk_I,randomness) in
        {130}let m'_8: bitstring = (claims_2,poks) in
        {131}let m_15: bitstring = enc(m'_8,K_3) in
        {132}event auth_ProverSendsLastMessageToVerifier(m_10,m_11,m_13,m_14,m_15);
        {133}event auth_ProverSendsLastMessageToVerifierInProtocolFull(m_0_2,m_6,m_8,m_9,m_10,m_11,m_13,m_14,m_15);
        {134}out(h, m_15);
        {135}in(h, m_16: bitstring);
        {136}let (tkn_access: bitstring,sigVal_tkn: bitstring) = dec(m_16,K_3) in
        {137}if check(tkn_access,sigVal_tkn,pk_V) then
        {138}out(h, Prover_Completes);
        {139}if talksOnlyToHonest_2 then
        (
            {140}event auth_ProverCompletesProtocol(m_10,m_11,m_13,m_14,m_15,m_16)
        ) | (
            {141}out(ch(m'_5), m'_4_fromProver)
        ) | (
            {142}out(ch(m'_6), m'_6_fromProver)
        ) | (
            {143}out(ch(m'_8), m'_8_fromProver)
        ) | (
            {144}out(ch(VC_2), cred_fromProver)
        ) | (
            {145}out(ch(tkn_access), access_token_fromProver)
        )
    ) | (
        {146}if talksOnlyToHonest_2 then
        (
            {147}event auth_HolderCompletesProtocol(m_0_2,m_6,m_8,m_9)
        ) | (
            {148}out(ch(m'_0), m'_0_fromHolder)
        ) | (
            {149}out(ch(m'_4), m'_2_fromHolder)
        ) | (
            {150}out(ch(((attr',DID'_I_2),sigVal_I)), cred_fromHolder)
        )
    )
) | (
    {151}!
    {152}let sk_P_2: SecretKey = sk_P in
    {153}let pk_I_1: PublicKey = pk(sk_I) in
    {154}let pk_V_1: PublicKey = pk(sk_E) in
    {155}let talksOnlyToHonest_3: bool = false in
    {156}new x_2: exponent;
    {157}let gx_4: G = g(x_2) in
    {158}let m'_0_1: bitstring = bitG(gx_4) in
    {159}let m_0_3: bitstring = m'_0_1 in
    {160}out(h, m_0_3);
    {161}in(h, m_17: bitstring);
    {162}let (eGY_2: bitstring,m_18: bitstring) = m_17 in
    {163}let gy_4: G = unbitG(eGY_2) in
    {164}let K_4: SymmetricKey = GtoSymK(exp(gy_4,x_2)) in
    {165}let s_K_4: bitstring = dec(m_18,K_4) in
    {166}if check((gy_4,gx_4),s_K_4,pk_I_1) then
    {167}new n_i_1: bitstring;
    {168}let m'_7: bitstring = (sig((gx_4,gy_4),sk_P_2),DID_P,DID_I,n_i_1) in
    {169}let m_19: bitstring = enc(m'_7,K_4) in
    {170}event auth_HolderSendsLastMessageToIssuer(m_0_3,m_17,m_19);
    {171}out(h, m_19);
    {172}in(h, m_20: bitstring);
    {173}let ((((attr'_1: bitstring,DID'_I_3: DID),sigVal_I_1: bitstring),DID''_P_1: DID,n'_h_1: bitstring),sigVal'_I_1: bitstring) = dec(m_20,K_4) in
    {174}if check((((attr'_1,DID'_I_3),sigVal_I_1),DID''_P_1,n'_h_1),sigVal'_I_1,pk_I_1) then
    {175}if ((DID''_P_1,n'_h_1) = (DID_P,n_i_1)) then
    {176}if check((attr'_1,DID'_I_3),sigVal_I_1,pk_I_1) then
    {177}if (DID'_I_3 = DID_I) then
    {178}out(h, Holder_Completes);
    (
        {179}!
        {180}let VC_3: bitstring = ((attr'_1,DID'_I_3),sigVal_I_1) in
        {181}new x_3: exponent;
        {182}let gx_5: G = g(x_3) in
        {183}let m'_9: bitstring = bitG(gx_5) in
        {184}let m_21: bitstring = m'_9 in
        {185}out(h, m_21);
        {186}in(h, m_22: bitstring);
        {187}let (eGY_3: bitstring,m_23: bitstring) = m_22 in
        {188}let gy_5: G = unbitG(eGY_3) in
        {189}let K_5: SymmetricKey = GtoSymK(exp(gy_5,x_3)) in
        {190}let s_K_5: bitstring = dec(m_23,K_5) in
        {191}if check((gy_5,gx_5),s_K_5,pk_V_1) then
        {192}let m'_10: bitstring = ((gx_5,gy_5),uri) in
        {193}let m_24: bitstring = enc(m'_10,K_5) in
        {194}out(h, m_24);
        {195}in(h, m_25: bitstring);
        {196}let (n_c_1: bitstring,rule_1: bitstring) = dec(m_25,K_5) in
        {197}let (claims_3: bitstring,sigVal_VC_1: bitstring) = VC_3 in
        {198}if (claims_3 = rule_1) then
        {199}let ph_1: bitstring = ((gx_5,gy_5),n_c_1,DID_E) in
        {200}new randomness_1: bitstring;
        {201}let poks_1: bitstring = proofGen(VC_3,ph_1,pk_I_1,randomness_1) in
        {202}let m'_11: bitstring = (claims_3,poks_1) in
        {203}let m_26: bitstring = enc(m'_11,K_5) in
        {204}event auth_ProverSendsLastMessageToVerifier(m_21,m_22,m_24,m_25,m_26);
        {205}event auth_ProverSendsLastMessageToVerifierInProtocolFull(m_0_3,m_17,m_19,m_20,m_21,m_22,m_24,m_25,m_26);
        {206}out(h, m_26);
        {207}in(h, m_27: bitstring);
        {208}let (tkn_access_1: bitstring,sigVal_tkn_1: bitstring) = dec(m_27,K_5) in
        {209}if check(tkn_access_1,sigVal_tkn_1,pk_V_1) then
        {210}out(h, Prover_Completes);
        {211}if talksOnlyToHonest_3 then
        (
            {212}event auth_ProverCompletesProtocol(m_21,m_22,m_24,m_25,m_26,m_27)
        ) | (
            {213}out(ch(m'_9), m'_4_fromProver)
        ) | (
            {214}out(ch(m'_10), m'_6_fromProver)
        ) | (
            {215}out(ch(m'_11), m'_8_fromProver)
        ) | (
            {216}out(ch(VC_3), cred_fromProver)
        ) | (
            {217}out(ch(tkn_access_1), access_token_fromProver)
        )
    ) | (
        {218}if talksOnlyToHonest_3 then
        (
            {219}event auth_HolderCompletesProtocol(m_0_3,m_17,m_19,m_20)
        ) | (
            {220}out(ch(m'_0_1), m'_0_fromHolder)
        ) | (
            {221}out(ch(m'_7), m'_2_fromHolder)
        ) | (
            {222}out(ch(((attr'_1,DID'_I_3),sigVal_I_1)), cred_fromHolder)
        )
    )
) | (
    {223}!
    {224}let sk_P_3: SecretKey = sk_P in
    {225}let pk_I_2: PublicKey = pk(sk_E) in
    {226}let pk_V_2: PublicKey = pk(sk_V) in
    {227}let talksOnlyToHonest_4: bool = false in
    {228}new x_4: exponent;
    {229}let gx_6: G = g(x_4) in
    {230}let m'_0_2: bitstring = bitG(gx_6) in
    {231}let m_0_4: bitstring = m'_0_2 in
    {232}out(h, m_0_4);
    {233}in(h, m_28: bitstring);
    {234}let (eGY_4: bitstring,m_29: bitstring) = m_28 in
    {235}let gy_6: G = unbitG(eGY_4) in
    {236}let K_6: SymmetricKey = GtoSymK(exp(gy_6,x_4)) in
    {237}let s_K_6: bitstring = dec(m_29,K_6) in
    {238}if check((gy_6,gx_6),s_K_6,pk_I_2) then
    {239}new n_i_2: bitstring;
    {240}let m'_12: bitstring = (sig((gx_6,gy_6),sk_P_3),DID_P,DID_E,n_i_2) in
    {241}let m_30: bitstring = enc(m'_12,K_6) in
    {242}event auth_HolderSendsLastMessageToIssuer(m_0_4,m_28,m_30);
    {243}out(h, m_30);
    {244}in(h, m_31: bitstring);
    {245}let ((((attr'_2: bitstring,DID'_I_4: DID),sigVal_I_2: bitstring),DID''_P_2: DID,n'_h_2: bitstring),sigVal'_I_2: bitstring) = dec(m_31,K_6) in
    {246}if check((((attr'_2,DID'_I_4),sigVal_I_2),DID''_P_2,n'_h_2),sigVal'_I_2,pk_I_2) then
    {247}if ((DID''_P_2,n'_h_2) = (DID_P,n_i_2)) then
    {248}if check((attr'_2,DID'_I_4),sigVal_I_2,pk_I_2) then
    {249}if (DID'_I_4 = DID_E) then
    {250}out(h, Holder_Completes);
    (
        {251}!
        {252}let VC_4: bitstring = ((attr'_2,DID'_I_4),sigVal_I_2) in
        {253}new x_5: exponent;
        {254}let gx_7: G = g(x_5) in
        {255}let m'_13: bitstring = bitG(gx_7) in
        {256}let m_32: bitstring = m'_13 in
        {257}out(h, m_32);
        {258}in(h, m_33: bitstring);
        {259}let (eGY_5: bitstring,m_34: bitstring) = m_33 in
        {260}let gy_7: G = unbitG(eGY_5) in
        {261}let K_7: SymmetricKey = GtoSymK(exp(gy_7,x_5)) in
        {262}let s_K_7: bitstring = dec(m_34,K_7) in
        {263}if check((gy_7,gx_7),s_K_7,pk_V_2) then
        {264}let m'_14: bitstring = ((gx_7,gy_7),uri) in
        {265}let m_35: bitstring = enc(m'_14,K_7) in
        {266}out(h, m_35);
        {267}in(h, m_36: bitstring);
        {268}let (n_c_2: bitstring,rule_2: bitstring) = dec(m_36,K_7) in
        {269}let (claims_4: bitstring,sigVal_VC_2: bitstring) = VC_4 in
        {270}if (claims_4 = rule_2) then
        {271}let ph_2: bitstring = ((gx_7,gy_7),n_c_2,DID_V) in
        {272}new randomness_2: bitstring;
        {273}let poks_2: bitstring = proofGen(VC_4,ph_2,pk_I_2,randomness_2) in
        {274}let m'_15: bitstring = (claims_4,poks_2) in
        {275}let m_37: bitstring = enc(m'_15,K_7) in
        {276}event auth_ProverSendsLastMessageToVerifier(m_32,m_33,m_35,m_36,m_37);
        {277}event auth_ProverSendsLastMessageToVerifierInProtocolFull(m_0_4,m_28,m_30,m_31,m_32,m_33,m_35,m_36,m_37);
        {278}out(h, m_37);
        {279}in(h, m_38: bitstring);
        {280}let (tkn_access_2: bitstring,sigVal_tkn_2: bitstring) = dec(m_38,K_7) in
        {281}if check(tkn_access_2,sigVal_tkn_2,pk_V_2) then
        {282}out(h, Prover_Completes);
        {283}if talksOnlyToHonest_4 then
        (
            {284}event auth_ProverCompletesProtocol(m_32,m_33,m_35,m_36,m_37,m_38)
        ) | (
            {285}out(ch(m'_13), m'_4_fromProver)
        ) | (
            {286}out(ch(m'_14), m'_6_fromProver)
        ) | (
            {287}out(ch(m'_15), m'_8_fromProver)
        ) | (
            {288}out(ch(VC_4), cred_fromProver)
        ) | (
            {289}out(ch(tkn_access_2), access_token_fromProver)
        )
    ) | (
        {290}if talksOnlyToHonest_4 then
        (
            {291}event auth_HolderCompletesProtocol(m_0_4,m_28,m_30,m_31)
        ) | (
            {292}out(ch(m'_0_2), m'_0_fromHolder)
        ) | (
            {293}out(ch(m'_12), m'_2_fromHolder)
        ) | (
            {294}out(ch(((attr'_2,DID'_I_4),sigVal_I_2)), cred_fromHolder)
        )
    )
) | (
    {295}!
    {296}let sk_P_4: SecretKey = sk_P in
    {297}let pk_I_3: PublicKey = pk(sk_E) in
    {298}let pk_V_3: PublicKey = pk(sk_E) in
    {299}let talksOnlyToHonest_5: bool = false in
    {300}new x_6: exponent;
    {301}let gx_8: G = g(x_6) in
    {302}let m'_0_3: bitstring = bitG(gx_8) in
    {303}let m_0_5: bitstring = m'_0_3 in
    {304}out(h, m_0_5);
    {305}in(h, m_39: bitstring);
    {306}let (eGY_6: bitstring,m_40: bitstring) = m_39 in
    {307}let gy_8: G = unbitG(eGY_6) in
    {308}let K_8: SymmetricKey = GtoSymK(exp(gy_8,x_6)) in
    {309}let s_K_8: bitstring = dec(m_40,K_8) in
    {310}if check((gy_8,gx_8),s_K_8,pk_I_3) then
    {311}new n_i_3: bitstring;
    {312}let m'_16: bitstring = (sig((gx_8,gy_8),sk_P_4),DID_P,DID_E,n_i_3) in
    {313}let m_41: bitstring = enc(m'_16,K_8) in
    {314}event auth_HolderSendsLastMessageToIssuer(m_0_5,m_39,m_41);
    {315}out(h, m_41);
    {316}in(h, m_42: bitstring);
    {317}let ((((attr'_3: bitstring,DID'_I_5: DID),sigVal_I_3: bitstring),DID''_P_3: DID,n'_h_3: bitstring),sigVal'_I_3: bitstring) = dec(m_42,K_8) in
    {318}if check((((attr'_3,DID'_I_5),sigVal_I_3),DID''_P_3,n'_h_3),sigVal'_I_3,pk_I_3) then
    {319}if ((DID''_P_3,n'_h_3) = (DID_P,n_i_3)) then
    {320}if check((attr'_3,DID'_I_5),sigVal_I_3,pk_I_3) then
    {321}if (DID'_I_5 = DID_E) then
    {322}out(h, Holder_Completes);
    (
        {323}!
        {324}let VC_5: bitstring = ((attr'_3,DID'_I_5),sigVal_I_3) in
        {325}new x_7: exponent;
        {326}let gx_9: G = g(x_7) in
        {327}let m'_17: bitstring = bitG(gx_9) in
        {328}let m_43: bitstring = m'_17 in
        {329}out(h, m_43);
        {330}in(h, m_44: bitstring);
        {331}let (eGY_7: bitstring,m_45: bitstring) = m_44 in
        {332}let gy_9: G = unbitG(eGY_7) in
        {333}let K_9: SymmetricKey = GtoSymK(exp(gy_9,x_7)) in
        {334}let s_K_9: bitstring = dec(m_45,K_9) in
        {335}if check((gy_9,gx_9),s_K_9,pk_V_3) then
        {336}let m'_18: bitstring = ((gx_9,gy_9),uri) in
        {337}let m_46: bitstring = enc(m'_18,K_9) in
        {338}out(h, m_46);
        {339}in(h, m_47: bitstring);
        {340}let (n_c_3: bitstring,rule_3: bitstring) = dec(m_47,K_9) in
        {341}let (claims_5: bitstring,sigVal_VC_3: bitstring) = VC_5 in
        {342}if (claims_5 = rule_3) then
        {343}let ph_3: bitstring = ((gx_9,gy_9),n_c_3,DID_E) in
        {344}new randomness_3: bitstring;
        {345}let poks_3: bitstring = proofGen(VC_5,ph_3,pk_I_3,randomness_3) in
        {346}let m'_19: bitstring = (claims_5,poks_3) in
        {347}let m_48: bitstring = enc(m'_19,K_9) in
        {348}event auth_ProverSendsLastMessageToVerifier(m_43,m_44,m_46,m_47,m_48);
        {349}event auth_ProverSendsLastMessageToVerifierInProtocolFull(m_0_5,m_39,m_41,m_42,m_43,m_44,m_46,m_47,m_48);
        {350}out(h, m_48);
        {351}in(h, m_49: bitstring);
        {352}let (tkn_access_3: bitstring,sigVal_tkn_3: bitstring) = dec(m_49,K_9) in
        {353}if check(tkn_access_3,sigVal_tkn_3,pk_V_3) then
        {354}out(h, Prover_Completes);
        {355}if talksOnlyToHonest_5 then
        (
            {356}event auth_ProverCompletesProtocol(m_43,m_44,m_46,m_47,m_48,m_49)
        ) | (
            {357}out(ch(m'_17), m'_4_fromProver)
        ) | (
            {358}out(ch(m'_18), m'_6_fromProver)
        ) | (
            {359}out(ch(m'_19), m'_8_fromProver)
        ) | (
            {360}out(ch(VC_5), cred_fromProver)
        ) | (
            {361}out(ch(tkn_access_3), access_token_fromProver)
        )
    ) | (
        {362}if talksOnlyToHonest_5 then
        (
            {363}event auth_HolderCompletesProtocol(m_0_5,m_39,m_41,m_42)
        ) | (
            {364}out(ch(m'_0_3), m'_0_fromHolder)
        ) | (
            {365}out(ch(m'_16), m'_2_fromHolder)
        ) | (
            {366}out(ch(((attr'_3,DID'_I_5),sigVal_I_3)), cred_fromHolder)
        )
    )
) | (
    {367}!
    {368}let sk_V_1: SecretKey = sk_V in
    {369}let pk_I_4: PublicKey = pk(sk_I) in
    {370}let talksOnlyToHonest_6: bool = true in
    {371}let (attr_4: bitstring,DID_I_1: DID) = rule_I in
    {372}in(h, m_50: bitstring);
    {373}let gx_10: G = unbitG(m_50) in
    {374}new y_2: exponent;
    {375}let gy_10: G = g(y_2) in
    {376}let K_10: SymmetricKey = GtoSymK(exp(gx_10,y_2)) in
    {377}let m'_20: bitstring = sig((gy_10,gx_10),sk_V_1) in
    {378}let m_51: bitstring = (bitG(gy_10),enc(m'_20,K_10)) in
    {379}out(h, m_51);
    {380}in(h, m_52: bitstring);
    {381}let (s_K_10: bitstring,uri': bitstring) = dec(m_52,K_10) in
    {382}if (uri' = uri) then
    {383}new n_c_4: bitstring;
    {384}let m'_21: bitstring = (n_c_4,rule_I) in
    {385}let m_53: bitstring = enc(m'_21,K_10) in
    {386}out(h, m_53);
    {387}in(h, m_54: bitstring);
    {388}let ((attr'_4: bitstring,DID'_I_6: DID),poks_4: bitstring) = dec(m_54,K_10) in
    {389}let ph_4: bitstring = ((gx_10,gy_10),n_c_4,DID_V) in
    {390}if proofVerify((attr'_4,DID'_I_6),poks_4,ph_4,pk_I_4) then
    {391}if ((attr'_4,DID'_I_6) = (attr_4,DID_I_1)) then
    {392}new tkn_access_4: bitstring;
    {393}let m'_22: bitstring = (tkn_access_4,sig(tkn_access_4,sk_V_1)) in
    {394}let m_55: bitstring = enc(m'_22,K_10) in
    {395}event auth_VerifierSendsLastMessageToProver(m_50,m_51,m_52,m_53,m_54,m_55);
    {396}out(h, m_55);
    {397}out(h, Verifier_Completes);
    {398}if talksOnlyToHonest_6 then
    (
        {399}event auth_VerifierCompletesProtocol(m_50,m_51,m_52,m_53,m_54)
    ) | (
        {400}out(ch(m'_20), m'_5_fromVerifier)
    ) | (
        {401}out(ch(rule_I), rule_fromVerifier)
    ) | (
        {402}out(ch(m'_21), m'_7_fromVerifier)
    ) | (
        {403}out(ch(m'_22), m'_9_fromVerifier)
    ) | (
        {404}out(ch(tkn_access_4), access_token_fromVerifier)
    )
) | (
    {405}!
    {406}let sk_V_2: SecretKey = sk_V in
    {407}let pk_I_5: PublicKey = pk(sk_E) in
    {408}let talksOnlyToHonest_7: bool = false in
    {409}let (attr_5: bitstring,DID_I_2: DID) = rule_E in
    {410}in(h, m_56: bitstring);
    {411}let gx_11: G = unbitG(m_56) in
    {412}new y_3: exponent;
    {413}let gy_11: G = g(y_3) in
    {414}let K_11: SymmetricKey = GtoSymK(exp(gx_11,y_3)) in
    {415}let m'_23: bitstring = sig((gy_11,gx_11),sk_V_2) in
    {416}let m_57: bitstring = (bitG(gy_11),enc(m'_23,K_11)) in
    {417}out(h, m_57);
    {418}in(h, m_58: bitstring);
    {419}let (s_K_11: bitstring,uri'_1: bitstring) = dec(m_58,K_11) in
    {420}if (uri'_1 = uri) then
    {421}new n_c_5: bitstring;
    {422}let m'_24: bitstring = (n_c_5,rule_E) in
    {423}let m_59: bitstring = enc(m'_24,K_11) in
    {424}out(h, m_59);
    {425}in(h, m_60: bitstring);
    {426}let ((attr'_5: bitstring,DID'_I_7: DID),poks_5: bitstring) = dec(m_60,K_11) in
    {427}let ph_5: bitstring = ((gx_11,gy_11),n_c_5,DID_V) in
    {428}if proofVerify((attr'_5,DID'_I_7),poks_5,ph_5,pk_I_5) then
    {429}if ((attr'_5,DID'_I_7) = (attr_5,DID_I_2)) then
    {430}new tkn_access_5: bitstring;
    {431}let m'_25: bitstring = (tkn_access_5,sig(tkn_access_5,sk_V_2)) in
    {432}let m_61: bitstring = enc(m'_25,K_11) in
    {433}event auth_VerifierSendsLastMessageToProver(m_56,m_57,m_58,m_59,m_60,m_61);
    {434}out(h, m_61);
    {435}out(h, Verifier_Completes);
    {436}if talksOnlyToHonest_7 then
    (
        {437}event auth_VerifierCompletesProtocol(m_56,m_57,m_58,m_59,m_60)
    ) | (
        {438}out(ch(m'_23), m'_5_fromVerifier)
    ) | (
        {439}out(ch(rule_E), rule_fromVerifier)
    ) | (
        {440}out(ch(m'_24), m'_7_fromVerifier)
    ) | (
        {441}out(ch(m'_25), m'_9_fromVerifier)
    ) | (
        {442}out(ch(tkn_access_5), access_token_fromVerifier)
    )
) | (
    {443}!
    {444}let sk_V_3: SecretKey = sk_V in
    {445}let pk_I_6: PublicKey = pk(sk_I) in
    {446}let talksOnlyToHonest_8: bool = false in
    {447}let (attr_6: bitstring,DID_I_3: DID) = rule_I_2 in
    {448}in(h, m_62: bitstring);
    {449}let gx_12: G = unbitG(m_62) in
    {450}new y_4: exponent;
    {451}let gy_12: G = g(y_4) in
    {452}let K_12: SymmetricKey = GtoSymK(exp(gx_12,y_4)) in
    {453}let m'_26: bitstring = sig((gy_12,gx_12),sk_V_3) in
    {454}let m_63: bitstring = (bitG(gy_12),enc(m'_26,K_12)) in
    {455}out(h, m_63);
    {456}in(h, m_64: bitstring);
    {457}let (s_K_12: bitstring,uri'_2: bitstring) = dec(m_64,K_12) in
    {458}if (uri'_2 = uri) then
    {459}new n_c_6: bitstring;
    {460}let m'_27: bitstring = (n_c_6,rule_I_2) in
    {461}let m_65: bitstring = enc(m'_27,K_12) in
    {462}out(h, m_65);
    {463}in(h, m_66: bitstring);
    {464}let ((attr'_6: bitstring,DID'_I_8: DID),poks_6: bitstring) = dec(m_66,K_12) in
    {465}let ph_6: bitstring = ((gx_12,gy_12),n_c_6,DID_V) in
    {466}if proofVerify((attr'_6,DID'_I_8),poks_6,ph_6,pk_I_6) then
    {467}if ((attr'_6,DID'_I_8) = (attr_6,DID_I_3)) then
    {468}new tkn_access_6: bitstring;
    {469}let m'_28: bitstring = (tkn_access_6,sig(tkn_access_6,sk_V_3)) in
    {470}let m_67: bitstring = enc(m'_28,K_12) in
    {471}event auth_VerifierSendsLastMessageToProver(m_62,m_63,m_64,m_65,m_66,m_67);
    {472}out(h, m_67);
    {473}out(h, Verifier_Completes);
    {474}if talksOnlyToHonest_8 then
    (
        {475}event auth_VerifierCompletesProtocol(m_62,m_63,m_64,m_65,m_66)
    ) | (
        {476}out(ch(m'_26), m'_5_fromVerifier)
    ) | (
        {477}out(ch(rule_I_2), rule_fromVerifier)
    ) | (
        {478}out(ch(m'_27), m'_7_fromVerifier)
    ) | (
        {479}out(ch(m'_28), m'_9_fromVerifier)
    ) | (
        {480}out(ch(tkn_access_6), access_token_fromVerifier)
    )
) | (
    {481}!
    {482}let sk_V_4: SecretKey = sk_V in
    {483}let pk_I_7: PublicKey = pk(sk_E) in
    {484}let talksOnlyToHonest_9: bool = false in
    {485}let (attr_7: bitstring,DID_I_4: DID) = rule_E_2 in
    {486}in(h, m_68: bitstring);
    {487}let gx_13: G = unbitG(m_68) in
    {488}new y_5: exponent;
    {489}let gy_13: G = g(y_5) in
    {490}let K_13: SymmetricKey = GtoSymK(exp(gx_13,y_5)) in
    {491}let m'_29: bitstring = sig((gy_13,gx_13),sk_V_4) in
    {492}let m_69: bitstring = (bitG(gy_13),enc(m'_29,K_13)) in
    {493}out(h, m_69);
    {494}in(h, m_70: bitstring);
    {495}let (s_K_13: bitstring,uri'_3: bitstring) = dec(m_70,K_13) in
    {496}if (uri'_3 = uri) then
    {497}new n_c_7: bitstring;
    {498}let m'_30: bitstring = (n_c_7,rule_E_2) in
    {499}let m_71: bitstring = enc(m'_30,K_13) in
    {500}out(h, m_71);
    {501}in(h, m_72: bitstring);
    {502}let ((attr'_7: bitstring,DID'_I_9: DID),poks_7: bitstring) = dec(m_72,K_13) in
    {503}let ph_7: bitstring = ((gx_13,gy_13),n_c_7,DID_V) in
    {504}if proofVerify((attr'_7,DID'_I_9),poks_7,ph_7,pk_I_7) then
    {505}if ((attr'_7,DID'_I_9) = (attr_7,DID_I_4)) then
    {506}new tkn_access_7: bitstring;
    {507}let m'_31: bitstring = (tkn_access_7,sig(tkn_access_7,sk_V_4)) in
    {508}let m_73: bitstring = enc(m'_31,K_13) in
    {509}event auth_VerifierSendsLastMessageToProver(m_68,m_69,m_70,m_71,m_72,m_73);
    {510}out(h, m_73);
    {511}out(h, Verifier_Completes);
    {512}if talksOnlyToHonest_9 then
    (
        {513}event auth_VerifierCompletesProtocol(m_68,m_69,m_70,m_71,m_72)
    ) | (
        {514}out(ch(m'_29), m'_5_fromVerifier)
    ) | (
        {515}out(ch(rule_E_2), rule_fromVerifier)
    ) | (
        {516}out(ch(m'_30), m'_7_fromVerifier)
    ) | (
        {517}out(ch(m'_31), m'_9_fromVerifier)
    ) | (
        {518}out(ch(tkn_access_7), access_token_fromVerifier)
    )
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new attr_2: bitstring;
{2}out(h, attr_2);
{3}new sk_I: SecretKey;
{4}new sk_V: SecretKey;
{5}new sk_P: SecretKey;
{6}out(h, pk(sk_I));
{7}out(h, pk(sk_V));
{8}out(h, pk(sk_P));
{9}let DID_I: DID = genDID(pk(sk_I),sk_I) in
{13}out(h, DID_I);
{10}let DID_V: DID = genDID(pk(sk_V),sk_V) in
{14}out(h, DID_V);
{11}let DID_P: DID = genDID(pk(sk_P),sk_P) in
{15}out(h, DID_P);
{12}let DID_E: DID = genDID(pk(sk_E),sk_E) in
{16}out(h, DID_E);
(
    {21}!
    {26}in(h, m_0: bitstring);
    {27}let gx: G = unbitG(m_0) in
    {28}new y: exponent;
    {29}let gy: G = g(y) in
    {22}let sk_I_1: SecretKey = sk_I in
    {31}let m'_1: bitstring = sig((gy,gx),sk_I_1) in
    {30}let K: SymmetricKey = GtoSymK(exp(gx,y)) in
    {32}let m_1: bitstring = (bitG(gy),enc(m'_1,K)) in
    {33}out(h, m_1);
    {34}in(h, m_2: bitstring);
    {35}let (s_K: bitstring,DID'_P: DID,DID'_I: DID,n_h: bitstring) = dec(m_2,K) in
    {24}let pk_P: PublicKey = pk(sk_P) in
    {36}if check((gx,gy),s_K,pk_P) then
    {37}if ((DID'_P,DID'_I) = (DID_P,DID_I)) then
    {23}let attr_1: bitstring = attr in
    {38}let claims: bitstring = (attr_1,DID_I) in
    {39}let VC: bitstring = (claims,sig(claims,sk_I_1)) in
    {40}let m'_3: bitstring = ((VC,DID_P,n_h),sig((VC,DID_P,n_h),sk_I_1)) in
    {41}let m_3: bitstring = enc(m'_3,K) in
    {42}event auth_IssuerSendsLastMessageToHolder(m_0,m_1,m_2,m_3);
    {43}out(h, m_3);
    {44}out(h, Issuer_Completes);
    {25}let talksOnlyToHonest: bool = true in
    {45}if talksOnlyToHonest then
    (
        {46}event auth_IssuerCompletesProtocol(m_0,m_1,m_2)
    ) | (
        {47}out(ch(m'_1), m'_1_fromIssuer)
    ) | (
        {48}out(ch(VC), cred_fromIssuer)
    ) | (
        {49}out(ch(m'_3), m'_3_fromIssuer)
    )
) | (
    {50}!
    {55}in(h, m_0_1: bitstring);
    {56}let gx_1: G = unbitG(m_0_1) in
    {57}new y_1: exponent;
    {58}let gy_1: G = g(y_1) in
    {51}let sk_I_2: SecretKey = sk_I in
    {60}let m': bitstring = sig((gy_1,gx_1),sk_I_2) in
    {59}let K_1: SymmetricKey = GtoSymK(exp(gx_1,y_1)) in
    {61}let m: bitstring = (bitG(gy_1),enc(m',K_1)) in
    {62}out(h, m);
    {63}in(h, m_4: bitstring);
    {64}let (s_K_1: bitstring,DID'_P_1: DID,DID'_I_1: DID,n_h_1: bitstring) = dec(m_4,K_1) in
    {53}let pk_P_1: PublicKey = pk(sk_E) in
    {65}if check((gx_1,gy_1),s_K_1,pk_P_1) then
    {66}if ((DID'_P_1,DID'_I_1) = (DID_E,DID_I)) then
    {52}let attr_3: bitstring = attr_2 in
    {67}let claims_1: bitstring = (attr_3,DID_I) in
    {68}let VC_1: bitstring = (claims_1,sig(claims_1,sk_I_2)) in
    {69}let m'_2: bitstring = ((VC_1,DID_E,n_h_1),sig((VC_1,DID_E,n_h_1),sk_I_2)) in
    {70}let m_5: bitstring = enc(m'_2,K_1) in
    {71}event auth_IssuerSendsLastMessageToHolder(m_0_1,m,m_4,m_5);
    {72}out(h, m_5);
    {73}out(h, Issuer_Completes);
    {54}let talksOnlyToHonest_1: bool = false in
    {74}if talksOnlyToHonest_1 then
    (
        {75}event auth_IssuerCompletesProtocol(m_0_1,m,m_4)
    ) | (
        {76}out(ch(m'), m'_1_fromIssuer)
    ) | (
        {77}out(ch(VC_1), cred_fromIssuer)
    ) | (
        {78}out(ch(m'_2), m'_3_fromIssuer)
    )
) | (
    {79}!
    {84}new x: exponent;
    {85}let gx_2: G = g(x) in
    {86}let m'_0: bitstring = bitG(gx_2) in
    {87}let m_0_2: bitstring = m'_0 in
    {88}out(h, m_0_2);
    {89}in(h, m_6: bitstring);
    {90}let (eGY: bitstring,m_7: bitstring) = m_6 in
    {91}let gy_2: G = unbitG(eGY) in
    {92}let K_2: SymmetricKey = GtoSymK(exp(gy_2,x)) in
    {93}let s_K_2: bitstring = dec(m_7,K_2) in
    {81}let pk_I: PublicKey = pk(sk_I) in
    {94}if check((gy_2,gx_2),s_K_2,pk_I) then
    {95}new n_i: bitstring;
    {80}let sk_P_1: SecretKey = sk_P in
    {96}let m'_4: bitstring = (sig((gx_2,gy_2),sk_P_1),DID_P,DID_I,n_i) in
    {97}let m_8: bitstring = enc(m'_4,K_2) in
    {98}event auth_HolderSendsLastMessageToIssuer(m_0_2,m_6,m_8);
    {99}out(h, m_8);
    {100}in(h, m_9: bitstring);
    {101}let ((((attr': bitstring,DID'_I_2: DID),sigVal_I: bitstring),DID''_P: DID,n'_h: bitstring),sigVal'_I: bitstring) = dec(m_9,K_2) in
    {102}if check((((attr',DID'_I_2),sigVal_I),DID''_P,n'_h),sigVal'_I,pk_I) then
    {103}if ((DID''_P,n'_h) = (DID_P,n_i)) then
    {104}if check((attr',DID'_I_2),sigVal_I,pk_I) then
    {105}if (DID'_I_2 = DID_I) then
    {106}out(h, Holder_Completes);
    {83}let talksOnlyToHonest_2: bool = true in
    (
        {107}!
        {109}new x_1: exponent;
        {110}let gx_3: G = g(x_1) in
        {111}let m'_5: bitstring = bitG(gx_3) in
        {112}let m_10: bitstring = m'_5 in
        {113}out(h, m_10);
        {114}in(h, m_11: bitstring);
        {115}let (eGY_1: bitstring,m_12: bitstring) = m_11 in
        {116}let gy_3: G = unbitG(eGY_1) in
        {117}let K_3: SymmetricKey = GtoSymK(exp(gy_3,x_1)) in
        {118}let s_K_3: bitstring = dec(m_12,K_3) in
        {82}let pk_V: PublicKey = pk(sk_V) in
        {119}if check((gy_3,gx_3),s_K_3,pk_V) then
        {120}let m'_6: bitstring = ((gx_3,gy_3),uri) in
        {121}let m_13: bitstring = enc(m'_6,K_3) in
        {122}out(h, m_13);
        {123}in(h, m_14: bitstring);
        {124}let (n_c: bitstring,rule: bitstring) = dec(m_14,K_3) in
        {108}let VC_2: bitstring = ((attr',DID'_I_2),sigVal_I) in
        {125}let (claims_2: bitstring,sigVal_VC: bitstring) = VC_2 in
        {126}if (claims_2 = rule) then
        {128}new randomness: bitstring;
        {127}let ph: bitstring = ((gx_3,gy_3),n_c,DID_V) in
        {129}let poks: bitstring = proofGen(VC_2,ph,pk_I,randomness) in
        {130}let m'_8: bitstring = (claims_2,poks) in
        {131}let m_15: bitstring = enc(m'_8,K_3) in
        {132}event auth_ProverSendsLastMessageToVerifier(m_10,m_11,m_13,m_14,m_15);
        {133}event auth_ProverSendsLastMessageToVerifierInProtocolFull(m_0_2,m_6,m_8,m_9,m_10,m_11,m_13,m_14,m_15);
        {134}out(h, m_15);
        {135}in(h, m_16: bitstring);
        {136}let (tkn_access: bitstring,sigVal_tkn: bitstring) = dec(m_16,K_3) in
        {137}if check(tkn_access,sigVal_tkn,pk_V) then
        {138}out(h, Prover_Completes);
        {139}if talksOnlyToHonest_2 then
        (
            {140}event auth_ProverCompletesProtocol(m_10,m_11,m_13,m_14,m_15,m_16)
        ) | (
            {141}out(ch(m'_5), m'_4_fromProver)
        ) | (
            {142}out(ch(m'_6), m'_6_fromProver)
        ) | (
            {143}out(ch(m'_8), m'_8_fromProver)
        ) | (
            {144}out(ch(VC_2), cred_fromProver)
        ) | (
            {145}out(ch(tkn_access), access_token_fromProver)
        )
    ) | (
        {146}if talksOnlyToHonest_2 then
        (
            {147}event auth_HolderCompletesProtocol(m_0_2,m_6,m_8,m_9)
        ) | (
            {148}out(ch(m'_0), m'_0_fromHolder)
        ) | (
            {149}out(ch(m'_4), m'_2_fromHolder)
        ) | (
            {150}out(ch(((attr',DID'_I_2),sigVal_I)), cred_fromHolder)
        )
    )
) | (
    {151}!
    {156}new x_2: exponent;
    {157}let gx_4: G = g(x_2) in
    {158}let m'_0_1: bitstring = bitG(gx_4) in
    {159}let m_0_3: bitstring = m'_0_1 in
    {160}out(h, m_0_3);
    {161}in(h, m_17: bitstring);
    {162}let (eGY_2: bitstring,m_18: bitstring) = m_17 in
    {163}let gy_4: G = unbitG(eGY_2) in
    {164}let K_4: SymmetricKey = GtoSymK(exp(gy_4,x_2)) in
    {165}let s_K_4: bitstring = dec(m_18,K_4) in
    {153}let pk_I_1: PublicKey = pk(sk_I) in
    {166}if check((gy_4,gx_4),s_K_4,pk_I_1) then
    {167}new n_i_1: bitstring;
    {152}let sk_P_2: SecretKey = sk_P in
    {168}let m'_7: bitstring = (sig((gx_4,gy_4),sk_P_2),DID_P,DID_I,n_i_1) in
    {169}let m_19: bitstring = enc(m'_7,K_4) in
    {170}event auth_HolderSendsLastMessageToIssuer(m_0_3,m_17,m_19);
    {171}out(h, m_19);
    {172}in(h, m_20: bitstring);
    {173}let ((((attr'_1: bitstring,DID'_I_3: DID),sigVal_I_1: bitstring),DID''_P_1: DID,n'_h_1: bitstring),sigVal'_I_1: bitstring) = dec(m_20,K_4) in
    {174}if check((((attr'_1,DID'_I_3),sigVal_I_1),DID''_P_1,n'_h_1),sigVal'_I_1,pk_I_1) then
    {175}if ((DID''_P_1,n'_h_1) = (DID_P,n_i_1)) then
    {176}if check((attr'_1,DID'_I_3),sigVal_I_1,pk_I_1) then
    {177}if (DID'_I_3 = DID_I) then
    {178}out(h, Holder_Completes);
    {155}let talksOnlyToHonest_3: bool = false in
    (
        {179}!
        {181}new x_3: exponent;
        {182}let gx_5: G = g(x_3) in
        {183}let m'_9: bitstring = bitG(gx_5) in
        {184}let m_21: bitstring = m'_9 in
        {185}out(h, m_21);
        {186}in(h, m_22: bitstring);
        {187}let (eGY_3: bitstring,m_23: bitstring) = m_22 in
        {188}let gy_5: G = unbitG(eGY_3) in
        {189}let K_5: SymmetricKey = GtoSymK(exp(gy_5,x_3)) in
        {190}let s_K_5: bitstring = dec(m_23,K_5) in
        {154}let pk_V_1: PublicKey = pk(sk_E) in
        {191}if check((gy_5,gx_5),s_K_5,pk_V_1) then
        {192}let m'_10: bitstring = ((gx_5,gy_5),uri) in
        {193}let m_24: bitstring = enc(m'_10,K_5) in
        {194}out(h, m_24);
        {195}in(h, m_25: bitstring);
        {196}let (n_c_1: bitstring,rule_1: bitstring) = dec(m_25,K_5) in
        {180}let VC_3: bitstring = ((attr'_1,DID'_I_3),sigVal_I_1) in
        {197}let (claims_3: bitstring,sigVal_VC_1: bitstring) = VC_3 in
        {198}if (claims_3 = rule_1) then
        {200}new randomness_1: bitstring;
        {199}let ph_1: bitstring = ((gx_5,gy_5),n_c_1,DID_E) in
        {201}let poks_1: bitstring = proofGen(VC_3,ph_1,pk_I_1,randomness_1) in
        {202}let m'_11: bitstring = (claims_3,poks_1) in
        {203}let m_26: bitstring = enc(m'_11,K_5) in
        {204}event auth_ProverSendsLastMessageToVerifier(m_21,m_22,m_24,m_25,m_26);
        {205}event auth_ProverSendsLastMessageToVerifierInProtocolFull(m_0_3,m_17,m_19,m_20,m_21,m_22,m_24,m_25,m_26);
        {206}out(h, m_26);
        {207}in(h, m_27: bitstring);
        {208}let (tkn_access_1: bitstring,sigVal_tkn_1: bitstring) = dec(m_27,K_5) in
        {209}if check(tkn_access_1,sigVal_tkn_1,pk_V_1) then
        {210}out(h, Prover_Completes);
        {211}if talksOnlyToHonest_3 then
        (
            {212}event auth_ProverCompletesProtocol(m_21,m_22,m_24,m_25,m_26,m_27)
        ) | (
            {213}out(ch(m'_9), m'_4_fromProver)
        ) | (
            {214}out(ch(m'_10), m'_6_fromProver)
        ) | (
            {215}out(ch(m'_11), m'_8_fromProver)
        ) | (
            {216}out(ch(VC_3), cred_fromProver)
        ) | (
            {217}out(ch(tkn_access_1), access_token_fromProver)
        )
    ) | (
        {218}if talksOnlyToHonest_3 then
        (
            {219}event auth_HolderCompletesProtocol(m_0_3,m_17,m_19,m_20)
        ) | (
            {220}out(ch(m'_0_1), m'_0_fromHolder)
        ) | (
            {221}out(ch(m'_7), m'_2_fromHolder)
        ) | (
            {222}out(ch(((attr'_1,DID'_I_3),sigVal_I_1)), cred_fromHolder)
        )
    )
) | (
    {223}!
    {228}new x_4: exponent;
    {229}let gx_6: G = g(x_4) in
    {230}let m'_0_2: bitstring = bitG(gx_6) in
    {231}let m_0_4: bitstring = m'_0_2 in
    {232}out(h, m_0_4);
    {233}in(h, m_28: bitstring);
    {234}let (eGY_4: bitstring,m_29: bitstring) = m_28 in
    {235}let gy_6: G = unbitG(eGY_4) in
    {236}let K_6: SymmetricKey = GtoSymK(exp(gy_6,x_4)) in
    {237}let s_K_6: bitstring = dec(m_29,K_6) in
    {225}let pk_I_2: PublicKey = pk(sk_E) in
    {238}if check((gy_6,gx_6),s_K_6,pk_I_2) then
    {239}new n_i_2: bitstring;
    {224}let sk_P_3: SecretKey = sk_P in
    {240}let m'_12: bitstring = (sig((gx_6,gy_6),sk_P_3),DID_P,DID_E,n_i_2) in
    {241}let m_30: bitstring = enc(m'_12,K_6) in
    {242}event auth_HolderSendsLastMessageToIssuer(m_0_4,m_28,m_30);
    {243}out(h, m_30);
    {244}in(h, m_31: bitstring);
    {245}let ((((attr'_2: bitstring,DID'_I_4: DID),sigVal_I_2: bitstring),DID''_P_2: DID,n'_h_2: bitstring),sigVal'_I_2: bitstring) = dec(m_31,K_6) in
    {246}if check((((attr'_2,DID'_I_4),sigVal_I_2),DID''_P_2,n'_h_2),sigVal'_I_2,pk_I_2) then
    {247}if ((DID''_P_2,n'_h_2) = (DID_P,n_i_2)) then
    {248}if check((attr'_2,DID'_I_4),sigVal_I_2,pk_I_2) then
    {249}if (DID'_I_4 = DID_E) then
    {250}out(h, Holder_Completes);
    {227}let talksOnlyToHonest_4: bool = false in
    (
        {251}!
        {253}new x_5: exponent;
        {254}let gx_7: G = g(x_5) in
        {255}let m'_13: bitstring = bitG(gx_7) in
        {256}let m_32: bitstring = m'_13 in
        {257}out(h, m_32);
        {258}in(h, m_33: bitstring);
        {259}let (eGY_5: bitstring,m_34: bitstring) = m_33 in
        {260}let gy_7: G = unbitG(eGY_5) in
        {261}let K_7: SymmetricKey = GtoSymK(exp(gy_7,x_5)) in
        {262}let s_K_7: bitstring = dec(m_34,K_7) in
        {226}let pk_V_2: PublicKey = pk(sk_V) in
        {263}if check((gy_7,gx_7),s_K_7,pk_V_2) then
        {264}let m'_14: bitstring = ((gx_7,gy_7),uri) in
        {265}let m_35: bitstring = enc(m'_14,K_7) in
        {266}out(h, m_35);
        {267}in(h, m_36: bitstring);
        {268}let (n_c_2: bitstring,rule_2: bitstring) = dec(m_36,K_7) in
        {252}let VC_4: bitstring = ((attr'_2,DID'_I_4),sigVal_I_2) in
        {269}let (claims_4: bitstring,sigVal_VC_2: bitstring) = VC_4 in
        {270}if (claims_4 = rule_2) then
        {272}new randomness_2: bitstring;
        {271}let ph_2: bitstring = ((gx_7,gy_7),n_c_2,DID_V) in
        {273}let poks_2: bitstring = proofGen(VC_4,ph_2,pk_I_2,randomness_2) in
        {274}let m'_15: bitstring = (claims_4,poks_2) in
        {275}let m_37: bitstring = enc(m'_15,K_7) in
        {276}event auth_ProverSendsLastMessageToVerifier(m_32,m_33,m_35,m_36,m_37);
        {277}event auth_ProverSendsLastMessageToVerifierInProtocolFull(m_0_4,m_28,m_30,m_31,m_32,m_33,m_35,m_36,m_37);
        {278}out(h, m_37);
        {279}in(h, m_38: bitstring);
        {280}let (tkn_access_2: bitstring,sigVal_tkn_2: bitstring) = dec(m_38,K_7) in
        {281}if check(tkn_access_2,sigVal_tkn_2,pk_V_2) then
        {282}out(h, Prover_Completes);
        {283}if talksOnlyToHonest_4 then
        (
            {284}event auth_ProverCompletesProtocol(m_32,m_33,m_35,m_36,m_37,m_38)
        ) | (
            {285}out(ch(m'_13), m'_4_fromProver)
        ) | (
            {286}out(ch(m'_14), m'_6_fromProver)
        ) | (
            {287}out(ch(m'_15), m'_8_fromProver)
        ) | (
            {288}out(ch(VC_4), cred_fromProver)
        ) | (
            {289}out(ch(tkn_access_2), access_token_fromProver)
        )
    ) | (
        {290}if talksOnlyToHonest_4 then
        (
            {291}event auth_HolderCompletesProtocol(m_0_4,m_28,m_30,m_31)
        ) | (
            {292}out(ch(m'_0_2), m'_0_fromHolder)
        ) | (
            {293}out(ch(m'_12), m'_2_fromHolder)
        ) | (
            {294}out(ch(((attr'_2,DID'_I_4),sigVal_I_2)), cred_fromHolder)
        )
    )
) | (
    {295}!
    {300}new x_6: exponent;
    {301}let gx_8: G = g(x_6) in
    {302}let m'_0_3: bitstring = bitG(gx_8) in
    {303}let m_0_5: bitstring = m'_0_3 in
    {304}out(h, m_0_5);
    {305}in(h, m_39: bitstring);
    {306}let (eGY_6: bitstring,m_40: bitstring) = m_39 in
    {307}let gy_8: G = unbitG(eGY_6) in
    {308}let K_8: SymmetricKey = GtoSymK(exp(gy_8,x_6)) in
    {309}let s_K_8: bitstring = dec(m_40,K_8) in
    {297}let pk_I_3: PublicKey = pk(sk_E) in
    {310}if check((gy_8,gx_8),s_K_8,pk_I_3) then
    {311}new n_i_3: bitstring;
    {296}let sk_P_4: SecretKey = sk_P in
    {312}let m'_16: bitstring = (sig((gx_8,gy_8),sk_P_4),DID_P,DID_E,n_i_3) in
    {313}let m_41: bitstring = enc(m'_16,K_8) in
    {314}event auth_HolderSendsLastMessageToIssuer(m_0_5,m_39,m_41);
    {315}out(h, m_41);
    {316}in(h, m_42: bitstring);
    {317}let ((((attr'_3: bitstring,DID'_I_5: DID),sigVal_I_3: bitstring),DID''_P_3: DID,n'_h_3: bitstring),sigVal'_I_3: bitstring) = dec(m_42,K_8) in
    {318}if check((((attr'_3,DID'_I_5),sigVal_I_3),DID''_P_3,n'_h_3),sigVal'_I_3,pk_I_3) then
    {319}if ((DID''_P_3,n'_h_3) = (DID_P,n_i_3)) then
    {320}if check((attr'_3,DID'_I_5),sigVal_I_3,pk_I_3) then
    {321}if (DID'_I_5 = DID_E) then
    {322}out(h, Holder_Completes);
    {299}let talksOnlyToHonest_5: bool = false in
    (
        {323}!
        {325}new x_7: exponent;
        {326}let gx_9: G = g(x_7) in
        {327}let m'_17: bitstring = bitG(gx_9) in
        {328}let m_43: bitstring = m'_17 in
        {329}out(h, m_43);
        {330}in(h, m_44: bitstring);
        {331}let (eGY_7: bitstring,m_45: bitstring) = m_44 in
        {332}let gy_9: G = unbitG(eGY_7) in
        {333}let K_9: SymmetricKey = GtoSymK(exp(gy_9,x_7)) in
        {334}let s_K_9: bitstring = dec(m_45,K_9) in
        {298}let pk_V_3: PublicKey = pk(sk_E) in
        {335}if check((gy_9,gx_9),s_K_9,pk_V_3) then
        {336}let m'_18: bitstring = ((gx_9,gy_9),uri) in
        {337}let m_46: bitstring = enc(m'_18,K_9) in
        {338}out(h, m_46);
        {339}in(h, m_47: bitstring);
        {340}let (n_c_3: bitstring,rule_3: bitstring) = dec(m_47,K_9) in
        {324}let VC_5: bitstring = ((attr'_3,DID'_I_5),sigVal_I_3) in
        {341}let (claims_5: bitstring,sigVal_VC_3: bitstring) = VC_5 in
        {342}if (claims_5 = rule_3) then
        {344}new randomness_3: bitstring;
        {343}let ph_3: bitstring = ((gx_9,gy_9),n_c_3,DID_E) in
        {345}let poks_3: bitstring = proofGen(VC_5,ph_3,pk_I_3,randomness_3) in
        {346}let m'_19: bitstring = (claims_5,poks_3) in
        {347}let m_48: bitstring = enc(m'_19,K_9) in
        {348}event auth_ProverSendsLastMessageToVerifier(m_43,m_44,m_46,m_47,m_48);
        {349}event auth_ProverSendsLastMessageToVerifierInProtocolFull(m_0_5,m_39,m_41,m_42,m_43,m_44,m_46,m_47,m_48);
        {350}out(h, m_48);
        {351}in(h, m_49: bitstring);
        {352}let (tkn_access_3: bitstring,sigVal_tkn_3: bitstring) = dec(m_49,K_9) in
        {353}if check(tkn_access_3,sigVal_tkn_3,pk_V_3) then
        {354}out(h, Prover_Completes);
        {355}if talksOnlyToHonest_5 then
        (
            {356}event auth_ProverCompletesProtocol(m_43,m_44,m_46,m_47,m_48,m_49)
        ) | (
            {357}out(ch(m'_17), m'_4_fromProver)
        ) | (
            {358}out(ch(m'_18), m'_6_fromProver)
        ) | (
            {359}out(ch(m'_19), m'_8_fromProver)
        ) | (
            {360}out(ch(VC_5), cred_fromProver)
        ) | (
            {361}out(ch(tkn_access_3), access_token_fromProver)
        )
    ) | (
        {362}if talksOnlyToHonest_5 then
        (
            {363}event auth_HolderCompletesProtocol(m_0_5,m_39,m_41,m_42)
        ) | (
            {364}out(ch(m'_0_3), m'_0_fromHolder)
        ) | (
            {365}out(ch(m'_16), m'_2_fromHolder)
        ) | (
            {366}out(ch(((attr'_3,DID'_I_5),sigVal_I_3)), cred_fromHolder)
        )
    )
) | (
    {367}!
    {17}let rule_I: bitstring = (attr,DID_I) in
    {371}let (attr_4: bitstring,DID_I_1: DID) = rule_I in
    {372}in(h, m_50: bitstring);
    {373}let gx_10: G = unbitG(m_50) in
    {374}new y_2: exponent;
    {375}let gy_10: G = g(y_2) in
    {368}let sk_V_1: SecretKey = sk_V in
    {377}let m'_20: bitstring = sig((gy_10,gx_10),sk_V_1) in
    {376}let K_10: SymmetricKey = GtoSymK(exp(gx_10,y_2)) in
    {378}let m_51: bitstring = (bitG(gy_10),enc(m'_20,K_10)) in
    {379}out(h, m_51);
    {380}in(h, m_52: bitstring);
    {381}let (s_K_10: bitstring,uri': bitstring) = dec(m_52,K_10) in
    {382}if (uri' = uri) then
    {383}new n_c_4: bitstring;
    {384}let m'_21: bitstring = (n_c_4,rule_I) in
    {385}let m_53: bitstring = enc(m'_21,K_10) in
    {386}out(h, m_53);
    {387}in(h, m_54: bitstring);
    {388}let ((attr'_4: bitstring,DID'_I_6: DID),poks_4: bitstring) = dec(m_54,K_10) in
    {389}let ph_4: bitstring = ((gx_10,gy_10),n_c_4,DID_V) in
    {369}let pk_I_4: PublicKey = pk(sk_I) in
    {390}if proofVerify((attr'_4,DID'_I_6),poks_4,ph_4,pk_I_4) then
    {391}if ((attr'_4,DID'_I_6) = (attr_4,DID_I_1)) then
    {392}new tkn_access_4: bitstring;
    {393}let m'_22: bitstring = (tkn_access_4,sig(tkn_access_4,sk_V_1)) in
    {394}let m_55: bitstring = enc(m'_22,K_10) in
    {395}event auth_VerifierSendsLastMessageToProver(m_50,m_51,m_52,m_53,m_54,m_55);
    {396}out(h, m_55);
    {397}out(h, Verifier_Completes);
    {370}let talksOnlyToHonest_6: bool = true in
    {398}if talksOnlyToHonest_6 then
    (
        {399}event auth_VerifierCompletesProtocol(m_50,m_51,m_52,m_53,m_54)
    ) | (
        {400}out(ch(m'_20), m'_5_fromVerifier)
    ) | (
        {401}out(ch(rule_I), rule_fromVerifier)
    ) | (
        {402}out(ch(m'_21), m'_7_fromVerifier)
    ) | (
        {403}out(ch(m'_22), m'_9_fromVerifier)
    ) | (
        {404}out(ch(tkn_access_4), access_token_fromVerifier)
    )
) | (
    {405}!
    {18}let rule_E: bitstring = (attr,DID_E) in
    {409}let (attr_5: bitstring,DID_I_2: DID) = rule_E in
    {410}in(h, m_56: bitstring);
    {411}let gx_11: G = unbitG(m_56) in
    {412}new y_3: exponent;
    {413}let gy_11: G = g(y_3) in
    {406}let sk_V_2: SecretKey = sk_V in
    {415}let m'_23: bitstring = sig((gy_11,gx_11),sk_V_2) in
    {414}let K_11: SymmetricKey = GtoSymK(exp(gx_11,y_3)) in
    {416}let m_57: bitstring = (bitG(gy_11),enc(m'_23,K_11)) in
    {417}out(h, m_57);
    {418}in(h, m_58: bitstring);
    {419}let (s_K_11: bitstring,uri'_1: bitstring) = dec(m_58,K_11) in
    {420}if (uri'_1 = uri) then
    {421}new n_c_5: bitstring;
    {422}let m'_24: bitstring = (n_c_5,rule_E) in
    {423}let m_59: bitstring = enc(m'_24,K_11) in
    {424}out(h, m_59);
    {425}in(h, m_60: bitstring);
    {426}let ((attr'_5: bitstring,DID'_I_7: DID),poks_5: bitstring) = dec(m_60,K_11) in
    {427}let ph_5: bitstring = ((gx_11,gy_11),n_c_5,DID_V) in
    {407}let pk_I_5: PublicKey = pk(sk_E) in
    {428}if proofVerify((attr'_5,DID'_I_7),poks_5,ph_5,pk_I_5) then
    {429}if ((attr'_5,DID'_I_7) = (attr_5,DID_I_2)) then
    {430}new tkn_access_5: bitstring;
    {431}let m'_25: bitstring = (tkn_access_5,sig(tkn_access_5,sk_V_2)) in
    {432}let m_61: bitstring = enc(m'_25,K_11) in
    {433}event auth_VerifierSendsLastMessageToProver(m_56,m_57,m_58,m_59,m_60,m_61);
    {434}out(h, m_61);
    {435}out(h, Verifier_Completes);
    {408}let talksOnlyToHonest_7: bool = false in
    {436}if talksOnlyToHonest_7 then
    (
        {437}event auth_VerifierCompletesProtocol(m_56,m_57,m_58,m_59,m_60)
    ) | (
        {438}out(ch(m'_23), m'_5_fromVerifier)
    ) | (
        {439}out(ch(rule_E), rule_fromVerifier)
    ) | (
        {440}out(ch(m'_24), m'_7_fromVerifier)
    ) | (
        {441}out(ch(m'_25), m'_9_fromVerifier)
    ) | (
        {442}out(ch(tkn_access_5), access_token_fromVerifier)
    )
) | (
    {443}!
    {19}let rule_I_2: bitstring = (attr_2,DID_I) in
    {447}let (attr_6: bitstring,DID_I_3: DID) = rule_I_2 in
    {448}in(h, m_62: bitstring);
    {449}let gx_12: G = unbitG(m_62) in
    {450}new y_4: exponent;
    {451}let gy_12: G = g(y_4) in
    {444}let sk_V_3: SecretKey = sk_V in
    {453}let m'_26: bitstring = sig((gy_12,gx_12),sk_V_3) in
    {452}let K_12: SymmetricKey = GtoSymK(exp(gx_12,y_4)) in
    {454}let m_63: bitstring = (bitG(gy_12),enc(m'_26,K_12)) in
    {455}out(h, m_63);
    {456}in(h, m_64: bitstring);
    {457}let (s_K_12: bitstring,uri'_2: bitstring) = dec(m_64,K_12) in
    {458}if (uri'_2 = uri) then
    {459}new n_c_6: bitstring;
    {460}let m'_27: bitstring = (n_c_6,rule_I_2) in
    {461}let m_65: bitstring = enc(m'_27,K_12) in
    {462}out(h, m_65);
    {463}in(h, m_66: bitstring);
    {464}let ((attr'_6: bitstring,DID'_I_8: DID),poks_6: bitstring) = dec(m_66,K_12) in
    {465}let ph_6: bitstring = ((gx_12,gy_12),n_c_6,DID_V) in
    {445}let pk_I_6: PublicKey = pk(sk_I) in
    {466}if proofVerify((attr'_6,DID'_I_8),poks_6,ph_6,pk_I_6) then
    {467}if ((attr'_6,DID'_I_8) = (attr_6,DID_I_3)) then
    {468}new tkn_access_6: bitstring;
    {469}let m'_28: bitstring = (tkn_access_6,sig(tkn_access_6,sk_V_3)) in
    {470}let m_67: bitstring = enc(m'_28,K_12) in
    {471}event auth_VerifierSendsLastMessageToProver(m_62,m_63,m_64,m_65,m_66,m_67);
    {472}out(h, m_67);
    {473}out(h, Verifier_Completes);
    {446}let talksOnlyToHonest_8: bool = false in
    {474}if talksOnlyToHonest_8 then
    (
        {475}event auth_VerifierCompletesProtocol(m_62,m_63,m_64,m_65,m_66)
    ) | (
        {476}out(ch(m'_26), m'_5_fromVerifier)
    ) | (
        {477}out(ch(rule_I_2), rule_fromVerifier)
    ) | (
        {478}out(ch(m'_27), m'_7_fromVerifier)
    ) | (
        {479}out(ch(m'_28), m'_9_fromVerifier)
    ) | (
        {480}out(ch(tkn_access_6), access_token_fromVerifier)
    )
) | (
    {481}!
    {20}let rule_E_2: bitstring = (attr_2,DID_E) in
    {485}let (attr_7: bitstring,DID_I_4: DID) = rule_E_2 in
    {486}in(h, m_68: bitstring);
    {487}let gx_13: G = unbitG(m_68) in
    {488}new y_5: exponent;
    {489}let gy_13: G = g(y_5) in
    {482}let sk_V_4: SecretKey = sk_V in
    {491}let m'_29: bitstring = sig((gy_13,gx_13),sk_V_4) in
    {490}let K_13: SymmetricKey = GtoSymK(exp(gx_13,y_5)) in
    {492}let m_69: bitstring = (bitG(gy_13),enc(m'_29,K_13)) in
    {493}out(h, m_69);
    {494}in(h, m_70: bitstring);
    {495}let (s_K_13: bitstring,uri'_3: bitstring) = dec(m_70,K_13) in
    {496}if (uri'_3 = uri) then
    {497}new n_c_7: bitstring;
    {498}let m'_30: bitstring = (n_c_7,rule_E_2) in
    {499}let m_71: bitstring = enc(m'_30,K_13) in
    {500}out(h, m_71);
    {501}in(h, m_72: bitstring);
    {502}let ((attr'_7: bitstring,DID'_I_9: DID),poks_7: bitstring) = dec(m_72,K_13) in
    {503}let ph_7: bitstring = ((gx_13,gy_13),n_c_7,DID_V) in
    {483}let pk_I_7: PublicKey = pk(sk_E) in
    {504}if proofVerify((attr'_7,DID'_I_9),poks_7,ph_7,pk_I_7) then
    {505}if ((attr'_7,DID'_I_9) = (attr_7,DID_I_4)) then
    {506}new tkn_access_7: bitstring;
    {507}let m'_31: bitstring = (tkn_access_7,sig(tkn_access_7,sk_V_4)) in
    {508}let m_73: bitstring = enc(m'_31,K_13) in
    {509}event auth_VerifierSendsLastMessageToProver(m_68,m_69,m_70,m_71,m_72,m_73);
    {510}out(h, m_73);
    {511}out(h, Verifier_Completes);
    {484}let talksOnlyToHonest_9: bool = false in
    {512}if talksOnlyToHonest_9 then
    (
        {513}event auth_VerifierCompletesProtocol(m_68,m_69,m_70,m_71,m_72)
    ) | (
        {514}out(ch(m'_29), m'_5_fromVerifier)
    ) | (
        {515}out(ch(rule_E_2), rule_fromVerifier)
    ) | (
        {516}out(ch(m'_30), m'_7_fromVerifier)
    ) | (
        {517}out(ch(m'_31), m'_9_fromVerifier)
    ) | (
        {518}out(ch(tkn_access_7), access_token_fromVerifier)
    )
)

-- Query not attacker(m'_0_fromHolder[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 249 rules.
400 rules inserted. Base: 383 rules (78 with conclusion selected). Queue: 324 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 318 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 627 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 678 rules.
1400 rules inserted. Base: 1198 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 703 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1520 rules (146 with conclusion selected). Queue: 631 rules.
2200 rules inserted. Base: 1634 rules (154 with conclusion selected). Queue: 726 rules.
2400 rules inserted. Base: 1710 rules (156 with conclusion selected). Queue: 720 rules.
2600 rules inserted. Base: 1758 rules (164 with conclusion selected). Queue: 783 rules.
2800 rules inserted. Base: 1809 rules (166 with conclusion selected). Queue: 651 rules.
3000 rules inserted. Base: 1904 rules (166 with conclusion selected). Queue: 510 rules.
3200 rules inserted. Base: 2063 rules (169 with conclusion selected). Queue: 491 rules.
3400 rules inserted. Base: 2227 rules (170 with conclusion selected). Queue: 421 rules.
3600 rules inserted. Base: 2193 rules (174 with conclusion selected). Queue: 294 rules.
3800 rules inserted. Base: 2302 rules (176 with conclusion selected). Queue: 271 rules.
4000 rules inserted. Base: 2410 rules (179 with conclusion selected). Queue: 324 rules.
4200 rules inserted. Base: 2394 rules (179 with conclusion selected). Queue: 279 rules.
4400 rules inserted. Base: 2413 rules (205 with conclusion selected). Queue: 332 rules.
4600 rules inserted. Base: 2512 rules (224 with conclusion selected). Queue: 438 rules.
4800 rules inserted. Base: 2369 rules (225 with conclusion selected). Queue: 324 rules.
5000 rules inserted. Base: 2483 rules (227 with conclusion selected). Queue: 365 rules.
5200 rules inserted. Base: 2552 rules (234 with conclusion selected). Queue: 318 rules.
5400 rules inserted. Base: 2608 rules (234 with conclusion selected). Queue: 293 rules.
5600 rules inserted. Base: 2698 rules (238 with conclusion selected). Queue: 303 rules.
5800 rules inserted. Base: 2748 rules (242 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2846 rules (242 with conclusion selected). Queue: 267 rules.
6200 rules inserted. Base: 2859 rules (250 with conclusion selected). Queue: 189 rules.
6400 rules inserted. Base: 2879 rules (256 with conclusion selected). Queue: 122 rules.
select attacker(bitG(g(y_6)))/-5000
6600 rules inserted. Base: 2636 rules (269 with conclusion selected). Queue: 119 rules.
6800 rules inserted. Base: 2735 rules (293 with conclusion selected). Queue: 188 rules.
7000 rules inserted. Base: 2839 rules (315 with conclusion selected). Queue: 260 rules.
7200 rules inserted. Base: 2938 rules (317 with conclusion selected). Queue: 328 rules.
7400 rules inserted. Base: 3000 rules (320 with conclusion selected). Queue: 308 rules.
7600 rules inserted. Base: 2990 rules (324 with conclusion selected). Queue: 303 rules.
7800 rules inserted. Base: 3009 rules (326 with conclusion selected). Queue: 259 rules.
8000 rules inserted. Base: 3050 rules (328 with conclusion selected). Queue: 192 rules.
8200 rules inserted. Base: 3095 rules (337 with conclusion selected). Queue: 156 rules.
8400 rules inserted. Base: 3111 rules (345 with conclusion selected). Queue: 104 rules.
8600 rules inserted. Base: 3065 rules (354 with conclusion selected). Queue: 83 rules.
8800 rules inserted. Base: 3078 rules (362 with conclusion selected). Queue: 69 rules.
9000 rules inserted. Base: 3124 rules (395 with conclusion selected). Queue: 83 rules.
9200 rules inserted. Base: 3234 rules (413 with conclusion selected). Queue: 24 rules.
9400 rules inserted. Base: 3309 rules (427 with conclusion selected). Queue: 20 rules.
Starting query not attacker(m'_0_fromHolder[])
goal reachable: attacker(m'_0_fromHolder[])

Derivation:
Abbreviations:
x_8 = x[!1 = @sid]
y_6 = y[m_0 = bitG(g(x_8)),!1 = @sid_1]
n_i_4 = n_i[m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),!1 = @sid]

1. The message bitG(g(x_8)) may be sent to the attacker at output {88}.
attacker(bitG(g(x_8))).

2. By 1, the attacker may know bitG(g(x_8)).
Using the function ch the attacker may obtain ch(bitG(g(x_8))).
attacker(ch(bitG(g(x_8)))).

3. The message bitG(g(x_8)) that the attacker may have by 1 may be received at input {26}.
So the message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))) may be sent to the attacker at output {33}.
attacker((bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8))))).

4. By 3, the attacker may know (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))).
Using the function 2-proj-2-tuple the attacker may obtain enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8))).
attacker(enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))).

5. The message bitG(g(x_8)) that the attacker may have by 1 may be received at input {26}.
So the message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) may be sent to the attacker at output {33}.
attacker((bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6))))).

6. By 5, the attacker may know (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_6)).
attacker(bitG(g(y_6))).

7. By 6, the attacker may know bitG(g(y_6)).
By 4, the attacker may know enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))).
attacker((bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8))))).

8. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))) that the attacker may have by 7 may be received at input {89}.
So the message enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8))) may be sent to the attacker at output {99}.
attacker(enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8)))).

9. The message bitG(g(x_8)) that the attacker may have by 1 may be received at input {26}.
The message enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8))) that the attacker may have by 8 may be received at input {34}.
So the message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8))) may be sent to the attacker at output {43}.
attacker(enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8)))).

10. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))) that the attacker may have by 7 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8))) that the attacker may have by 9 may be received at input {100}.
So the message m'_0_fromHolder[] may be sent on channel ch(bitG(g(x_8))) at output {148}.
mess(ch(bitG(g(x_8))),m'_0_fromHolder[]).

11. By 2, the attacker may have the channel ch(bitG(g(x_8))).
By 10, the message m'_0_fromHolder[] may be sent on this channel.
So the attacker may obtain the message m'_0_fromHolder[] by listening on this channel.
attacker(m'_0_fromHolder[]).

12. By 11, attacker(m'_0_fromHolder[]).
The goal is reached, represented in the following fact:
attacker(m'_0_fromHolder[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new attr_2: bitstring creating attr_8 at {1}

out(h, ~M) with ~M = attr_8 at {2}

new sk_I: SecretKey creating sk_I_3 at {3}

new sk_V: SecretKey creating sk_V_5 at {4}

new sk_P: SecretKey creating sk_P_5 at {5}

out(h, ~M_1) with ~M_1 = pk(sk_I_3) at {6}

out(h, ~M_2) with ~M_2 = pk(sk_V_5) at {7}

out(h, ~M_3) with ~M_3 = pk(sk_P_5) at {8}

out(h, ~M_4) with ~M_4 = genDID(pk(sk_I_3),sk_I_3) at {13}

out(h, ~M_5) with ~M_5 = genDID(pk(sk_V_5),sk_V_5) at {14}

out(h, ~M_6) with ~M_6 = genDID(pk(sk_P_5),sk_P_5) at {15}

out(h, ~M_7) with ~M_7 = genDID(pk(sk_E),sk_E) at {16}

new x: exponent creating x_8 at {84} in copy a

out(h, ~M_8) with ~M_8 = bitG(g(x_8)) at {88} in copy a

in(h, ~M_8) with ~M_8 = bitG(g(x_8)) at {26} in copy a_1

new y: exponent creating y_6 at {28} in copy a_1

out(h, (~M_9,~M_10)) with ~M_9 = bitG(g(y_6)), ~M_10 = enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6))) at {33} in copy a_1

in(h, (~M_9,~M_10)) with ~M_9 = bitG(g(y_6)), ~M_10 = enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(y_6),x_8))) at {89} in copy a

new n_i: bitstring creating n_i_4 at {95} in copy a

event auth_HolderSendsLastMessageToIssuer(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(y_6),x_8)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8)))) at {98} in copy a

out(h, ~M_11) with ~M_11 = enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))) at {99} in copy a

in(h, ~M_11) with ~M_11 = enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))) at {34} in copy a_1

event auth_IssuerSendsLastMessageToHolder(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6)))) at {42} in copy a_1

out(h, ~M_12) with ~M_12 = enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6))) at {43} in copy a_1

out(h, ~M_13) with ~M_13 = Issuer_Completes at {44} in copy a_1

event auth_IssuerCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8)))) at {46} in copy a_1

in(h, ~M_12) with ~M_12 = enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(y_6),x_8))) at {100} in copy a

out(h, ~M_14) with ~M_14 = Holder_Completes at {106} in copy a

out(ch(bitG(g(x_8))), ~M_15) with ~M_15 = m'_0_fromHolder at {148} in copy a

event auth_HolderCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(y_6),x_8)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(y_6),x_8)))) at {147} in copy a

The attacker has the message ~M_15 = m'_0_fromHolder.
A trace has been found.
RESULT not attacker(m'_0_fromHolder[]) is false.
-- Query not attacker(m'_1_fromIssuer[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 249 rules.
400 rules inserted. Base: 383 rules (78 with conclusion selected). Queue: 324 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 318 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 627 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 678 rules.
1400 rules inserted. Base: 1198 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 703 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1520 rules (146 with conclusion selected). Queue: 631 rules.
2200 rules inserted. Base: 1634 rules (154 with conclusion selected). Queue: 726 rules.
2400 rules inserted. Base: 1710 rules (156 with conclusion selected). Queue: 720 rules.
2600 rules inserted. Base: 1758 rules (164 with conclusion selected). Queue: 783 rules.
2800 rules inserted. Base: 1809 rules (166 with conclusion selected). Queue: 651 rules.
3000 rules inserted. Base: 1904 rules (166 with conclusion selected). Queue: 510 rules.
3200 rules inserted. Base: 2063 rules (169 with conclusion selected). Queue: 491 rules.
3400 rules inserted. Base: 2227 rules (170 with conclusion selected). Queue: 421 rules.
3600 rules inserted. Base: 2193 rules (174 with conclusion selected). Queue: 294 rules.
3800 rules inserted. Base: 2302 rules (176 with conclusion selected). Queue: 271 rules.
4000 rules inserted. Base: 2410 rules (179 with conclusion selected). Queue: 324 rules.
4200 rules inserted. Base: 2394 rules (179 with conclusion selected). Queue: 279 rules.
4400 rules inserted. Base: 2413 rules (205 with conclusion selected). Queue: 332 rules.
4600 rules inserted. Base: 2512 rules (224 with conclusion selected). Queue: 438 rules.
4800 rules inserted. Base: 2369 rules (225 with conclusion selected). Queue: 324 rules.
5000 rules inserted. Base: 2483 rules (227 with conclusion selected). Queue: 365 rules.
5200 rules inserted. Base: 2552 rules (234 with conclusion selected). Queue: 318 rules.
5400 rules inserted. Base: 2608 rules (234 with conclusion selected). Queue: 293 rules.
5600 rules inserted. Base: 2698 rules (238 with conclusion selected). Queue: 303 rules.
5800 rules inserted. Base: 2748 rules (242 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2846 rules (242 with conclusion selected). Queue: 267 rules.
6200 rules inserted. Base: 2859 rules (250 with conclusion selected). Queue: 189 rules.
6400 rules inserted. Base: 2879 rules (256 with conclusion selected). Queue: 122 rules.
select attacker(bitG(g(y_6)))/-5000
6600 rules inserted. Base: 2636 rules (269 with conclusion selected). Queue: 119 rules.
6800 rules inserted. Base: 2735 rules (293 with conclusion selected). Queue: 188 rules.
7000 rules inserted. Base: 2839 rules (315 with conclusion selected). Queue: 260 rules.
7200 rules inserted. Base: 2938 rules (317 with conclusion selected). Queue: 328 rules.
7400 rules inserted. Base: 3000 rules (320 with conclusion selected). Queue: 308 rules.
7600 rules inserted. Base: 2990 rules (324 with conclusion selected). Queue: 303 rules.
7800 rules inserted. Base: 3009 rules (326 with conclusion selected). Queue: 259 rules.
8000 rules inserted. Base: 3050 rules (328 with conclusion selected). Queue: 192 rules.
8200 rules inserted. Base: 3095 rules (337 with conclusion selected). Queue: 156 rules.
8400 rules inserted. Base: 3111 rules (345 with conclusion selected). Queue: 104 rules.
8600 rules inserted. Base: 3065 rules (354 with conclusion selected). Queue: 83 rules.
8800 rules inserted. Base: 3078 rules (362 with conclusion selected). Queue: 69 rules.
9000 rules inserted. Base: 3124 rules (395 with conclusion selected). Queue: 83 rules.
9200 rules inserted. Base: 3234 rules (413 with conclusion selected). Queue: 24 rules.
9400 rules inserted. Base: 3309 rules (427 with conclusion selected). Queue: 20 rules.
Starting query not attacker(m'_1_fromIssuer[])
RESULT not attacker(m'_1_fromIssuer[]) is true.
-- Query not attacker(m'_2_fromHolder[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 249 rules.
400 rules inserted. Base: 383 rules (78 with conclusion selected). Queue: 324 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 318 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 627 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 678 rules.
1400 rules inserted. Base: 1198 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 703 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1520 rules (146 with conclusion selected). Queue: 631 rules.
2200 rules inserted. Base: 1634 rules (154 with conclusion selected). Queue: 726 rules.
2400 rules inserted. Base: 1710 rules (156 with conclusion selected). Queue: 720 rules.
2600 rules inserted. Base: 1758 rules (164 with conclusion selected). Queue: 783 rules.
2800 rules inserted. Base: 1809 rules (166 with conclusion selected). Queue: 651 rules.
3000 rules inserted. Base: 1904 rules (166 with conclusion selected). Queue: 510 rules.
3200 rules inserted. Base: 2063 rules (169 with conclusion selected). Queue: 491 rules.
3400 rules inserted. Base: 2227 rules (170 with conclusion selected). Queue: 421 rules.
3600 rules inserted. Base: 2193 rules (174 with conclusion selected). Queue: 294 rules.
3800 rules inserted. Base: 2302 rules (176 with conclusion selected). Queue: 271 rules.
4000 rules inserted. Base: 2410 rules (179 with conclusion selected). Queue: 324 rules.
4200 rules inserted. Base: 2394 rules (179 with conclusion selected). Queue: 279 rules.
4400 rules inserted. Base: 2413 rules (205 with conclusion selected). Queue: 332 rules.
4600 rules inserted. Base: 2512 rules (224 with conclusion selected). Queue: 438 rules.
4800 rules inserted. Base: 2369 rules (225 with conclusion selected). Queue: 324 rules.
5000 rules inserted. Base: 2483 rules (227 with conclusion selected). Queue: 365 rules.
5200 rules inserted. Base: 2552 rules (234 with conclusion selected). Queue: 318 rules.
5400 rules inserted. Base: 2608 rules (234 with conclusion selected). Queue: 293 rules.
5600 rules inserted. Base: 2698 rules (238 with conclusion selected). Queue: 303 rules.
5800 rules inserted. Base: 2748 rules (242 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2846 rules (242 with conclusion selected). Queue: 267 rules.
6200 rules inserted. Base: 2859 rules (250 with conclusion selected). Queue: 189 rules.
6400 rules inserted. Base: 2879 rules (256 with conclusion selected). Queue: 122 rules.
select attacker(bitG(g(y_6)))/-5000
6600 rules inserted. Base: 2636 rules (269 with conclusion selected). Queue: 119 rules.
6800 rules inserted. Base: 2735 rules (293 with conclusion selected). Queue: 188 rules.
7000 rules inserted. Base: 2839 rules (315 with conclusion selected). Queue: 260 rules.
7200 rules inserted. Base: 2938 rules (317 with conclusion selected). Queue: 328 rules.
7400 rules inserted. Base: 3000 rules (320 with conclusion selected). Queue: 308 rules.
7600 rules inserted. Base: 2990 rules (324 with conclusion selected). Queue: 303 rules.
7800 rules inserted. Base: 3009 rules (326 with conclusion selected). Queue: 259 rules.
8000 rules inserted. Base: 3050 rules (328 with conclusion selected). Queue: 192 rules.
8200 rules inserted. Base: 3095 rules (337 with conclusion selected). Queue: 156 rules.
8400 rules inserted. Base: 3111 rules (345 with conclusion selected). Queue: 104 rules.
8600 rules inserted. Base: 3065 rules (354 with conclusion selected). Queue: 83 rules.
8800 rules inserted. Base: 3078 rules (362 with conclusion selected). Queue: 69 rules.
9000 rules inserted. Base: 3124 rules (395 with conclusion selected). Queue: 83 rules.
9200 rules inserted. Base: 3234 rules (413 with conclusion selected). Queue: 24 rules.
9400 rules inserted. Base: 3309 rules (427 with conclusion selected). Queue: 20 rules.
Starting query not attacker(m'_2_fromHolder[])
RESULT not attacker(m'_2_fromHolder[]) is true.
-- Query not attacker(m'_3_fromIssuer[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 249 rules.
400 rules inserted. Base: 383 rules (78 with conclusion selected). Queue: 324 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 318 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 627 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 678 rules.
1400 rules inserted. Base: 1198 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 703 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1520 rules (146 with conclusion selected). Queue: 631 rules.
2200 rules inserted. Base: 1634 rules (154 with conclusion selected). Queue: 726 rules.
2400 rules inserted. Base: 1710 rules (156 with conclusion selected). Queue: 720 rules.
2600 rules inserted. Base: 1758 rules (164 with conclusion selected). Queue: 783 rules.
2800 rules inserted. Base: 1809 rules (166 with conclusion selected). Queue: 651 rules.
3000 rules inserted. Base: 1904 rules (166 with conclusion selected). Queue: 510 rules.
3200 rules inserted. Base: 2063 rules (169 with conclusion selected). Queue: 491 rules.
3400 rules inserted. Base: 2227 rules (170 with conclusion selected). Queue: 421 rules.
3600 rules inserted. Base: 2193 rules (174 with conclusion selected). Queue: 294 rules.
3800 rules inserted. Base: 2302 rules (176 with conclusion selected). Queue: 271 rules.
4000 rules inserted. Base: 2410 rules (179 with conclusion selected). Queue: 324 rules.
4200 rules inserted. Base: 2394 rules (179 with conclusion selected). Queue: 279 rules.
4400 rules inserted. Base: 2413 rules (205 with conclusion selected). Queue: 332 rules.
4600 rules inserted. Base: 2512 rules (224 with conclusion selected). Queue: 438 rules.
4800 rules inserted. Base: 2369 rules (225 with conclusion selected). Queue: 324 rules.
5000 rules inserted. Base: 2483 rules (227 with conclusion selected). Queue: 365 rules.
5200 rules inserted. Base: 2552 rules (234 with conclusion selected). Queue: 318 rules.
5400 rules inserted. Base: 2608 rules (234 with conclusion selected). Queue: 293 rules.
5600 rules inserted. Base: 2698 rules (238 with conclusion selected). Queue: 303 rules.
5800 rules inserted. Base: 2748 rules (242 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2846 rules (242 with conclusion selected). Queue: 267 rules.
6200 rules inserted. Base: 2859 rules (250 with conclusion selected). Queue: 189 rules.
6400 rules inserted. Base: 2879 rules (256 with conclusion selected). Queue: 122 rules.
select attacker(bitG(g(y_6)))/-5000
6600 rules inserted. Base: 2636 rules (269 with conclusion selected). Queue: 119 rules.
6800 rules inserted. Base: 2735 rules (293 with conclusion selected). Queue: 188 rules.
7000 rules inserted. Base: 2839 rules (315 with conclusion selected). Queue: 260 rules.
7200 rules inserted. Base: 2938 rules (317 with conclusion selected). Queue: 328 rules.
7400 rules inserted. Base: 3000 rules (320 with conclusion selected). Queue: 308 rules.
7600 rules inserted. Base: 2990 rules (324 with conclusion selected). Queue: 303 rules.
7800 rules inserted. Base: 3009 rules (326 with conclusion selected). Queue: 259 rules.
8000 rules inserted. Base: 3050 rules (328 with conclusion selected). Queue: 192 rules.
8200 rules inserted. Base: 3095 rules (337 with conclusion selected). Queue: 156 rules.
8400 rules inserted. Base: 3111 rules (345 with conclusion selected). Queue: 104 rules.
8600 rules inserted. Base: 3065 rules (354 with conclusion selected). Queue: 83 rules.
8800 rules inserted. Base: 3078 rules (362 with conclusion selected). Queue: 69 rules.
9000 rules inserted. Base: 3124 rules (395 with conclusion selected). Queue: 83 rules.
9200 rules inserted. Base: 3234 rules (413 with conclusion selected). Queue: 24 rules.
9400 rules inserted. Base: 3309 rules (427 with conclusion selected). Queue: 20 rules.
Starting query not attacker(m'_3_fromIssuer[])
RESULT not attacker(m'_3_fromIssuer[]) is true.
-- Query not attacker(m'_4_fromProver[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 249 rules.
400 rules inserted. Base: 383 rules (78 with conclusion selected). Queue: 324 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 318 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 627 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 678 rules.
1400 rules inserted. Base: 1198 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 703 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1520 rules (146 with conclusion selected). Queue: 631 rules.
2200 rules inserted. Base: 1634 rules (154 with conclusion selected). Queue: 726 rules.
2400 rules inserted. Base: 1710 rules (156 with conclusion selected). Queue: 720 rules.
2600 rules inserted. Base: 1758 rules (164 with conclusion selected). Queue: 783 rules.
2800 rules inserted. Base: 1809 rules (166 with conclusion selected). Queue: 651 rules.
3000 rules inserted. Base: 1904 rules (166 with conclusion selected). Queue: 510 rules.
3200 rules inserted. Base: 2063 rules (169 with conclusion selected). Queue: 491 rules.
3400 rules inserted. Base: 2227 rules (170 with conclusion selected). Queue: 421 rules.
3600 rules inserted. Base: 2193 rules (174 with conclusion selected). Queue: 294 rules.
3800 rules inserted. Base: 2302 rules (176 with conclusion selected). Queue: 271 rules.
4000 rules inserted. Base: 2410 rules (179 with conclusion selected). Queue: 324 rules.
4200 rules inserted. Base: 2394 rules (179 with conclusion selected). Queue: 279 rules.
4400 rules inserted. Base: 2413 rules (205 with conclusion selected). Queue: 332 rules.
4600 rules inserted. Base: 2512 rules (224 with conclusion selected). Queue: 438 rules.
4800 rules inserted. Base: 2369 rules (225 with conclusion selected). Queue: 324 rules.
5000 rules inserted. Base: 2483 rules (227 with conclusion selected). Queue: 365 rules.
5200 rules inserted. Base: 2552 rules (234 with conclusion selected). Queue: 318 rules.
5400 rules inserted. Base: 2608 rules (234 with conclusion selected). Queue: 293 rules.
5600 rules inserted. Base: 2698 rules (238 with conclusion selected). Queue: 303 rules.
5800 rules inserted. Base: 2748 rules (242 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2846 rules (242 with conclusion selected). Queue: 267 rules.
6200 rules inserted. Base: 2859 rules (250 with conclusion selected). Queue: 189 rules.
6400 rules inserted. Base: 2879 rules (256 with conclusion selected). Queue: 122 rules.
select attacker(bitG(g(y_6)))/-5000
6600 rules inserted. Base: 2636 rules (269 with conclusion selected). Queue: 119 rules.
6800 rules inserted. Base: 2735 rules (293 with conclusion selected). Queue: 188 rules.
7000 rules inserted. Base: 2839 rules (315 with conclusion selected). Queue: 260 rules.
7200 rules inserted. Base: 2938 rules (317 with conclusion selected). Queue: 328 rules.
7400 rules inserted. Base: 3000 rules (320 with conclusion selected). Queue: 308 rules.
7600 rules inserted. Base: 2990 rules (324 with conclusion selected). Queue: 303 rules.
7800 rules inserted. Base: 3009 rules (326 with conclusion selected). Queue: 259 rules.
8000 rules inserted. Base: 3050 rules (328 with conclusion selected). Queue: 192 rules.
8200 rules inserted. Base: 3095 rules (337 with conclusion selected). Queue: 156 rules.
8400 rules inserted. Base: 3111 rules (345 with conclusion selected). Queue: 104 rules.
8600 rules inserted. Base: 3065 rules (354 with conclusion selected). Queue: 83 rules.
8800 rules inserted. Base: 3078 rules (362 with conclusion selected). Queue: 69 rules.
9000 rules inserted. Base: 3124 rules (395 with conclusion selected). Queue: 83 rules.
9200 rules inserted. Base: 3234 rules (413 with conclusion selected). Queue: 24 rules.
9400 rules inserted. Base: 3309 rules (427 with conclusion selected). Queue: 20 rules.
Starting query not attacker(m'_4_fromProver[])
goal reachable: attacker(m'_4_fromProver[])

Derivation:
Abbreviations:
x_8 = x[!1 = @sid]
y_6 = y[m_0 = bitG(g(x_8)),!1 = @sid_1]
n_i_4 = n_i[m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))),!1 = @sid]
x_9 = x_1[!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))),m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))),!1 = @sid]
y_7 = y_2[m_50 = bitG(g(x_9)),!1 = @sid_3]
n_c_8 = n_c_4[m_52 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))),m_50 = bitG(g(x_9)),!1 = @sid_3]
randomness_4 = randomness[m_14 = enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(x_9),y_7))),m_11 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))),!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))),m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))),!1 = @sid]
tkn_access_8 = tkn_access_4[m_54 = enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(x_9),y_7))),m_52 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))),m_50 = bitG(g(x_9)),!1 = @sid_3]

1. The message bitG(g(x_8)) may be sent to the attacker at output {88}.
attacker(bitG(g(x_8))).

2. The message bitG(g(x_8)) that the attacker may have by 1 may be received at input {26}.
So the message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) may be sent to the attacker at output {33}.
attacker((bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6))))).

3. By 2, the attacker may know (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))).
Using the function 2-proj-2-tuple the attacker may obtain enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6))).
attacker(enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))).

4. By 2, the attacker may know (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_6)).
attacker(bitG(g(y_6))).

5. By 4, the attacker may know bitG(g(y_6)).
By 3, the attacker may know enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))).
attacker((bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6))))).

6. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) that the attacker may have by 5 may be received at input {89}.
So the message enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(x_8),y_6))) may be sent to the attacker at output {99}.
attacker(enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(x_8),y_6)))).

7. The message bitG(g(x_8)) that the attacker may have by 1 may be received at input {26}.
The message enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(x_8),y_6))) that the attacker may have by 6 may be received at input {34}.
So the message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))) may be sent to the attacker at output {43}.
attacker(enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6)))).

8. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) that the attacker may have by 5 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))) that the attacker may have by 7 may be received at input {100}.
So the message bitG(g(x_9)) may be sent to the attacker at output {113}.
attacker(bitG(g(x_9))).

9. By 8, the attacker may know bitG(g(x_9)).
Using the function ch the attacker may obtain ch(bitG(g(x_9))).
attacker(ch(bitG(g(x_9)))).

10. The message bitG(g(x_9)) that the attacker may have by 8 may be received at input {372}.
So the message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))) may be sent to the attacker at output {379}.
attacker((bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7))))).

11. By 10, the attacker may know (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))).
Using the function 2-proj-2-tuple the attacker may obtain enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7))).
attacker(enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))).

12. By 10, the attacker may know (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_7)).
attacker(bitG(g(y_7))).

13. By 12, the attacker may know bitG(g(y_7)).
By 11, the attacker may know enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))).
attacker((bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7))))).

14. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) that the attacker may have by 5 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))) that the attacker may have by 7 may be received at input {100}.
The message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))) that the attacker may have by 13 may be received at input {114}.
So the message enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))) may be sent to the attacker at output {122}.
attacker(enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7)))).

15. The message bitG(g(x_9)) that the attacker may have by 8 may be received at input {372}.
The message enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 14 may be received at input {380}.
So the message enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(x_9),y_7))) may be sent to the attacker at output {386}.
attacker(enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(x_9),y_7)))).

16. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) that the attacker may have by 5 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))) that the attacker may have by 7 may be received at input {100}.
The message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))) that the attacker may have by 13 may be received at input {114}.
The message enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 15 may be received at input {123}.
So the message enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(x_9),y_7))) may be sent to the attacker at output {134}.
attacker(enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(x_9),y_7)))).

17. The message bitG(g(x_9)) that the attacker may have by 8 may be received at input {372}.
The message enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 14 may be received at input {380}.
The message enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 16 may be received at input {387}.
So the message enc((tkn_access_8,sig(tkn_access_8,sk_V[])),GtoSymK(exp(g(x_9),y_7))) may be sent to the attacker at output {396}.
attacker(enc((tkn_access_8,sig(tkn_access_8,sk_V[])),GtoSymK(exp(g(x_9),y_7)))).

18. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) that the attacker may have by 5 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))) that the attacker may have by 7 may be received at input {100}.
The message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))) that the attacker may have by 13 may be received at input {114}.
The message enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 15 may be received at input {123}.
The message enc((tkn_access_8,sig(tkn_access_8,sk_V[])),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 17 may be received at input {135}.
So the message m'_4_fromProver[] may be sent on channel ch(bitG(g(x_9))) at output {141}.
mess(ch(bitG(g(x_9))),m'_4_fromProver[]).

19. By 9, the attacker may have the channel ch(bitG(g(x_9))).
By 18, the message m'_4_fromProver[] may be sent on this channel.
So the attacker may obtain the message m'_4_fromProver[] by listening on this channel.
attacker(m'_4_fromProver[]).

20. By 19, attacker(m'_4_fromProver[]).
The goal is reached, represented in the following fact:
attacker(m'_4_fromProver[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new attr_2: bitstring creating attr_8 at {1}

out(h, ~M) with ~M = attr_8 at {2}

new sk_I: SecretKey creating sk_I_3 at {3}

new sk_V: SecretKey creating sk_V_5 at {4}

new sk_P: SecretKey creating sk_P_5 at {5}

out(h, ~M_1) with ~M_1 = pk(sk_I_3) at {6}

out(h, ~M_2) with ~M_2 = pk(sk_V_5) at {7}

out(h, ~M_3) with ~M_3 = pk(sk_P_5) at {8}

out(h, ~M_4) with ~M_4 = genDID(pk(sk_I_3),sk_I_3) at {13}

out(h, ~M_5) with ~M_5 = genDID(pk(sk_V_5),sk_V_5) at {14}

out(h, ~M_6) with ~M_6 = genDID(pk(sk_P_5),sk_P_5) at {15}

out(h, ~M_7) with ~M_7 = genDID(pk(sk_E),sk_E) at {16}

new x: exponent creating x_8 at {84} in copy a

out(h, ~M_8) with ~M_8 = bitG(g(x_8)) at {88} in copy a

in(h, ~M_8) with ~M_8 = bitG(g(x_8)) at {26} in copy a_1

new y: exponent creating y_6 at {28} in copy a_1

out(h, (~M_9,~M_10)) with ~M_9 = bitG(g(y_6)), ~M_10 = enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6))) at {33} in copy a_1

in(h, (~M_9,~M_10)) with ~M_9 = bitG(g(y_6)), ~M_10 = enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6))) at {89} in copy a

new n_i: bitstring creating n_i_4 at {95} in copy a

event auth_HolderSendsLastMessageToIssuer(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8)))) at {98} in copy a

out(h, ~M_11) with ~M_11 = enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))) at {99} in copy a

in(h, ~M_11) with ~M_11 = enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(x_8),y_6))) at {34} in copy a_1

event auth_IssuerSendsLastMessageToHolder(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(x_8),y_6))),enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6)))) at {42} in copy a_1

out(h, ~M_12) with ~M_12 = enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6))) at {43} in copy a_1

out(h, ~M_13) with ~M_13 = Issuer_Completes at {44} in copy a_1

event auth_IssuerCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(x_8),y_6)))) at {46} in copy a_1

in(h, ~M_12) with ~M_12 = enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6))) at {100} in copy a

out(h, ~M_14) with ~M_14 = Holder_Completes at {106} in copy a

event auth_HolderCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6)))) at {147} in copy a

new x_1: exponent creating x_9 at {109} in copy a, a_2

out(h, ~M_15) with ~M_15 = bitG(g(x_9)) at {113} in copy a, a_2

in(h, ~M_15) with ~M_15 = bitG(g(x_9)) at {372} in copy a_3

new y_2: exponent creating y_7 at {374} in copy a_3

out(h, (~M_16,~M_17)) with ~M_16 = bitG(g(y_7)), ~M_17 = enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7))) at {379} in copy a_3

in(h, (~M_16,~M_17)) with ~M_16 = bitG(g(y_7)), ~M_17 = enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7))) at {114} in copy a, a_2

out(h, ~M_18) with ~M_18 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))) at {122} in copy a, a_2

in(h, ~M_18) with ~M_18 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))) at {380} in copy a_3

new n_c_4: bitstring creating n_c_8 at {383} in copy a_3

out(h, ~M_19) with ~M_19 = enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))) at {386} in copy a_3

in(h, ~M_19) with ~M_19 = enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))) at {123} in copy a, a_2

new randomness: bitstring creating randomness_4 at {128} in copy a, a_2

event auth_ProverSendsLastMessageToVerifier(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9)))) at {132} in copy a, a_2

event auth_ProverSendsLastMessageToVerifierInProtocolFull(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6))),bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9)))) at {133} in copy a, a_2

out(h, ~M_20) with ~M_20 = enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9))) at {134} in copy a, a_2

in(h, ~M_20) with ~M_20 = enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(x_9),y_7))) at {387} in copy a_3

new tkn_access_4: bitstring creating tkn_access_8 at {392} in copy a_3

event auth_VerifierSendsLastMessageToProver(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(x_9),y_7))),enc((tkn_access_8,sig(tkn_access_8,sk_V_5)),GtoSymK(exp(g(x_9),y_7)))) at {395} in copy a_3

out(h, ~M_21) with ~M_21 = enc((tkn_access_8,sig(tkn_access_8,sk_V_5)),GtoSymK(exp(g(x_9),y_7))) at {396} in copy a_3

out(h, ~M_22) with ~M_22 = Verifier_Completes at {397} in copy a_3

event auth_VerifierCompletesProtocol(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(x_9),y_7)))) at {399} in copy a_3

in(h, ~M_21) with ~M_21 = enc((tkn_access_8,sig(tkn_access_8,sk_V_5)),GtoSymK(exp(g(x_9),y_7))) at {135} in copy a, a_2

out(h, ~M_23) with ~M_23 = Prover_Completes at {138} in copy a, a_2

out(ch(bitG(g(x_9))), ~M_24) with ~M_24 = m'_4_fromProver at {141} in copy a, a_2

event auth_ProverCompletesProtocol(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9))),enc((tkn_access_8,sig(tkn_access_8,sk_V_5)),GtoSymK(exp(g(x_9),y_7)))) at {140} in copy a, a_2

The attacker has the message ~M_24 = m'_4_fromProver.
A trace has been found.
RESULT not attacker(m'_4_fromProver[]) is false.
-- Query not attacker(m'_5_fromVerifier[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 249 rules.
400 rules inserted. Base: 383 rules (78 with conclusion selected). Queue: 324 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 318 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 627 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 678 rules.
1400 rules inserted. Base: 1198 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 703 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1520 rules (146 with conclusion selected). Queue: 631 rules.
2200 rules inserted. Base: 1634 rules (154 with conclusion selected). Queue: 726 rules.
2400 rules inserted. Base: 1710 rules (156 with conclusion selected). Queue: 720 rules.
2600 rules inserted. Base: 1758 rules (164 with conclusion selected). Queue: 783 rules.
2800 rules inserted. Base: 1809 rules (166 with conclusion selected). Queue: 651 rules.
3000 rules inserted. Base: 1904 rules (166 with conclusion selected). Queue: 510 rules.
3200 rules inserted. Base: 2063 rules (169 with conclusion selected). Queue: 491 rules.
3400 rules inserted. Base: 2227 rules (170 with conclusion selected). Queue: 421 rules.
3600 rules inserted. Base: 2193 rules (174 with conclusion selected). Queue: 294 rules.
3800 rules inserted. Base: 2302 rules (176 with conclusion selected). Queue: 271 rules.
4000 rules inserted. Base: 2410 rules (179 with conclusion selected). Queue: 324 rules.
4200 rules inserted. Base: 2394 rules (179 with conclusion selected). Queue: 279 rules.
4400 rules inserted. Base: 2413 rules (205 with conclusion selected). Queue: 332 rules.
4600 rules inserted. Base: 2512 rules (224 with conclusion selected). Queue: 438 rules.
4800 rules inserted. Base: 2369 rules (225 with conclusion selected). Queue: 324 rules.
5000 rules inserted. Base: 2483 rules (227 with conclusion selected). Queue: 365 rules.
5200 rules inserted. Base: 2552 rules (234 with conclusion selected). Queue: 318 rules.
5400 rules inserted. Base: 2608 rules (234 with conclusion selected). Queue: 293 rules.
5600 rules inserted. Base: 2698 rules (238 with conclusion selected). Queue: 303 rules.
5800 rules inserted. Base: 2748 rules (242 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2846 rules (242 with conclusion selected). Queue: 267 rules.
6200 rules inserted. Base: 2859 rules (250 with conclusion selected). Queue: 189 rules.
6400 rules inserted. Base: 2879 rules (256 with conclusion selected). Queue: 122 rules.
select attacker(bitG(g(y_6)))/-5000
6600 rules inserted. Base: 2636 rules (269 with conclusion selected). Queue: 119 rules.
6800 rules inserted. Base: 2735 rules (293 with conclusion selected). Queue: 188 rules.
7000 rules inserted. Base: 2839 rules (315 with conclusion selected). Queue: 260 rules.
7200 rules inserted. Base: 2938 rules (317 with conclusion selected). Queue: 328 rules.
7400 rules inserted. Base: 3000 rules (320 with conclusion selected). Queue: 308 rules.
7600 rules inserted. Base: 2990 rules (324 with conclusion selected). Queue: 303 rules.
7800 rules inserted. Base: 3009 rules (326 with conclusion selected). Queue: 259 rules.
8000 rules inserted. Base: 3050 rules (328 with conclusion selected). Queue: 192 rules.
8200 rules inserted. Base: 3095 rules (337 with conclusion selected). Queue: 156 rules.
8400 rules inserted. Base: 3111 rules (345 with conclusion selected). Queue: 104 rules.
8600 rules inserted. Base: 3065 rules (354 with conclusion selected). Queue: 83 rules.
8800 rules inserted. Base: 3078 rules (362 with conclusion selected). Queue: 69 rules.
9000 rules inserted. Base: 3124 rules (395 with conclusion selected). Queue: 83 rules.
9200 rules inserted. Base: 3234 rules (413 with conclusion selected). Queue: 24 rules.
9400 rules inserted. Base: 3309 rules (427 with conclusion selected). Queue: 20 rules.
Starting query not attacker(m'_5_fromVerifier[])
RESULT not attacker(m'_5_fromVerifier[]) is true.
-- Query not attacker(m'_6_fromProver[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 249 rules.
400 rules inserted. Base: 383 rules (78 with conclusion selected). Queue: 324 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 318 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 627 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 678 rules.
1400 rules inserted. Base: 1198 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 703 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1520 rules (146 with conclusion selected). Queue: 631 rules.
2200 rules inserted. Base: 1634 rules (154 with conclusion selected). Queue: 726 rules.
2400 rules inserted. Base: 1710 rules (156 with conclusion selected). Queue: 720 rules.
2600 rules inserted. Base: 1758 rules (164 with conclusion selected). Queue: 783 rules.
2800 rules inserted. Base: 1809 rules (166 with conclusion selected). Queue: 651 rules.
3000 rules inserted. Base: 1904 rules (166 with conclusion selected). Queue: 510 rules.
3200 rules inserted. Base: 2063 rules (169 with conclusion selected). Queue: 491 rules.
3400 rules inserted. Base: 2227 rules (170 with conclusion selected). Queue: 421 rules.
3600 rules inserted. Base: 2193 rules (174 with conclusion selected). Queue: 294 rules.
3800 rules inserted. Base: 2302 rules (176 with conclusion selected). Queue: 271 rules.
4000 rules inserted. Base: 2410 rules (179 with conclusion selected). Queue: 324 rules.
4200 rules inserted. Base: 2394 rules (179 with conclusion selected). Queue: 279 rules.
4400 rules inserted. Base: 2413 rules (205 with conclusion selected). Queue: 332 rules.
4600 rules inserted. Base: 2512 rules (224 with conclusion selected). Queue: 438 rules.
4800 rules inserted. Base: 2369 rules (225 with conclusion selected). Queue: 324 rules.
5000 rules inserted. Base: 2483 rules (227 with conclusion selected). Queue: 365 rules.
5200 rules inserted. Base: 2552 rules (234 with conclusion selected). Queue: 318 rules.
5400 rules inserted. Base: 2608 rules (234 with conclusion selected). Queue: 293 rules.
5600 rules inserted. Base: 2698 rules (238 with conclusion selected). Queue: 303 rules.
5800 rules inserted. Base: 2748 rules (242 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2846 rules (242 with conclusion selected). Queue: 267 rules.
6200 rules inserted. Base: 2859 rules (250 with conclusion selected). Queue: 189 rules.
6400 rules inserted. Base: 2879 rules (256 with conclusion selected). Queue: 122 rules.
select attacker(bitG(g(y_6)))/-5000
6600 rules inserted. Base: 2636 rules (269 with conclusion selected). Queue: 119 rules.
6800 rules inserted. Base: 2735 rules (293 with conclusion selected). Queue: 188 rules.
7000 rules inserted. Base: 2839 rules (315 with conclusion selected). Queue: 260 rules.
7200 rules inserted. Base: 2938 rules (317 with conclusion selected). Queue: 328 rules.
7400 rules inserted. Base: 3000 rules (320 with conclusion selected). Queue: 308 rules.
7600 rules inserted. Base: 2990 rules (324 with conclusion selected). Queue: 303 rules.
7800 rules inserted. Base: 3009 rules (326 with conclusion selected). Queue: 259 rules.
8000 rules inserted. Base: 3050 rules (328 with conclusion selected). Queue: 192 rules.
8200 rules inserted. Base: 3095 rules (337 with conclusion selected). Queue: 156 rules.
8400 rules inserted. Base: 3111 rules (345 with conclusion selected). Queue: 104 rules.
8600 rules inserted. Base: 3065 rules (354 with conclusion selected). Queue: 83 rules.
8800 rules inserted. Base: 3078 rules (362 with conclusion selected). Queue: 69 rules.
9000 rules inserted. Base: 3124 rules (395 with conclusion selected). Queue: 83 rules.
9200 rules inserted. Base: 3234 rules (413 with conclusion selected). Queue: 24 rules.
9400 rules inserted. Base: 3309 rules (427 with conclusion selected). Queue: 20 rules.
Starting query not attacker(m'_6_fromProver[])
goal reachable: attacker(m'_6_fromProver[])

Derivation:
Abbreviations:
x_8 = x[!1 = @sid]
y_6 = y[m_0 = bitG(g(x_8)),!1 = @sid_1]
n_i_4 = n_i[m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))),!1 = @sid]
x_9 = x_1[!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))),m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))),!1 = @sid]
y_7 = y_2[m_50 = bitG(g(x_9)),!1 = @sid_3]
n_c_8 = n_c_4[m_52 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))),m_50 = bitG(g(x_9)),!1 = @sid_3]
randomness_4 = randomness[m_14 = enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(x_9),y_7))),m_11 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))),!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))),m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))),!1 = @sid]
tkn_access_8 = tkn_access_4[m_54 = enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(x_9),y_7))),m_52 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))),m_50 = bitG(g(x_9)),!1 = @sid_3]

1. Using the function uri the attacker may obtain uri.
attacker(uri).

2. The message bitG(g(x_8)) may be sent to the attacker at output {88}.
attacker(bitG(g(x_8))).

3. The message bitG(g(x_8)) that the attacker may have by 2 may be received at input {26}.
So the message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) may be sent to the attacker at output {33}.
attacker((bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6))))).

4. By 3, the attacker may know (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))).
Using the function 2-proj-2-tuple the attacker may obtain enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6))).
attacker(enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))).

5. By 3, the attacker may know (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_6)).
attacker(bitG(g(y_6))).

6. By 5, the attacker may know bitG(g(y_6)).
By 4, the attacker may know enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))).
attacker((bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6))))).

7. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) that the attacker may have by 6 may be received at input {89}.
So the message enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(x_8),y_6))) may be sent to the attacker at output {99}.
attacker(enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(x_8),y_6)))).

8. The message bitG(g(x_8)) that the attacker may have by 2 may be received at input {26}.
The message enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(x_8),y_6))) that the attacker may have by 7 may be received at input {34}.
So the message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))) may be sent to the attacker at output {43}.
attacker(enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6)))).

9. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) that the attacker may have by 6 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))) that the attacker may have by 8 may be received at input {100}.
So the message bitG(g(x_9)) may be sent to the attacker at output {113}.
attacker(bitG(g(x_9))).

10. The message bitG(g(x_9)) that the attacker may have by 9 may be received at input {372}.
So the message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))) may be sent to the attacker at output {379}.
attacker((bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7))))).

11. By 10, the attacker may know (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_7)).
attacker(bitG(g(y_7))).

12. By 11, the attacker may know bitG(g(y_7)).
Using the function unbitG the attacker may obtain g(y_7).
attacker(g(y_7)).

13. By 9, the attacker may know bitG(g(x_9)).
Using the function unbitG the attacker may obtain g(x_9).
attacker(g(x_9)).

14. By 13, the attacker may know g(x_9).
By 12, the attacker may know g(y_7).
Using the function 2-tuple the attacker may obtain (g(x_9),g(y_7)).
attacker((g(x_9),g(y_7))).

15. By 14, the attacker may know (g(x_9),g(y_7)).
By 1, the attacker may know uri.
Using the function 2-tuple the attacker may obtain ((g(x_9),g(y_7)),uri).
attacker(((g(x_9),g(y_7)),uri)).

16. By 15, the attacker may know ((g(x_9),g(y_7)),uri).
Using the function ch the attacker may obtain ch(((g(x_9),g(y_7)),uri)).
attacker(ch(((g(x_9),g(y_7)),uri))).

17. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) that the attacker may have by 6 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))) that the attacker may have by 8 may be received at input {100}.
The message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))) that the attacker may have by 10 may be received at input {114}.
So the message enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))) may be sent to the attacker at output {122}.
attacker(enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7)))).

18. The message bitG(g(x_9)) that the attacker may have by 9 may be received at input {372}.
The message enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 17 may be received at input {380}.
So the message enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(x_9),y_7))) may be sent to the attacker at output {386}.
attacker(enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(x_9),y_7)))).

19. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) that the attacker may have by 6 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))) that the attacker may have by 8 may be received at input {100}.
The message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))) that the attacker may have by 10 may be received at input {114}.
The message enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 18 may be received at input {123}.
So the message enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(x_9),y_7))) may be sent to the attacker at output {134}.
attacker(enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(x_9),y_7)))).

20. The message bitG(g(x_9)) that the attacker may have by 9 may be received at input {372}.
The message enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 17 may be received at input {380}.
The message enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 19 may be received at input {387}.
So the message enc((tkn_access_8,sig(tkn_access_8,sk_V[])),GtoSymK(exp(g(x_9),y_7))) may be sent to the attacker at output {396}.
attacker(enc((tkn_access_8,sig(tkn_access_8,sk_V[])),GtoSymK(exp(g(x_9),y_7)))).

21. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) that the attacker may have by 6 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))) that the attacker may have by 8 may be received at input {100}.
The message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))) that the attacker may have by 10 may be received at input {114}.
The message enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 18 may be received at input {123}.
The message enc((tkn_access_8,sig(tkn_access_8,sk_V[])),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 20 may be received at input {135}.
So the message m'_6_fromProver[] may be sent on channel ch(((g(x_9),g(y_7)),uri)) at output {142}.
mess(ch(((g(x_9),g(y_7)),uri)),m'_6_fromProver[]).

22. By 16, the attacker may have the channel ch(((g(x_9),g(y_7)),uri)).
By 21, the message m'_6_fromProver[] may be sent on this channel.
So the attacker may obtain the message m'_6_fromProver[] by listening on this channel.
attacker(m'_6_fromProver[]).

23. By 22, attacker(m'_6_fromProver[]).
The goal is reached, represented in the following fact:
attacker(m'_6_fromProver[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new attr_2: bitstring creating attr_8 at {1}

out(h, ~M) with ~M = attr_8 at {2}

new sk_I: SecretKey creating sk_I_3 at {3}

new sk_V: SecretKey creating sk_V_5 at {4}

new sk_P: SecretKey creating sk_P_5 at {5}

out(h, ~M_1) with ~M_1 = pk(sk_I_3) at {6}

out(h, ~M_2) with ~M_2 = pk(sk_V_5) at {7}

out(h, ~M_3) with ~M_3 = pk(sk_P_5) at {8}

out(h, ~M_4) with ~M_4 = genDID(pk(sk_I_3),sk_I_3) at {13}

out(h, ~M_5) with ~M_5 = genDID(pk(sk_V_5),sk_V_5) at {14}

out(h, ~M_6) with ~M_6 = genDID(pk(sk_P_5),sk_P_5) at {15}

out(h, ~M_7) with ~M_7 = genDID(pk(sk_E),sk_E) at {16}

new x: exponent creating x_8 at {84} in copy a

out(h, ~M_8) with ~M_8 = bitG(g(x_8)) at {88} in copy a

in(h, ~M_8) with ~M_8 = bitG(g(x_8)) at {26} in copy a_1

new y: exponent creating y_6 at {28} in copy a_1

out(h, (~M_9,~M_10)) with ~M_9 = bitG(g(y_6)), ~M_10 = enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6))) at {33} in copy a_1

in(h, (~M_9,~M_10)) with ~M_9 = bitG(g(y_6)), ~M_10 = enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6))) at {89} in copy a

new n_i: bitstring creating n_i_4 at {95} in copy a

event auth_HolderSendsLastMessageToIssuer(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8)))) at {98} in copy a

out(h, ~M_11) with ~M_11 = enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))) at {99} in copy a

in(h, ~M_11) with ~M_11 = enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(x_8),y_6))) at {34} in copy a_1

event auth_IssuerSendsLastMessageToHolder(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(x_8),y_6))),enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6)))) at {42} in copy a_1

out(h, ~M_12) with ~M_12 = enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6))) at {43} in copy a_1

out(h, ~M_13) with ~M_13 = Issuer_Completes at {44} in copy a_1

event auth_IssuerCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(x_8),y_6)))) at {46} in copy a_1

in(h, ~M_12) with ~M_12 = enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6))) at {100} in copy a

out(h, ~M_14) with ~M_14 = Holder_Completes at {106} in copy a

event auth_HolderCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6)))) at {147} in copy a

new x_1: exponent creating x_9 at {109} in copy a, a_2

out(h, ~M_15) with ~M_15 = bitG(g(x_9)) at {113} in copy a, a_2

in(h, ~M_15) with ~M_15 = bitG(g(x_9)) at {372} in copy a_3

new y_2: exponent creating y_7 at {374} in copy a_3

out(h, (~M_16,~M_17)) with ~M_16 = bitG(g(y_7)), ~M_17 = enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7))) at {379} in copy a_3

in(h, (~M_16,~M_17)) with ~M_16 = bitG(g(y_7)), ~M_17 = enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7))) at {114} in copy a, a_2

out(h, ~M_18) with ~M_18 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))) at {122} in copy a, a_2

in(h, ~M_18) with ~M_18 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))) at {380} in copy a_3

new n_c_4: bitstring creating n_c_8 at {383} in copy a_3

out(h, ~M_19) with ~M_19 = enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))) at {386} in copy a_3

in(h, ~M_19) with ~M_19 = enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))) at {123} in copy a, a_2

new randomness: bitstring creating randomness_4 at {128} in copy a, a_2

event auth_ProverSendsLastMessageToVerifier(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9)))) at {132} in copy a, a_2

event auth_ProverSendsLastMessageToVerifierInProtocolFull(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6))),bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9)))) at {133} in copy a, a_2

out(h, ~M_20) with ~M_20 = enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9))) at {134} in copy a, a_2

in(h, ~M_20) with ~M_20 = enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(x_9),y_7))) at {387} in copy a_3

new tkn_access_4: bitstring creating tkn_access_8 at {392} in copy a_3

event auth_VerifierSendsLastMessageToProver(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(x_9),y_7))),enc((tkn_access_8,sig(tkn_access_8,sk_V_5)),GtoSymK(exp(g(x_9),y_7)))) at {395} in copy a_3

out(h, ~M_21) with ~M_21 = enc((tkn_access_8,sig(tkn_access_8,sk_V_5)),GtoSymK(exp(g(x_9),y_7))) at {396} in copy a_3

out(h, ~M_22) with ~M_22 = Verifier_Completes at {397} in copy a_3

event auth_VerifierCompletesProtocol(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(x_9),y_7)))) at {399} in copy a_3

in(h, ~M_21) with ~M_21 = enc((tkn_access_8,sig(tkn_access_8,sk_V_5)),GtoSymK(exp(g(x_9),y_7))) at {135} in copy a, a_2

out(h, ~M_23) with ~M_23 = Prover_Completes at {138} in copy a, a_2

out(ch(((g(x_9),g(y_7)),uri)), ~M_24) with ~M_24 = m'_6_fromProver at {142} in copy a, a_2

event auth_ProverCompletesProtocol(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9))),enc((tkn_access_8,sig(tkn_access_8,sk_V_5)),GtoSymK(exp(g(x_9),y_7)))) at {140} in copy a, a_2

The attacker has the message ~M_24 = m'_6_fromProver.
A trace has been found.
RESULT not attacker(m'_6_fromProver[]) is false.
-- Query not attacker(m'_7_fromVerifier[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 249 rules.
400 rules inserted. Base: 383 rules (78 with conclusion selected). Queue: 324 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 318 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 627 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 678 rules.
1400 rules inserted. Base: 1198 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 703 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1520 rules (146 with conclusion selected). Queue: 631 rules.
2200 rules inserted. Base: 1634 rules (154 with conclusion selected). Queue: 726 rules.
2400 rules inserted. Base: 1710 rules (156 with conclusion selected). Queue: 720 rules.
2600 rules inserted. Base: 1758 rules (164 with conclusion selected). Queue: 783 rules.
2800 rules inserted. Base: 1809 rules (166 with conclusion selected). Queue: 651 rules.
3000 rules inserted. Base: 1904 rules (166 with conclusion selected). Queue: 510 rules.
3200 rules inserted. Base: 2063 rules (169 with conclusion selected). Queue: 491 rules.
3400 rules inserted. Base: 2227 rules (170 with conclusion selected). Queue: 421 rules.
3600 rules inserted. Base: 2193 rules (174 with conclusion selected). Queue: 294 rules.
3800 rules inserted. Base: 2302 rules (176 with conclusion selected). Queue: 271 rules.
4000 rules inserted. Base: 2410 rules (179 with conclusion selected). Queue: 324 rules.
4200 rules inserted. Base: 2394 rules (179 with conclusion selected). Queue: 279 rules.
4400 rules inserted. Base: 2413 rules (205 with conclusion selected). Queue: 332 rules.
4600 rules inserted. Base: 2512 rules (224 with conclusion selected). Queue: 438 rules.
4800 rules inserted. Base: 2369 rules (225 with conclusion selected). Queue: 324 rules.
5000 rules inserted. Base: 2483 rules (227 with conclusion selected). Queue: 365 rules.
5200 rules inserted. Base: 2552 rules (234 with conclusion selected). Queue: 318 rules.
5400 rules inserted. Base: 2608 rules (234 with conclusion selected). Queue: 293 rules.
5600 rules inserted. Base: 2698 rules (238 with conclusion selected). Queue: 303 rules.
5800 rules inserted. Base: 2748 rules (242 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2846 rules (242 with conclusion selected). Queue: 267 rules.
6200 rules inserted. Base: 2859 rules (250 with conclusion selected). Queue: 189 rules.
6400 rules inserted. Base: 2879 rules (256 with conclusion selected). Queue: 122 rules.
select attacker(bitG(g(y_6)))/-5000
6600 rules inserted. Base: 2636 rules (269 with conclusion selected). Queue: 119 rules.
6800 rules inserted. Base: 2735 rules (293 with conclusion selected). Queue: 188 rules.
7000 rules inserted. Base: 2839 rules (315 with conclusion selected). Queue: 260 rules.
7200 rules inserted. Base: 2938 rules (317 with conclusion selected). Queue: 328 rules.
7400 rules inserted. Base: 3000 rules (320 with conclusion selected). Queue: 308 rules.
7600 rules inserted. Base: 2990 rules (324 with conclusion selected). Queue: 303 rules.
7800 rules inserted. Base: 3009 rules (326 with conclusion selected). Queue: 259 rules.
8000 rules inserted. Base: 3050 rules (328 with conclusion selected). Queue: 192 rules.
8200 rules inserted. Base: 3095 rules (337 with conclusion selected). Queue: 156 rules.
8400 rules inserted. Base: 3111 rules (345 with conclusion selected). Queue: 104 rules.
8600 rules inserted. Base: 3065 rules (354 with conclusion selected). Queue: 83 rules.
8800 rules inserted. Base: 3078 rules (362 with conclusion selected). Queue: 69 rules.
9000 rules inserted. Base: 3124 rules (395 with conclusion selected). Queue: 83 rules.
9200 rules inserted. Base: 3234 rules (413 with conclusion selected). Queue: 24 rules.
9400 rules inserted. Base: 3309 rules (427 with conclusion selected). Queue: 20 rules.
Starting query not attacker(m'_7_fromVerifier[])
RESULT not attacker(m'_7_fromVerifier[]) is true.
-- Query not attacker(m'_8_fromProver[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 249 rules.
400 rules inserted. Base: 383 rules (78 with conclusion selected). Queue: 324 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 318 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 627 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 678 rules.
1400 rules inserted. Base: 1198 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 703 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1520 rules (146 with conclusion selected). Queue: 631 rules.
2200 rules inserted. Base: 1634 rules (154 with conclusion selected). Queue: 726 rules.
2400 rules inserted. Base: 1710 rules (156 with conclusion selected). Queue: 720 rules.
2600 rules inserted. Base: 1758 rules (164 with conclusion selected). Queue: 783 rules.
2800 rules inserted. Base: 1809 rules (166 with conclusion selected). Queue: 651 rules.
3000 rules inserted. Base: 1904 rules (166 with conclusion selected). Queue: 510 rules.
3200 rules inserted. Base: 2063 rules (169 with conclusion selected). Queue: 491 rules.
3400 rules inserted. Base: 2227 rules (170 with conclusion selected). Queue: 421 rules.
3600 rules inserted. Base: 2193 rules (174 with conclusion selected). Queue: 294 rules.
3800 rules inserted. Base: 2302 rules (176 with conclusion selected). Queue: 271 rules.
4000 rules inserted. Base: 2410 rules (179 with conclusion selected). Queue: 324 rules.
4200 rules inserted. Base: 2394 rules (179 with conclusion selected). Queue: 279 rules.
4400 rules inserted. Base: 2413 rules (205 with conclusion selected). Queue: 332 rules.
4600 rules inserted. Base: 2512 rules (224 with conclusion selected). Queue: 438 rules.
4800 rules inserted. Base: 2369 rules (225 with conclusion selected). Queue: 324 rules.
5000 rules inserted. Base: 2483 rules (227 with conclusion selected). Queue: 365 rules.
5200 rules inserted. Base: 2552 rules (234 with conclusion selected). Queue: 318 rules.
5400 rules inserted. Base: 2608 rules (234 with conclusion selected). Queue: 293 rules.
5600 rules inserted. Base: 2698 rules (238 with conclusion selected). Queue: 303 rules.
5800 rules inserted. Base: 2748 rules (242 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2846 rules (242 with conclusion selected). Queue: 267 rules.
6200 rules inserted. Base: 2859 rules (250 with conclusion selected). Queue: 189 rules.
6400 rules inserted. Base: 2879 rules (256 with conclusion selected). Queue: 122 rules.
select attacker(bitG(g(y_6)))/-5000
6600 rules inserted. Base: 2636 rules (269 with conclusion selected). Queue: 119 rules.
6800 rules inserted. Base: 2735 rules (293 with conclusion selected). Queue: 188 rules.
7000 rules inserted. Base: 2839 rules (315 with conclusion selected). Queue: 260 rules.
7200 rules inserted. Base: 2938 rules (317 with conclusion selected). Queue: 328 rules.
7400 rules inserted. Base: 3000 rules (320 with conclusion selected). Queue: 308 rules.
7600 rules inserted. Base: 2990 rules (324 with conclusion selected). Queue: 303 rules.
7800 rules inserted. Base: 3009 rules (326 with conclusion selected). Queue: 259 rules.
8000 rules inserted. Base: 3050 rules (328 with conclusion selected). Queue: 192 rules.
8200 rules inserted. Base: 3095 rules (337 with conclusion selected). Queue: 156 rules.
8400 rules inserted. Base: 3111 rules (345 with conclusion selected). Queue: 104 rules.
8600 rules inserted. Base: 3065 rules (354 with conclusion selected). Queue: 83 rules.
8800 rules inserted. Base: 3078 rules (362 with conclusion selected). Queue: 69 rules.
9000 rules inserted. Base: 3124 rules (395 with conclusion selected). Queue: 83 rules.
9200 rules inserted. Base: 3234 rules (413 with conclusion selected). Queue: 24 rules.
9400 rules inserted. Base: 3309 rules (427 with conclusion selected). Queue: 20 rules.
Starting query not attacker(m'_8_fromProver[])
RESULT not attacker(m'_8_fromProver[]) is true.
-- Query not attacker(m'_9_fromVerifier[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 249 rules.
400 rules inserted. Base: 383 rules (78 with conclusion selected). Queue: 324 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 318 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 627 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 678 rules.
1400 rules inserted. Base: 1198 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 703 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1520 rules (146 with conclusion selected). Queue: 631 rules.
2200 rules inserted. Base: 1634 rules (154 with conclusion selected). Queue: 726 rules.
2400 rules inserted. Base: 1710 rules (156 with conclusion selected). Queue: 720 rules.
2600 rules inserted. Base: 1758 rules (164 with conclusion selected). Queue: 783 rules.
2800 rules inserted. Base: 1809 rules (166 with conclusion selected). Queue: 651 rules.
3000 rules inserted. Base: 1904 rules (166 with conclusion selected). Queue: 510 rules.
3200 rules inserted. Base: 2063 rules (169 with conclusion selected). Queue: 491 rules.
3400 rules inserted. Base: 2227 rules (170 with conclusion selected). Queue: 421 rules.
3600 rules inserted. Base: 2193 rules (174 with conclusion selected). Queue: 294 rules.
3800 rules inserted. Base: 2302 rules (176 with conclusion selected). Queue: 271 rules.
4000 rules inserted. Base: 2410 rules (179 with conclusion selected). Queue: 324 rules.
4200 rules inserted. Base: 2394 rules (179 with conclusion selected). Queue: 279 rules.
4400 rules inserted. Base: 2413 rules (205 with conclusion selected). Queue: 332 rules.
4600 rules inserted. Base: 2512 rules (224 with conclusion selected). Queue: 438 rules.
4800 rules inserted. Base: 2369 rules (225 with conclusion selected). Queue: 324 rules.
5000 rules inserted. Base: 2483 rules (227 with conclusion selected). Queue: 365 rules.
5200 rules inserted. Base: 2552 rules (234 with conclusion selected). Queue: 318 rules.
5400 rules inserted. Base: 2608 rules (234 with conclusion selected). Queue: 293 rules.
5600 rules inserted. Base: 2698 rules (238 with conclusion selected). Queue: 303 rules.
5800 rules inserted. Base: 2748 rules (242 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2846 rules (242 with conclusion selected). Queue: 267 rules.
6200 rules inserted. Base: 2859 rules (250 with conclusion selected). Queue: 189 rules.
6400 rules inserted. Base: 2879 rules (256 with conclusion selected). Queue: 122 rules.
select attacker(bitG(g(y_6)))/-5000
6600 rules inserted. Base: 2636 rules (269 with conclusion selected). Queue: 119 rules.
6800 rules inserted. Base: 2735 rules (293 with conclusion selected). Queue: 188 rules.
7000 rules inserted. Base: 2839 rules (315 with conclusion selected). Queue: 260 rules.
7200 rules inserted. Base: 2938 rules (317 with conclusion selected). Queue: 328 rules.
7400 rules inserted. Base: 3000 rules (320 with conclusion selected). Queue: 308 rules.
7600 rules inserted. Base: 2990 rules (324 with conclusion selected). Queue: 303 rules.
7800 rules inserted. Base: 3009 rules (326 with conclusion selected). Queue: 259 rules.
8000 rules inserted. Base: 3050 rules (328 with conclusion selected). Queue: 192 rules.
8200 rules inserted. Base: 3095 rules (337 with conclusion selected). Queue: 156 rules.
8400 rules inserted. Base: 3111 rules (345 with conclusion selected). Queue: 104 rules.
8600 rules inserted. Base: 3065 rules (354 with conclusion selected). Queue: 83 rules.
8800 rules inserted. Base: 3078 rules (362 with conclusion selected). Queue: 69 rules.
9000 rules inserted. Base: 3124 rules (395 with conclusion selected). Queue: 83 rules.
9200 rules inserted. Base: 3234 rules (413 with conclusion selected). Queue: 24 rules.
9400 rules inserted. Base: 3309 rules (427 with conclusion selected). Queue: 20 rules.
Starting query not attacker(m'_9_fromVerifier[])
RESULT not attacker(m'_9_fromVerifier[]) is true.
-- Query not attacker(rule_fromVerifier[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 249 rules.
400 rules inserted. Base: 383 rules (78 with conclusion selected). Queue: 324 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 318 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 627 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 678 rules.
1400 rules inserted. Base: 1198 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 703 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1520 rules (146 with conclusion selected). Queue: 631 rules.
2200 rules inserted. Base: 1634 rules (154 with conclusion selected). Queue: 726 rules.
2400 rules inserted. Base: 1710 rules (156 with conclusion selected). Queue: 720 rules.
2600 rules inserted. Base: 1758 rules (164 with conclusion selected). Queue: 783 rules.
2800 rules inserted. Base: 1809 rules (166 with conclusion selected). Queue: 651 rules.
3000 rules inserted. Base: 1904 rules (166 with conclusion selected). Queue: 510 rules.
3200 rules inserted. Base: 2063 rules (169 with conclusion selected). Queue: 491 rules.
3400 rules inserted. Base: 2227 rules (170 with conclusion selected). Queue: 421 rules.
3600 rules inserted. Base: 2193 rules (174 with conclusion selected). Queue: 294 rules.
3800 rules inserted. Base: 2302 rules (176 with conclusion selected). Queue: 271 rules.
4000 rules inserted. Base: 2410 rules (179 with conclusion selected). Queue: 324 rules.
4200 rules inserted. Base: 2394 rules (179 with conclusion selected). Queue: 279 rules.
4400 rules inserted. Base: 2413 rules (205 with conclusion selected). Queue: 332 rules.
4600 rules inserted. Base: 2512 rules (224 with conclusion selected). Queue: 438 rules.
4800 rules inserted. Base: 2369 rules (225 with conclusion selected). Queue: 324 rules.
5000 rules inserted. Base: 2483 rules (227 with conclusion selected). Queue: 365 rules.
5200 rules inserted. Base: 2552 rules (234 with conclusion selected). Queue: 318 rules.
5400 rules inserted. Base: 2608 rules (234 with conclusion selected). Queue: 293 rules.
5600 rules inserted. Base: 2698 rules (238 with conclusion selected). Queue: 303 rules.
5800 rules inserted. Base: 2748 rules (242 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2846 rules (242 with conclusion selected). Queue: 267 rules.
6200 rules inserted. Base: 2859 rules (250 with conclusion selected). Queue: 189 rules.
6400 rules inserted. Base: 2879 rules (256 with conclusion selected). Queue: 122 rules.
select attacker(bitG(g(y_6)))/-5000
6600 rules inserted. Base: 2636 rules (269 with conclusion selected). Queue: 119 rules.
6800 rules inserted. Base: 2735 rules (293 with conclusion selected). Queue: 188 rules.
7000 rules inserted. Base: 2839 rules (315 with conclusion selected). Queue: 260 rules.
7200 rules inserted. Base: 2938 rules (317 with conclusion selected). Queue: 328 rules.
7400 rules inserted. Base: 3000 rules (320 with conclusion selected). Queue: 308 rules.
7600 rules inserted. Base: 2990 rules (324 with conclusion selected). Queue: 303 rules.
7800 rules inserted. Base: 3009 rules (326 with conclusion selected). Queue: 259 rules.
8000 rules inserted. Base: 3050 rules (328 with conclusion selected). Queue: 192 rules.
8200 rules inserted. Base: 3095 rules (337 with conclusion selected). Queue: 156 rules.
8400 rules inserted. Base: 3111 rules (345 with conclusion selected). Queue: 104 rules.
8600 rules inserted. Base: 3065 rules (354 with conclusion selected). Queue: 83 rules.
8800 rules inserted. Base: 3078 rules (362 with conclusion selected). Queue: 69 rules.
9000 rules inserted. Base: 3124 rules (395 with conclusion selected). Queue: 83 rules.
9200 rules inserted. Base: 3234 rules (413 with conclusion selected). Queue: 24 rules.
9400 rules inserted. Base: 3309 rules (427 with conclusion selected). Queue: 20 rules.
Starting query not attacker(rule_fromVerifier[])
goal reachable: attacker(rule_fromVerifier[])

Derivation:
Abbreviations:
x_8 = x[!1 = @sid]
y_6 = y[m_0 = bitG(g(x_8)),!1 = @sid_1]
n_i_4 = n_i[m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))),!1 = @sid]
x_9 = x_1[!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))),m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))),!1 = @sid]
y_7 = y_2[m_50 = bitG(g(x_9)),!1 = @sid_3]
n_c_8 = n_c_4[m_52 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))),m_50 = bitG(g(x_9)),!1 = @sid_3]
randomness_4 = randomness[m_14 = enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(x_9),y_7))),m_11 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))),!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))),m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))),!1 = @sid]

1. The message genDID(pk(sk_I[]),sk_I[]) may be sent to the attacker at output {13}.
attacker(genDID(pk(sk_I[]),sk_I[])).

2. Using the function attr the attacker may obtain attr.
attacker(attr).

3. By 2, the attacker may know attr.
By 1, the attacker may know genDID(pk(sk_I[]),sk_I[]).
Using the function 2-tuple the attacker may obtain (attr,genDID(pk(sk_I[]),sk_I[])).
attacker((attr,genDID(pk(sk_I[]),sk_I[]))).

4. By 3, the attacker may know (attr,genDID(pk(sk_I[]),sk_I[])).
Using the function ch the attacker may obtain ch((attr,genDID(pk(sk_I[]),sk_I[]))).
attacker(ch((attr,genDID(pk(sk_I[]),sk_I[])))).

5. The message bitG(g(x_8)) may be sent to the attacker at output {88}.
attacker(bitG(g(x_8))).

6. The message bitG(g(x_8)) that the attacker may have by 5 may be received at input {26}.
So the message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) may be sent to the attacker at output {33}.
attacker((bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6))))).

7. By 6, the attacker may know (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))).
Using the function 2-proj-2-tuple the attacker may obtain enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6))).
attacker(enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))).

8. By 6, the attacker may know (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_6)).
attacker(bitG(g(y_6))).

9. By 8, the attacker may know bitG(g(y_6)).
By 7, the attacker may know enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))).
attacker((bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6))))).

10. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) that the attacker may have by 9 may be received at input {89}.
So the message enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(x_8),y_6))) may be sent to the attacker at output {99}.
attacker(enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(x_8),y_6)))).

11. The message bitG(g(x_8)) that the attacker may have by 5 may be received at input {26}.
The message enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(x_8),y_6))) that the attacker may have by 10 may be received at input {34}.
So the message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))) may be sent to the attacker at output {43}.
attacker(enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6)))).

12. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) that the attacker may have by 9 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))) that the attacker may have by 11 may be received at input {100}.
So the message bitG(g(x_9)) may be sent to the attacker at output {113}.
attacker(bitG(g(x_9))).

13. The message bitG(g(x_9)) that the attacker may have by 12 may be received at input {372}.
So the message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))) may be sent to the attacker at output {379}.
attacker((bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7))))).

14. By 13, the attacker may know (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))).
Using the function 2-proj-2-tuple the attacker may obtain enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7))).
attacker(enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))).

15. By 13, the attacker may know (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_7)).
attacker(bitG(g(y_7))).

16. By 15, the attacker may know bitG(g(y_7)).
By 14, the attacker may know enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))).
attacker((bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7))))).

17. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) that the attacker may have by 9 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))) that the attacker may have by 11 may be received at input {100}.
The message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))) that the attacker may have by 16 may be received at input {114}.
So the message enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))) may be sent to the attacker at output {122}.
attacker(enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7)))).

18. The message bitG(g(x_9)) that the attacker may have by 12 may be received at input {372}.
The message enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 17 may be received at input {380}.
So the message enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(x_9),y_7))) may be sent to the attacker at output {386}.
attacker(enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(x_9),y_7)))).

19. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) that the attacker may have by 9 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(x_8),y_6))) that the attacker may have by 11 may be received at input {100}.
The message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))) that the attacker may have by 16 may be received at input {114}.
The message enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 18 may be received at input {123}.
So the message enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(x_9),y_7))) may be sent to the attacker at output {134}.
attacker(enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(x_9),y_7)))).

20. The message bitG(g(x_9)) that the attacker may have by 12 may be received at input {372}.
The message enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 17 may be received at input {380}.
The message enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(x_9),y_7))) that the attacker may have by 19 may be received at input {387}.
So the message rule_fromVerifier[] may be sent on channel ch((attr,genDID(pk(sk_I[]),sk_I[]))) at output {401}.
mess(ch((attr,genDID(pk(sk_I[]),sk_I[]))),rule_fromVerifier[]).

21. By 4, the attacker may have the channel ch((attr,genDID(pk(sk_I[]),sk_I[]))).
By 20, the message rule_fromVerifier[] may be sent on this channel.
So the attacker may obtain the message rule_fromVerifier[] by listening on this channel.
attacker(rule_fromVerifier[]).

22. By 21, attacker(rule_fromVerifier[]).
The goal is reached, represented in the following fact:
attacker(rule_fromVerifier[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new attr_2: bitstring creating attr_8 at {1}

out(h, ~M) with ~M = attr_8 at {2}

new sk_I: SecretKey creating sk_I_3 at {3}

new sk_V: SecretKey creating sk_V_5 at {4}

new sk_P: SecretKey creating sk_P_5 at {5}

out(h, ~M_1) with ~M_1 = pk(sk_I_3) at {6}

out(h, ~M_2) with ~M_2 = pk(sk_V_5) at {7}

out(h, ~M_3) with ~M_3 = pk(sk_P_5) at {8}

out(h, ~M_4) with ~M_4 = genDID(pk(sk_I_3),sk_I_3) at {13}

out(h, ~M_5) with ~M_5 = genDID(pk(sk_V_5),sk_V_5) at {14}

out(h, ~M_6) with ~M_6 = genDID(pk(sk_P_5),sk_P_5) at {15}

out(h, ~M_7) with ~M_7 = genDID(pk(sk_E),sk_E) at {16}

new x: exponent creating x_8 at {84} in copy a

out(h, ~M_8) with ~M_8 = bitG(g(x_8)) at {88} in copy a

in(h, ~M_8) with ~M_8 = bitG(g(x_8)) at {26} in copy a_1

new y: exponent creating y_6 at {28} in copy a_1

out(h, (~M_9,~M_10)) with ~M_9 = bitG(g(y_6)), ~M_10 = enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6))) at {33} in copy a_1

in(h, (~M_9,~M_10)) with ~M_9 = bitG(g(y_6)), ~M_10 = enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6))) at {89} in copy a

new n_i: bitstring creating n_i_4 at {95} in copy a

event auth_HolderSendsLastMessageToIssuer(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8)))) at {98} in copy a

out(h, ~M_11) with ~M_11 = enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))) at {99} in copy a

in(h, ~M_11) with ~M_11 = enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(x_8),y_6))) at {34} in copy a_1

event auth_IssuerSendsLastMessageToHolder(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(x_8),y_6))),enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6)))) at {42} in copy a_1

out(h, ~M_12) with ~M_12 = enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6))) at {43} in copy a_1

out(h, ~M_13) with ~M_13 = Issuer_Completes at {44} in copy a_1

event auth_IssuerCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(x_8),y_6)))) at {46} in copy a_1

in(h, ~M_12) with ~M_12 = enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6))) at {100} in copy a

out(h, ~M_14) with ~M_14 = Holder_Completes at {106} in copy a

event auth_HolderCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6)))) at {147} in copy a

new x_1: exponent creating x_9 at {109} in copy a, a_2

out(h, ~M_15) with ~M_15 = bitG(g(x_9)) at {113} in copy a, a_2

in(h, ~M_15) with ~M_15 = bitG(g(x_9)) at {372} in copy a_3

new y_2: exponent creating y_7 at {374} in copy a_3

out(h, (~M_16,~M_17)) with ~M_16 = bitG(g(y_7)), ~M_17 = enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7))) at {379} in copy a_3

in(h, (~M_16,~M_17)) with ~M_16 = bitG(g(y_7)), ~M_17 = enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7))) at {114} in copy a, a_2

out(h, ~M_18) with ~M_18 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))) at {122} in copy a, a_2

in(h, ~M_18) with ~M_18 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))) at {380} in copy a_3

new n_c_4: bitstring creating n_c_8 at {383} in copy a_3

out(h, ~M_19) with ~M_19 = enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))) at {386} in copy a_3

in(h, ~M_19) with ~M_19 = enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))) at {123} in copy a, a_2

new randomness: bitstring creating randomness_4 at {128} in copy a, a_2

event auth_ProverSendsLastMessageToVerifier(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9)))) at {132} in copy a, a_2

event auth_ProverSendsLastMessageToVerifierInProtocolFull(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6))),bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9)))) at {133} in copy a, a_2

out(h, ~M_20) with ~M_20 = enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9))) at {134} in copy a, a_2

in(h, ~M_20) with ~M_20 = enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(x_9),y_7))) at {387} in copy a_3

new tkn_access_4: bitstring creating tkn_access_8 at {392} in copy a_3

event auth_VerifierSendsLastMessageToProver(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(x_9),y_7))),enc((tkn_access_8,sig(tkn_access_8,sk_V_5)),GtoSymK(exp(g(x_9),y_7)))) at {395} in copy a_3

out(h, ~M_21) with ~M_21 = enc((tkn_access_8,sig(tkn_access_8,sk_V_5)),GtoSymK(exp(g(x_9),y_7))) at {396} in copy a_3

out(h, ~M_22) with ~M_22 = Verifier_Completes at {397} in copy a_3

out(ch((attr,genDID(pk(sk_I_3),sk_I_3))), ~M_23) with ~M_23 = rule_fromVerifier at {401} in copy a_3

event auth_VerifierCompletesProtocol(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(x_9),y_7))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(x_9),y_7)))) at {399} in copy a_3

The attacker has the message ~M_23 = rule_fromVerifier.
A trace has been found.
RESULT not attacker(rule_fromVerifier[]) is false.
-- Query not attacker(cred_fromVerifier[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 249 rules.
400 rules inserted. Base: 383 rules (78 with conclusion selected). Queue: 324 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 318 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 627 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 678 rules.
1400 rules inserted. Base: 1198 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 703 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1520 rules (146 with conclusion selected). Queue: 631 rules.
2200 rules inserted. Base: 1634 rules (154 with conclusion selected). Queue: 726 rules.
2400 rules inserted. Base: 1710 rules (156 with conclusion selected). Queue: 720 rules.
2600 rules inserted. Base: 1758 rules (164 with conclusion selected). Queue: 783 rules.
2800 rules inserted. Base: 1809 rules (166 with conclusion selected). Queue: 651 rules.
3000 rules inserted. Base: 1904 rules (166 with conclusion selected). Queue: 510 rules.
3200 rules inserted. Base: 2063 rules (169 with conclusion selected). Queue: 491 rules.
3400 rules inserted. Base: 2227 rules (170 with conclusion selected). Queue: 421 rules.
3600 rules inserted. Base: 2193 rules (174 with conclusion selected). Queue: 294 rules.
3800 rules inserted. Base: 2302 rules (176 with conclusion selected). Queue: 271 rules.
4000 rules inserted. Base: 2410 rules (179 with conclusion selected). Queue: 324 rules.
4200 rules inserted. Base: 2394 rules (179 with conclusion selected). Queue: 279 rules.
4400 rules inserted. Base: 2413 rules (205 with conclusion selected). Queue: 332 rules.
4600 rules inserted. Base: 2512 rules (224 with conclusion selected). Queue: 438 rules.
4800 rules inserted. Base: 2369 rules (225 with conclusion selected). Queue: 324 rules.
5000 rules inserted. Base: 2483 rules (227 with conclusion selected). Queue: 365 rules.
5200 rules inserted. Base: 2552 rules (234 with conclusion selected). Queue: 318 rules.
5400 rules inserted. Base: 2608 rules (234 with conclusion selected). Queue: 293 rules.
5600 rules inserted. Base: 2698 rules (238 with conclusion selected). Queue: 303 rules.
5800 rules inserted. Base: 2748 rules (242 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2846 rules (242 with conclusion selected). Queue: 267 rules.
6200 rules inserted. Base: 2859 rules (250 with conclusion selected). Queue: 189 rules.
6400 rules inserted. Base: 2879 rules (256 with conclusion selected). Queue: 122 rules.
select attacker(bitG(g(y_6)))/-5000
6600 rules inserted. Base: 2636 rules (269 with conclusion selected). Queue: 119 rules.
6800 rules inserted. Base: 2735 rules (293 with conclusion selected). Queue: 188 rules.
7000 rules inserted. Base: 2839 rules (315 with conclusion selected). Queue: 260 rules.
7200 rules inserted. Base: 2938 rules (317 with conclusion selected). Queue: 328 rules.
7400 rules inserted. Base: 3000 rules (320 with conclusion selected). Queue: 308 rules.
7600 rules inserted. Base: 2990 rules (324 with conclusion selected). Queue: 303 rules.
7800 rules inserted. Base: 3009 rules (326 with conclusion selected). Queue: 259 rules.
8000 rules inserted. Base: 3050 rules (328 with conclusion selected). Queue: 192 rules.
8200 rules inserted. Base: 3095 rules (337 with conclusion selected). Queue: 156 rules.
8400 rules inserted. Base: 3111 rules (345 with conclusion selected). Queue: 104 rules.
8600 rules inserted. Base: 3065 rules (354 with conclusion selected). Queue: 83 rules.
8800 rules inserted. Base: 3078 rules (362 with conclusion selected). Queue: 69 rules.
9000 rules inserted. Base: 3124 rules (395 with conclusion selected). Queue: 83 rules.
9200 rules inserted. Base: 3234 rules (413 with conclusion selected). Queue: 24 rules.
9400 rules inserted. Base: 3309 rules (427 with conclusion selected). Queue: 20 rules.
Starting query not attacker(cred_fromVerifier[])
RESULT not attacker(cred_fromVerifier[]) is true.
-- Query not attacker(vp_fromVerifier[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 249 rules.
400 rules inserted. Base: 383 rules (78 with conclusion selected). Queue: 324 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 318 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 627 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 678 rules.
1400 rules inserted. Base: 1198 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 703 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1520 rules (146 with conclusion selected). Queue: 631 rules.
2200 rules inserted. Base: 1634 rules (154 with conclusion selected). Queue: 726 rules.
2400 rules inserted. Base: 1710 rules (156 with conclusion selected). Queue: 720 rules.
2600 rules inserted. Base: 1758 rules (164 with conclusion selected). Queue: 783 rules.
2800 rules inserted. Base: 1809 rules (166 with conclusion selected). Queue: 651 rules.
3000 rules inserted. Base: 1904 rules (166 with conclusion selected). Queue: 510 rules.
3200 rules inserted. Base: 2063 rules (169 with conclusion selected). Queue: 491 rules.
3400 rules inserted. Base: 2227 rules (170 with conclusion selected). Queue: 421 rules.
3600 rules inserted. Base: 2193 rules (174 with conclusion selected). Queue: 294 rules.
3800 rules inserted. Base: 2302 rules (176 with conclusion selected). Queue: 271 rules.
4000 rules inserted. Base: 2410 rules (179 with conclusion selected). Queue: 324 rules.
4200 rules inserted. Base: 2394 rules (179 with conclusion selected). Queue: 279 rules.
4400 rules inserted. Base: 2413 rules (205 with conclusion selected). Queue: 332 rules.
4600 rules inserted. Base: 2512 rules (224 with conclusion selected). Queue: 438 rules.
4800 rules inserted. Base: 2369 rules (225 with conclusion selected). Queue: 324 rules.
5000 rules inserted. Base: 2483 rules (227 with conclusion selected). Queue: 365 rules.
5200 rules inserted. Base: 2552 rules (234 with conclusion selected). Queue: 318 rules.
5400 rules inserted. Base: 2608 rules (234 with conclusion selected). Queue: 293 rules.
5600 rules inserted. Base: 2698 rules (238 with conclusion selected). Queue: 303 rules.
5800 rules inserted. Base: 2748 rules (242 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2846 rules (242 with conclusion selected). Queue: 267 rules.
6200 rules inserted. Base: 2859 rules (250 with conclusion selected). Queue: 189 rules.
6400 rules inserted. Base: 2879 rules (256 with conclusion selected). Queue: 122 rules.
select attacker(bitG(g(y_6)))/-5000
6600 rules inserted. Base: 2636 rules (269 with conclusion selected). Queue: 119 rules.
6800 rules inserted. Base: 2735 rules (293 with conclusion selected). Queue: 188 rules.
7000 rules inserted. Base: 2839 rules (315 with conclusion selected). Queue: 260 rules.
7200 rules inserted. Base: 2938 rules (317 with conclusion selected). Queue: 328 rules.
7400 rules inserted. Base: 3000 rules (320 with conclusion selected). Queue: 308 rules.
7600 rules inserted. Base: 2990 rules (324 with conclusion selected). Queue: 303 rules.
7800 rules inserted. Base: 3009 rules (326 with conclusion selected). Queue: 259 rules.
8000 rules inserted. Base: 3050 rules (328 with conclusion selected). Queue: 192 rules.
8200 rules inserted. Base: 3095 rules (337 with conclusion selected). Queue: 156 rules.
8400 rules inserted. Base: 3111 rules (345 with conclusion selected). Queue: 104 rules.
8600 rules inserted. Base: 3065 rules (354 with conclusion selected). Queue: 83 rules.
8800 rules inserted. Base: 3078 rules (362 with conclusion selected). Queue: 69 rules.
9000 rules inserted. Base: 3124 rules (395 with conclusion selected). Queue: 83 rules.
9200 rules inserted. Base: 3234 rules (413 with conclusion selected). Queue: 24 rules.
9400 rules inserted. Base: 3309 rules (427 with conclusion selected). Queue: 20 rules.
Starting query not attacker(vp_fromVerifier[])
RESULT not attacker(vp_fromVerifier[]) is true.
-- Query not attacker(access_token_fromVerifier[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 249 rules.
400 rules inserted. Base: 383 rules (78 with conclusion selected). Queue: 324 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 318 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 627 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 678 rules.
1400 rules inserted. Base: 1198 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 703 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1520 rules (146 with conclusion selected). Queue: 631 rules.
2200 rules inserted. Base: 1634 rules (154 with conclusion selected). Queue: 726 rules.
2400 rules inserted. Base: 1710 rules (156 with conclusion selected). Queue: 720 rules.
2600 rules inserted. Base: 1758 rules (164 with conclusion selected). Queue: 783 rules.
2800 rules inserted. Base: 1809 rules (166 with conclusion selected). Queue: 651 rules.
3000 rules inserted. Base: 1904 rules (166 with conclusion selected). Queue: 510 rules.
3200 rules inserted. Base: 2063 rules (169 with conclusion selected). Queue: 491 rules.
3400 rules inserted. Base: 2227 rules (170 with conclusion selected). Queue: 421 rules.
3600 rules inserted. Base: 2193 rules (174 with conclusion selected). Queue: 294 rules.
3800 rules inserted. Base: 2302 rules (176 with conclusion selected). Queue: 271 rules.
4000 rules inserted. Base: 2410 rules (179 with conclusion selected). Queue: 324 rules.
4200 rules inserted. Base: 2394 rules (179 with conclusion selected). Queue: 279 rules.
4400 rules inserted. Base: 2413 rules (205 with conclusion selected). Queue: 332 rules.
4600 rules inserted. Base: 2512 rules (224 with conclusion selected). Queue: 438 rules.
4800 rules inserted. Base: 2369 rules (225 with conclusion selected). Queue: 324 rules.
5000 rules inserted. Base: 2483 rules (227 with conclusion selected). Queue: 365 rules.
5200 rules inserted. Base: 2552 rules (234 with conclusion selected). Queue: 318 rules.
5400 rules inserted. Base: 2608 rules (234 with conclusion selected). Queue: 293 rules.
5600 rules inserted. Base: 2698 rules (238 with conclusion selected). Queue: 303 rules.
5800 rules inserted. Base: 2748 rules (242 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2846 rules (242 with conclusion selected). Queue: 267 rules.
6200 rules inserted. Base: 2859 rules (250 with conclusion selected). Queue: 189 rules.
6400 rules inserted. Base: 2879 rules (256 with conclusion selected). Queue: 122 rules.
select attacker(bitG(g(y_6)))/-5000
6600 rules inserted. Base: 2636 rules (269 with conclusion selected). Queue: 119 rules.
6800 rules inserted. Base: 2735 rules (293 with conclusion selected). Queue: 188 rules.
7000 rules inserted. Base: 2839 rules (315 with conclusion selected). Queue: 260 rules.
7200 rules inserted. Base: 2938 rules (317 with conclusion selected). Queue: 328 rules.
7400 rules inserted. Base: 3000 rules (320 with conclusion selected). Queue: 308 rules.
7600 rules inserted. Base: 2990 rules (324 with conclusion selected). Queue: 303 rules.
7800 rules inserted. Base: 3009 rules (326 with conclusion selected). Queue: 259 rules.
8000 rules inserted. Base: 3050 rules (328 with conclusion selected). Queue: 192 rules.
8200 rules inserted. Base: 3095 rules (337 with conclusion selected). Queue: 156 rules.
8400 rules inserted. Base: 3111 rules (345 with conclusion selected). Queue: 104 rules.
8600 rules inserted. Base: 3065 rules (354 with conclusion selected). Queue: 83 rules.
8800 rules inserted. Base: 3078 rules (362 with conclusion selected). Queue: 69 rules.
9000 rules inserted. Base: 3124 rules (395 with conclusion selected). Queue: 83 rules.
9200 rules inserted. Base: 3234 rules (413 with conclusion selected). Queue: 24 rules.
9400 rules inserted. Base: 3309 rules (427 with conclusion selected). Queue: 20 rules.
Starting query not attacker(access_token_fromVerifier[])
RESULT not attacker(access_token_fromVerifier[]) is true.
-- Query inj-event(auth_ProverCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp,m_accessToken)) ==> inj-event(auth_VerifierSendsLastMessageToProver(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp,m_accessToken)) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (45 with conclusion selected). Queue: 233 rules.
400 rules inserted. Base: 384 rules (78 with conclusion selected). Queue: 336 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 335 rules.
800 rules inserted. Base: 760 rules (132 with conclusion selected). Queue: 362 rules.
1000 rules inserted. Base: 944 rules (140 with conclusion selected). Queue: 628 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 679 rules.
1400 rules inserted. Base: 1260 rules (140 with conclusion selected). Queue: 689 rules.
1600 rules inserted. Base: 1312 rules (144 with conclusion selected). Queue: 709 rules.
1800 rules inserted. Base: 1439 rules (144 with conclusion selected). Queue: 730 rules.
2000 rules inserted. Base: 1569 rules (144 with conclusion selected). Queue: 698 rules.
2200 rules inserted. Base: 1673 rules (154 with conclusion selected). Queue: 781 rules.
2400 rules inserted. Base: 1766 rules (154 with conclusion selected). Queue: 770 rules.
2600 rules inserted. Base: 1814 rules (160 with conclusion selected). Queue: 831 rules.
2800 rules inserted. Base: 1858 rules (164 with conclusion selected). Queue: 823 rules.
3000 rules inserted. Base: 1926 rules (166 with conclusion selected). Queue: 660 rules.
3200 rules inserted. Base: 2055 rules (167 with conclusion selected). Queue: 573 rules.
3400 rules inserted. Base: 2221 rules (169 with conclusion selected). Queue: 553 rules.
3600 rules inserted. Base: 2386 rules (170 with conclusion selected). Queue: 445 rules.
3800 rules inserted. Base: 2334 rules (174 with conclusion selected). Queue: 327 rules.
4000 rules inserted. Base: 2427 rules (176 with conclusion selected). Queue: 306 rules.
4200 rules inserted. Base: 2572 rules (176 with conclusion selected). Queue: 337 rules.
4400 rules inserted. Base: 2560 rules (179 with conclusion selected). Queue: 315 rules.
4600 rules inserted. Base: 2593 rules (203 with conclusion selected). Queue: 357 rules.
4800 rules inserted. Base: 2585 rules (212 with conclusion selected). Queue: 386 rules.
5000 rules inserted. Base: 2636 rules (225 with conclusion selected). Queue: 423 rules.
5200 rules inserted. Base: 2574 rules (226 with conclusion selected). Queue: 372 rules.
5400 rules inserted. Base: 2676 rules (228 with conclusion selected). Queue: 390 rules.
5600 rules inserted. Base: 2778 rules (234 with conclusion selected). Queue: 341 rules.
5800 rules inserted. Base: 2774 rules (234 with conclusion selected). Queue: 308 rules.
6000 rules inserted. Base: 2883 rules (238 with conclusion selected). Queue: 335 rules.
6200 rules inserted. Base: 2938 rules (242 with conclusion selected). Queue: 351 rules.
6400 rules inserted. Base: 3034 rules (242 with conclusion selected). Queue: 288 rules.
6600 rules inserted. Base: 3046 rules (246 with conclusion selected). Queue: 242 rules.
6800 rules inserted. Base: 3070 rules (252 with conclusion selected). Queue: 178 rules.
7000 rules inserted. Base: 3172 rules (258 with conclusion selected). Queue: 151 rules.
select attacker(bitG(g(y_6)))/-5000
7200 rules inserted. Base: 2886 rules (269 with conclusion selected). Queue: 160 rules.
7400 rules inserted. Base: 2992 rules (295 with conclusion selected). Queue: 234 rules.
7600 rules inserted. Base: 3103 rules (317 with conclusion selected). Queue: 342 rules.
7800 rules inserted. Base: 3198 rules (321 with conclusion selected). Queue: 350 rules.
8000 rules inserted. Base: 3318 rules (324 with conclusion selected). Queue: 396 rules.
8200 rules inserted. Base: 3387 rules (324 with conclusion selected). Queue: 345 rules.
8400 rules inserted. Base: 3410 rules (329 with conclusion selected). Queue: 405 rules.
8600 rules inserted. Base: 3481 rules (331 with conclusion selected). Queue: 412 rules.
8800 rules inserted. Base: 3489 rules (333 with conclusion selected). Queue: 369 rules.
9000 rules inserted. Base: 3567 rules (333 with conclusion selected). Queue: 325 rules.
9200 rules inserted. Base: 3627 rules (343 with conclusion selected). Queue: 254 rules.
9400 rules inserted. Base: 3613 rules (351 with conclusion selected). Queue: 210 rules.
9600 rules inserted. Base: 3654 rules (353 with conclusion selected). Queue: 150 rules.
9800 rules inserted. Base: 3720 rules (361 with conclusion selected). Queue: 127 rules.
10000 rules inserted. Base: 3791 rules (369 with conclusion selected). Queue: 116 rules.
10200 rules inserted. Base: 3810 rules (385 with conclusion selected). Queue: 87 rules.
10400 rules inserted. Base: 3864 rules (415 with conclusion selected). Queue: 102 rules.
10600 rules inserted. Base: 3968 rules (440 with conclusion selected). Queue: 41 rules.
10800 rules inserted. Base: 4038 rules (457 with conclusion selected). Queue: 25 rules.
Starting query inj-event(auth_ProverCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp,m_accessToken)) ==> inj-event(auth_VerifierSendsLastMessageToProver(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp,m_accessToken))
goal reachable: begin(auth_VerifierSendsLastMessageToProver(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_V[]),GtoSymK(exp(g(y_6),x_8)))),enc(((g(x_8),g(y_6)),uri),GtoSymK(exp(g(y_6),x_8))),enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_6),x_8))),enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_8),g(y_6)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_6),x_8))),enc((tkn_access_8,sig(tkn_access_8,sk_V[])),GtoSymK(exp(g(y_6),x_8)))),@occ395_1) -> end(@occ140_1,auth_ProverCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_V[]),GtoSymK(exp(g(y_6),x_8)))),enc(((g(x_8),g(y_6)),uri),GtoSymK(exp(g(y_6),x_8))),enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_6),x_8))),enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_8),g(y_6)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_6),x_8))),enc((tkn_access_8,sig(tkn_access_8,sk_V[])),GtoSymK(exp(g(y_6),x_8)))))
The hypothesis occurs strictly before the conclusion.
Abbreviations:
x_9 = x[!1 = @sid]
y_7 = y[m_0 = bitG(g(x_9)),!1 = @sid_1]
n_i_4 = n_i[m_6 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_I[]),GtoSymK(exp(g(y_7),x_9)))),!1 = @sid]
x_8 = x_1[!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_7),x_9))),m_6 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_I[]),GtoSymK(exp(g(y_7),x_9)))),!1 = @sid]
y_6 = y_2[m_50 = bitG(g(x_8)),!1 = @sid_3]
n_c_8 = n_c_4[m_52 = enc(((g(x_8),g(y_6)),uri),GtoSymK(exp(g(y_6),x_8))),m_50 = bitG(g(x_8)),!1 = @sid_3]
randomness_4 = randomness[m_14 = enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_6),x_8))),m_11 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_V[]),GtoSymK(exp(g(y_6),x_8)))),!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_7),x_9))),m_6 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_I[]),GtoSymK(exp(g(y_7),x_9)))),!1 = @sid]
tkn_access_8 = tkn_access_4[m_54 = enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_8),g(y_6)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_6),x_8))),m_52 = enc(((g(x_8),g(y_6)),uri),GtoSymK(exp(g(y_6),x_8))),m_50 = bitG(g(x_8)),!1 = @sid_3]
@occ140_1 = @occ140[m_16 = enc((tkn_access_8,sig(tkn_access_8,sk_V[])),GtoSymK(exp(g(y_6),x_8))),m_14 = enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_6),x_8))),m_11 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_V[]),GtoSymK(exp(g(y_6),x_8)))),!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_7),x_9))),m_6 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_I[]),GtoSymK(exp(g(y_7),x_9)))),!1 = @sid]
@occ395_1 = @occ395[m_54 = enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_8),g(y_6)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_6),x_8))),m_52 = enc(((g(x_8),g(y_6)),uri),GtoSymK(exp(g(y_6),x_8))),m_50 = bitG(g(x_8)),!1 = @sid_3]
RESULT inj-event(auth_ProverCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp,m_accessToken)) ==> inj-event(auth_VerifierSendsLastMessageToProver(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp,m_accessToken)) is true.
-- Query inj-event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> inj-event(auth_ProverSendsLastMessageToVerifier(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 251 rules.
400 rules inserted. Base: 384 rules (78 with conclusion selected). Queue: 326 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 320 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 626 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 674 rules.
1400 rules inserted. Base: 1204 rules (142 with conclusion selected). Queue: 626 rules.
1600 rules inserted. Base: 1279 rules (144 with conclusion selected). Queue: 708 rules.
1800 rules inserted. Base: 1411 rules (144 with conclusion selected). Queue: 678 rules.
2000 rules inserted. Base: 1522 rules (146 with conclusion selected). Queue: 630 rules.
2200 rules inserted. Base: 1639 rules (154 with conclusion selected). Queue: 727 rules.
2400 rules inserted. Base: 1714 rules (156 with conclusion selected). Queue: 755 rules.
2600 rules inserted. Base: 1751 rules (162 with conclusion selected). Queue: 813 rules.
2800 rules inserted. Base: 1799 rules (164 with conclusion selected). Queue: 789 rules.
3000 rules inserted. Base: 1888 rules (166 with conclusion selected). Queue: 723 rules.
3200 rules inserted. Base: 2045 rules (168 with conclusion selected). Queue: 702 rules.
3400 rules inserted. Base: 2207 rules (170 with conclusion selected). Queue: 675 rules.
3600 rules inserted. Base: 2393 rules (170 with conclusion selected). Queue: 506 rules.
3800 rules inserted. Base: 2512 rules (174 with conclusion selected). Queue: 398 rules.
4000 rules inserted. Base: 2517 rules (174 with conclusion selected). Queue: 362 rules.
4200 rules inserted. Base: 2665 rules (176 with conclusion selected). Queue: 377 rules.
4400 rules inserted. Base: 2772 rules (179 with conclusion selected). Queue: 432 rules.
4600 rules inserted. Base: 2818 rules (179 with conclusion selected). Queue: 365 rules.
4800 rules inserted. Base: 2878 rules (201 with conclusion selected). Queue: 411 rules.
5000 rules inserted. Base: 2679 rules (206 with conclusion selected). Queue: 403 rules.
5200 rules inserted. Base: 2810 rules (225 with conclusion selected). Queue: 539 rules.
5400 rules inserted. Base: 2785 rules (225 with conclusion selected). Queue: 463 rules.
5600 rules inserted. Base: 2860 rules (226 with conclusion selected). Queue: 468 rules.
5800 rules inserted. Base: 2934 rules (229 with conclusion selected). Queue: 490 rules.
6000 rules inserted. Base: 3022 rules (234 with conclusion selected). Queue: 441 rules.
6200 rules inserted. Base: 3071 rules (234 with conclusion selected). Queue: 440 rules.
6400 rules inserted. Base: 2974 rules (238 with conclusion selected). Queue: 416 rules.
6600 rules inserted. Base: 3039 rules (238 with conclusion selected). Queue: 457 rules.
6800 rules inserted. Base: 3119 rules (242 with conclusion selected). Queue: 443 rules.
7000 rules inserted. Base: 3201 rules (242 with conclusion selected). Queue: 393 rules.
7200 rules inserted. Base: 3339 rules (242 with conclusion selected). Queue: 297 rules.
7400 rules inserted. Base: 3339 rules (250 with conclusion selected). Queue: 228 rules.
7600 rules inserted. Base: 3351 rules (254 with conclusion selected). Queue: 238 rules.
7800 rules inserted. Base: 3438 rules (260 with conclusion selected). Queue: 265 rules.
select attacker(bitG(g(y_6)))/-5000
8000 rules inserted. Base: 3476 rules (269 with conclusion selected). Queue: 288 rules.
8200 rules inserted. Base: 3560 rules (274 with conclusion selected). Queue: 261 rules.
8400 rules inserted. Base: 3658 rules (295 with conclusion selected). Queue: 366 rules.
8600 rules inserted. Base: 3730 rules (312 with conclusion selected). Queue: 463 rules.
8800 rules inserted. Base: 3838 rules (316 with conclusion selected). Queue: 445 rules.
9000 rules inserted. Base: 3956 rules (320 with conclusion selected). Queue: 465 rules.
9200 rules inserted. Base: 4079 rules (320 with conclusion selected). Queue: 509 rules.
9400 rules inserted. Base: 4156 rules (323 with conclusion selected). Queue: 497 rules.
9600 rules inserted. Base: 4148 rules (324 with conclusion selected). Queue: 476 rules.
9800 rules inserted. Base: 4225 rules (327 with conclusion selected). Queue: 512 rules.
10000 rules inserted. Base: 4251 rules (327 with conclusion selected). Queue: 540 rules.
10200 rules inserted. Base: 4307 rules (329 with conclusion selected). Queue: 494 rules.
10400 rules inserted. Base: 4391 rules (331 with conclusion selected). Queue: 442 rules.
10600 rules inserted. Base: 4468 rules (331 with conclusion selected). Queue: 420 rules.
10800 rules inserted. Base: 4508 rules (341 with conclusion selected). Queue: 354 rules.
11000 rules inserted. Base: 4513 rules (341 with conclusion selected). Queue: 250 rules.
11200 rules inserted. Base: 4598 rules (349 with conclusion selected). Queue: 208 rules.
11400 rules inserted. Base: 4609 rules (351 with conclusion selected). Queue: 147 rules.
11600 rules inserted. Base: 4676 rules (360 with conclusion selected). Queue: 112 rules.
11800 rules inserted. Base: 4715 rules (371 with conclusion selected). Queue: 132 rules.
12000 rules inserted. Base: 4762 rules (387 with conclusion selected). Queue: 118 rules.
12200 rules inserted. Base: 4809 rules (412 with conclusion selected). Queue: 119 rules.
12400 rules inserted. Base: 4908 rules (435 with conclusion selected). Queue: 103 rules.
12600 rules inserted. Base: 5022 rules (447 with conclusion selected). Queue: 40 rules.
12800 rules inserted. Base: 5080 rules (457 with conclusion selected). Queue: 23 rules.
13000 rules inserted. Base: 5171 rules (465 with conclusion selected). Queue: 21 rules.
Starting query inj-event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> inj-event(auth_ProverSendsLastMessageToVerifier(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp))
goal reachable: begin(auth_ProverSendsLastMessageToVerifier(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_V[]),GtoSymK(exp(g(y_6),x_8)))),enc(((g(x_8),g(y_6)),uri),GtoSymK(exp(g(y_6),x_8))),enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_6),x_8))),enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_8),g(y_6)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_6),x_8)))),@occ132_1) -> end(@occ399_1,auth_VerifierCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_V[]),GtoSymK(exp(g(y_6),x_8)))),enc(((g(x_8),g(y_6)),uri),GtoSymK(exp(g(y_6),x_8))),enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_6),x_8))),enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_8),g(y_6)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_6),x_8)))))
The hypothesis occurs strictly before the conclusion.
Abbreviations:
x_9 = x[!1 = @sid]
y_7 = y[m_0 = bitG(g(x_9)),!1 = @sid_1]
n_i_4 = n_i[m_6 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_I[]),GtoSymK(exp(g(y_7),x_9)))),!1 = @sid]
x_8 = x_1[!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_7),x_9))),m_6 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_I[]),GtoSymK(exp(g(y_7),x_9)))),!1 = @sid]
y_6 = y_2[m_50 = bitG(g(x_8)),!1 = @sid_3]
n_c_8 = n_c_4[m_52 = enc(((g(x_8),g(y_6)),uri),GtoSymK(exp(g(y_6),x_8))),m_50 = bitG(g(x_8)),!1 = @sid_3]
randomness_4 = randomness[m_14 = enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_6),x_8))),m_11 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_V[]),GtoSymK(exp(g(y_6),x_8)))),!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_7),x_9))),m_6 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_I[]),GtoSymK(exp(g(y_7),x_9)))),!1 = @sid]
@occ399_1 = @occ399[m_54 = enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_8),g(y_6)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_6),x_8))),m_52 = enc(((g(x_8),g(y_6)),uri),GtoSymK(exp(g(y_6),x_8))),m_50 = bitG(g(x_8)),!1 = @sid_3]
@occ132_1 = @occ132[m_14 = enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_6),x_8))),m_11 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_V[]),GtoSymK(exp(g(y_6),x_8)))),!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_7),x_9))),m_6 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_I[]),GtoSymK(exp(g(y_7),x_9)))),!1 = @sid]
RESULT inj-event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> inj-event(auth_ProverSendsLastMessageToVerifier(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) is true.
-- Query inj-event(auth_HolderCompletesProtocol(m_handshakeReq,m_handshakeResp,m_did,m_cred)) ==> inj-event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq,m_handshakeResp,m_did,m_cred)) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 251 rules.
400 rules inserted. Base: 384 rules (78 with conclusion selected). Queue: 326 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 319 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 634 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 682 rules.
1400 rules inserted. Base: 1225 rules (142 with conclusion selected). Queue: 669 rules.
1600 rules inserted. Base: 1296 rules (144 with conclusion selected). Queue: 744 rules.
1800 rules inserted. Base: 1422 rules (144 with conclusion selected). Queue: 724 rules.
2000 rules inserted. Base: 1539 rules (144 with conclusion selected). Queue: 680 rules.
2200 rules inserted. Base: 1651 rules (156 with conclusion selected). Queue: 760 rules.
2400 rules inserted. Base: 1738 rules (156 with conclusion selected). Queue: 739 rules.
2600 rules inserted. Base: 1787 rules (162 with conclusion selected). Queue: 784 rules.
2800 rules inserted. Base: 1859 rules (169 with conclusion selected). Queue: 739 rules.
3000 rules inserted. Base: 1934 rules (174 with conclusion selected). Queue: 605 rules.
3200 rules inserted. Base: 2067 rules (176 with conclusion selected). Queue: 544 rules.
3400 rules inserted. Base: 2229 rules (178 with conclusion selected). Queue: 512 rules.
3600 rules inserted. Base: 2397 rules (181 with conclusion selected). Queue: 407 rules.
3800 rules inserted. Base: 2324 rules (182 with conclusion selected). Queue: 320 rules.
4000 rules inserted. Base: 2445 rules (186 with conclusion selected). Queue: 295 rules.
4200 rules inserted. Base: 2545 rules (194 with conclusion selected). Queue: 348 rules.
4400 rules inserted. Base: 2531 rules (194 with conclusion selected). Queue: 277 rules.
4600 rules inserted. Base: 2561 rules (222 with conclusion selected). Queue: 342 rules.
4800 rules inserted. Base: 2678 rules (242 with conclusion selected). Queue: 460 rules.
5000 rules inserted. Base: 2539 rules (242 with conclusion selected). Queue: 374 rules.
5200 rules inserted. Base: 2660 rules (245 with conclusion selected). Queue: 416 rules.
5400 rules inserted. Base: 2729 rules (252 with conclusion selected). Queue: 377 rules.
5600 rules inserted. Base: 2804 rules (252 with conclusion selected). Queue: 352 rules.
5800 rules inserted. Base: 2852 rules (254 with conclusion selected). Queue: 318 rules.
6000 rules inserted. Base: 2916 rules (258 with conclusion selected). Queue: 335 rules.
6200 rules inserted. Base: 2972 rules (262 with conclusion selected). Queue: 318 rules.
6400 rules inserted. Base: 3071 rules (262 with conclusion selected). Queue: 261 rules.
6600 rules inserted. Base: 3062 rules (270 with conclusion selected). Queue: 188 rules.
6800 rules inserted. Base: 3114 rules (278 with conclusion selected). Queue: 129 rules.
select attacker(bitG(g(y_6)))/-5000
7000 rules inserted. Base: 3139 rules (286 with conclusion selected). Queue: 144 rules.
7200 rules inserted. Base: 3221 rules (311 with conclusion selected). Queue: 238 rules.
7400 rules inserted. Base: 3343 rules (330 with conclusion selected). Queue: 321 rules.
7600 rules inserted. Base: 3427 rules (335 with conclusion selected). Queue: 367 rules.
7800 rules inserted. Base: 3527 rules (339 with conclusion selected). Queue: 406 rules.
8000 rules inserted. Base: 3590 rules (339 with conclusion selected). Queue: 357 rules.
8200 rules inserted. Base: 3540 rules (344 with conclusion selected). Queue: 374 rules.
8400 rules inserted. Base: 3622 rules (346 with conclusion selected). Queue: 356 rules.
8600 rules inserted. Base: 3630 rules (348 with conclusion selected). Queue: 301 rules.
8800 rules inserted. Base: 3688 rules (352 with conclusion selected). Queue: 306 rules.
9000 rules inserted. Base: 3744 rules (359 with conclusion selected). Queue: 216 rules.
9200 rules inserted. Base: 3760 rules (366 with conclusion selected). Queue: 160 rules.
9400 rules inserted. Base: 3715 rules (370 with conclusion selected). Queue: 107 rules.
9600 rules inserted. Base: 3700 rules (380 with conclusion selected). Queue: 86 rules.
9800 rules inserted. Base: 3704 rules (398 with conclusion selected). Queue: 69 rules.
10000 rules inserted. Base: 3782 rules (432 with conclusion selected). Queue: 82 rules.
10200 rules inserted. Base: 3903 rules (445 with conclusion selected). Queue: 16 rules.
10400 rules inserted. Base: 3953 rules (459 with conclusion selected). Queue: 23 rules.
Starting query inj-event(auth_HolderCompletesProtocol(m_handshakeReq,m_handshakeResp,m_did,m_cred)) ==> inj-event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq,m_handshakeResp,m_did,m_cred))
goal reachable: begin(auth_IssuerSendsLastMessageToHolder(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8)))),@occ42_1) -> end(@occ147_1,auth_HolderCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8)))))
The hypothesis occurs strictly before the conclusion.
Abbreviations:
x_8 = x[!1 = @sid]
y_6 = y[m_0 = bitG(g(x_8)),!1 = @sid_1]
n_i_4 = n_i[m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),!1 = @sid]
@occ147_1 = @occ147[m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8))),m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),!1 = @sid]
@occ42_1 = @occ42[m_2 = enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8))),m_0 = bitG(g(x_8)),!1 = @sid_1]
RESULT inj-event(auth_HolderCompletesProtocol(m_handshakeReq,m_handshakeResp,m_did,m_cred)) ==> inj-event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq,m_handshakeResp,m_did,m_cred)) is true.
-- Query inj-event(auth_IssuerCompletesProtocol(m_handshakeReq,m_handshakeResp,m_did)) ==> inj-event(auth_HolderSendsLastMessageToIssuer(m_handshakeReq,m_handshakeResp,m_did)) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 251 rules.
400 rules inserted. Base: 384 rules (78 with conclusion selected). Queue: 326 rules.
600 rules inserted. Base: 561 rules (125 with conclusion selected). Queue: 321 rules.
800 rules inserted. Base: 759 rules (134 with conclusion selected). Queue: 378 rules.
1000 rules inserted. Base: 941 rules (140 with conclusion selected). Queue: 648 rules.
1200 rules inserted. Base: 1138 rules (140 with conclusion selected). Queue: 694 rules.
1400 rules inserted. Base: 1219 rules (141 with conclusion selected). Queue: 679 rules.
1600 rules inserted. Base: 1291 rules (144 with conclusion selected). Queue: 749 rules.
1800 rules inserted. Base: 1407 rules (144 with conclusion selected). Queue: 747 rules.
2000 rules inserted. Base: 1530 rules (144 with conclusion selected). Queue: 706 rules.
2200 rules inserted. Base: 1641 rules (158 with conclusion selected). Queue: 770 rules.
2400 rules inserted. Base: 1735 rules (158 with conclusion selected). Queue: 756 rules.
2600 rules inserted. Base: 1783 rules (164 with conclusion selected). Queue: 799 rules.
2800 rules inserted. Base: 1824 rules (172 with conclusion selected). Queue: 791 rules.
3000 rules inserted. Base: 1892 rules (178 with conclusion selected). Queue: 624 rules.
3200 rules inserted. Base: 2021 rules (179 with conclusion selected). Queue: 529 rules.
3400 rules inserted. Base: 2181 rules (182 with conclusion selected). Queue: 514 rules.
3600 rules inserted. Base: 2325 rules (178 with conclusion selected). Queue: 417 rules.
3800 rules inserted. Base: 2277 rules (182 with conclusion selected). Queue: 313 rules.
4000 rules inserted. Base: 2368 rules (185 with conclusion selected). Queue: 289 rules.
4200 rules inserted. Base: 2510 rules (192 with conclusion selected). Queue: 363 rules.
4400 rules inserted. Base: 2502 rules (192 with conclusion selected). Queue: 312 rules.
4600 rules inserted. Base: 2514 rules (217 with conclusion selected). Queue: 344 rules.
4800 rules inserted. Base: 2585 rules (228 with conclusion selected). Queue: 392 rules.
5000 rules inserted. Base: 2504 rules (241 with conclusion selected). Queue: 395 rules.
5200 rules inserted. Base: 2573 rules (243 with conclusion selected). Queue: 377 rules.
5400 rules inserted. Base: 2664 rules (251 with conclusion selected). Queue: 380 rules.
5600 rules inserted. Base: 2749 rules (251 with conclusion selected). Queue: 356 rules.
5800 rules inserted. Base: 2779 rules (251 with conclusion selected). Queue: 328 rules.
6000 rules inserted. Base: 2854 rules (255 with conclusion selected). Queue: 344 rules.
6200 rules inserted. Base: 2893 rules (259 with conclusion selected). Queue: 346 rules.
6400 rules inserted. Base: 3001 rules (259 with conclusion selected). Queue: 296 rules.
6600 rules inserted. Base: 3021 rules (263 with conclusion selected). Queue: 190 rules.
6800 rules inserted. Base: 3033 rules (271 with conclusion selected). Queue: 150 rules.
7000 rules inserted. Base: 3110 rules (282 with conclusion selected). Queue: 141 rules.
select attacker(bitG(g(y_6)))/-5000
7200 rules inserted. Base: 3176 rules (312 with conclusion selected). Queue: 208 rules.
7400 rules inserted. Base: 3299 rules (331 with conclusion selected). Queue: 297 rules.
7600 rules inserted. Base: 3383 rules (338 with conclusion selected). Queue: 323 rules.
7800 rules inserted. Base: 3488 rules (342 with conclusion selected). Queue: 374 rules.
8000 rules inserted. Base: 3558 rules (342 with conclusion selected). Queue: 335 rules.
8200 rules inserted. Base: 3493 rules (346 with conclusion selected). Queue: 325 rules.
8400 rules inserted. Base: 3562 rules (348 with conclusion selected). Queue: 286 rules.
8600 rules inserted. Base: 3559 rules (350 with conclusion selected). Queue: 245 rules.
8800 rules inserted. Base: 3606 rules (359 with conclusion selected). Queue: 207 rules.
9000 rules inserted. Base: 3623 rules (366 with conclusion selected). Queue: 140 rules.
9200 rules inserted. Base: 3536 rules (368 with conclusion selected). Queue: 95 rules.
9400 rules inserted. Base: 3577 rules (378 with conclusion selected). Queue: 89 rules.
9600 rules inserted. Base: 3567 rules (405 with conclusion selected). Queue: 68 rules.
9800 rules inserted. Base: 3665 rules (431 with conclusion selected). Queue: 89 rules.
10000 rules inserted. Base: 3770 rules (444 with conclusion selected). Queue: 14 rules.
10200 rules inserted. Base: 3828 rules (458 with conclusion selected). Queue: 26 rules.
Starting query inj-event(auth_IssuerCompletesProtocol(m_handshakeReq,m_handshakeResp,m_did)) ==> inj-event(auth_HolderSendsLastMessageToIssuer(m_handshakeReq,m_handshakeResp,m_did))
goal reachable: begin(auth_HolderSendsLastMessageToIssuer(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8)))),@occ170_1) -> end(@occ46_1,auth_IssuerCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8)))))
The hypothesis occurs strictly before the conclusion.
Abbreviations:
x_8 = x_2[!1 = @sid]
y_6 = y[m_0 = bitG(g(x_8)),!1 = @sid_1]
n_i_4 = n_i_1[m_17 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),!1 = @sid]
@occ46_1 = @occ46[m_2 = enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8))),m_0 = bitG(g(x_8)),!1 = @sid_1]
@occ170_1 = @occ170[m_17 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),!1 = @sid]
goal reachable: begin(auth_HolderSendsLastMessageToIssuer(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8)))),@occ98_1) -> end(@occ46_1,auth_IssuerCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8)))))
The hypothesis occurs strictly before the conclusion.
Abbreviations:
x_8 = x[!1 = @sid]
y_6 = y[m_0 = bitG(g(x_8)),!1 = @sid_1]
n_i_4 = n_i[m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),!1 = @sid]
@occ46_1 = @occ46[m_2 = enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8))),m_0 = bitG(g(x_8)),!1 = @sid_1]
@occ98_1 = @occ98[m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),!1 = @sid]
RESULT inj-event(auth_IssuerCompletesProtocol(m_handshakeReq,m_handshakeResp,m_did)) ==> inj-event(auth_HolderSendsLastMessageToIssuer(m_handshakeReq,m_handshakeResp,m_did)) is true.
-- Query inj-event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> inj-event(auth_ProverSendsLastMessageToVerifier(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) && inj-event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) && inj-event(auth_HolderCompletesProtocol(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 251 rules.
400 rules inserted. Base: 384 rules (78 with conclusion selected). Queue: 326 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 320 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 634 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 682 rules.
1400 rules inserted. Base: 1225 rules (142 with conclusion selected). Queue: 669 rules.
1600 rules inserted. Base: 1296 rules (144 with conclusion selected). Queue: 744 rules.
1800 rules inserted. Base: 1422 rules (144 with conclusion selected). Queue: 724 rules.
2000 rules inserted. Base: 1539 rules (144 with conclusion selected). Queue: 680 rules.
2200 rules inserted. Base: 1651 rules (156 with conclusion selected). Queue: 759 rules.
2400 rules inserted. Base: 1738 rules (156 with conclusion selected). Queue: 741 rules.
2600 rules inserted. Base: 1784 rules (162 with conclusion selected). Queue: 825 rules.
2800 rules inserted. Base: 1845 rules (169 with conclusion selected). Queue: 833 rules.
3000 rules inserted. Base: 1918 rules (174 with conclusion selected). Queue: 789 rules.
3200 rules inserted. Base: 2046 rules (175 with conclusion selected). Queue: 746 rules.
3400 rules inserted. Base: 2210 rules (177 with conclusion selected). Queue: 726 rules.
3600 rules inserted. Base: 2373 rules (178 with conclusion selected). Queue: 633 rules.
3800 rules inserted. Base: 2569 rules (180 with conclusion selected). Queue: 462 rules.
4000 rules inserted. Base: 2615 rules (182 with conclusion selected). Queue: 416 rules.
4200 rules inserted. Base: 2654 rules (186 with conclusion selected). Queue: 370 rules.
4400 rules inserted. Base: 2828 rules (186 with conclusion selected). Queue: 406 rules.
4600 rules inserted. Base: 2934 rules (193 with conclusion selected). Queue: 432 rules.
4800 rules inserted. Base: 2970 rules (193 with conclusion selected). Queue: 364 rules.
5000 rules inserted. Base: 2957 rules (218 with conclusion selected). Queue: 417 rules.
5200 rules inserted. Base: 2822 rules (222 with conclusion selected). Queue: 420 rules.
5400 rules inserted. Base: 2982 rules (240 with conclusion selected). Queue: 565 rules.
5600 rules inserted. Base: 2937 rules (240 with conclusion selected). Queue: 472 rules.
5800 rules inserted. Base: 3028 rules (242 with conclusion selected). Queue: 518 rules.
6000 rules inserted. Base: 3104 rules (245 with conclusion selected). Queue: 557 rules.
6200 rules inserted. Base: 3172 rules (250 with conclusion selected). Queue: 489 rules.
6400 rules inserted. Base: 3240 rules (250 with conclusion selected). Queue: 477 rules.
6600 rules inserted. Base: 3136 rules (252 with conclusion selected). Queue: 432 rules.
6800 rules inserted. Base: 3227 rules (256 with conclusion selected). Queue: 467 rules.
7000 rules inserted. Base: 3264 rules (260 with conclusion selected). Queue: 434 rules.
7200 rules inserted. Base: 3353 rules (260 with conclusion selected). Queue: 426 rules.
7400 rules inserted. Base: 3468 rules (260 with conclusion selected). Queue: 345 rules.
7600 rules inserted. Base: 3527 rules (264 with conclusion selected). Queue: 305 rules.
7800 rules inserted. Base: 3504 rules (268 with conclusion selected). Queue: 221 rules.
8000 rules inserted. Base: 3612 rules (276 with conclusion selected). Queue: 241 rules.
8200 rules inserted. Base: 3634 rules (279 with conclusion selected). Queue: 285 rules.
select attacker(bitG(g(y_6)))/-5000
8400 rules inserted. Base: 3652 rules (284 with conclusion selected). Queue: 290 rules.
8600 rules inserted. Base: 3745 rules (288 with conclusion selected). Queue: 260 rules.
8800 rules inserted. Base: 3827 rules (310 with conclusion selected). Queue: 352 rules.
9000 rules inserted. Base: 3927 rules (327 with conclusion selected). Queue: 473 rules.
9200 rules inserted. Base: 4055 rules (331 with conclusion selected). Queue: 423 rules.
9400 rules inserted. Base: 4127 rules (335 with conclusion selected). Queue: 485 rules.
9600 rules inserted. Base: 4274 rules (337 with conclusion selected). Queue: 568 rules.
9800 rules inserted. Base: 4331 rules (339 with conclusion selected). Queue: 541 rules.
10000 rules inserted. Base: 4345 rules (341 with conclusion selected). Queue: 570 rules.
10200 rules inserted. Base: 4422 rules (344 with conclusion selected). Queue: 590 rules.
10400 rules inserted. Base: 4458 rules (344 with conclusion selected). Queue: 608 rules.
10600 rules inserted. Base: 4560 rules (346 with conclusion selected). Queue: 582 rules.
10800 rules inserted. Base: 4556 rules (348 with conclusion selected). Queue: 566 rules.
11000 rules inserted. Base: 4673 rules (348 with conclusion selected). Queue: 468 rules.
11200 rules inserted. Base: 4663 rules (350 with conclusion selected). Queue: 516 rules.
11400 rules inserted. Base: 4790 rules (360 with conclusion selected). Queue: 448 rules.
11600 rules inserted. Base: 4761 rules (360 with conclusion selected). Queue: 356 rules.
11800 rules inserted. Base: 4831 rules (368 with conclusion selected). Queue: 318 rules.
12000 rules inserted. Base: 4799 rules (372 with conclusion selected). Queue: 222 rules.
12200 rules inserted. Base: 4860 rules (372 with conclusion selected). Queue: 191 rules.
12400 rules inserted. Base: 4930 rules (380 with conclusion selected). Queue: 129 rules.
12600 rules inserted. Base: 4987 rules (388 with conclusion selected). Queue: 116 rules.
12800 rules inserted. Base: 5025 rules (404 with conclusion selected). Queue: 114 rules.
13000 rules inserted. Base: 5074 rules (429 with conclusion selected). Queue: 129 rules.
13200 rules inserted. Base: 5165 rules (449 with conclusion selected). Queue: 117 rules.
13400 rules inserted. Base: 5271 rules (467 with conclusion selected). Queue: 46 rules.
13600 rules inserted. Base: 5333 rules (475 with conclusion selected). Queue: 19 rules.
13800 rules inserted. Base: 5430 rules (486 with conclusion selected). Queue: 28 rules.
Starting query inj-event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> inj-event(auth_ProverSendsLastMessageToVerifier(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) && inj-event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) && inj-event(auth_HolderCompletesProtocol(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred))
goal reachable: begin(auth_ProverSendsLastMessageToVerifier(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_V[]),GtoSymK(exp(g(y_6),x_8)))),enc(((g(x_8),g(y_6)),uri),GtoSymK(exp(g(y_6),x_8))),enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_6),x_8))),enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_8),g(y_6)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_6),x_8)))),@occ132_2) && begin(auth_IssuerSendsLastMessageToHolder(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_I[]),GtoSymK(exp(g(y_7),x_9)))),enc((sig((g(x_9),g(y_7)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_7),x_9))),enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_7),x_9)))),@occ42_2) -> end(@occ399_2,auth_VerifierCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_V[]),GtoSymK(exp(g(y_6),x_8)))),enc(((g(x_8),g(y_6)),uri),GtoSymK(exp(g(y_6),x_8))),enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_6),x_8))),enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_8),g(y_6)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_6),x_8)))))
Abbreviations:
x_9 = x[!1 = @sid]
y_7 = y[m_0 = bitG(g(x_9)),!1 = @sid_1]
n_i_4 = n_i[m_6 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_I[]),GtoSymK(exp(g(y_7),x_9)))),!1 = @sid]
x_8 = x_1[!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_7),x_9))),m_6 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_I[]),GtoSymK(exp(g(y_7),x_9)))),!1 = @sid]
y_6 = y_2[m_50 = bitG(g(x_8)),!1 = @sid_3]
n_c_8 = n_c_4[m_52 = enc(((g(x_8),g(y_6)),uri),GtoSymK(exp(g(y_6),x_8))),m_50 = bitG(g(x_8)),!1 = @sid_3]
randomness_4 = randomness[m_14 = enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_6),x_8))),m_11 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_V[]),GtoSymK(exp(g(y_6),x_8)))),!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_7),x_9))),m_6 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_I[]),GtoSymK(exp(g(y_7),x_9)))),!1 = @sid]
@occ399_2 = @occ399_1[m_54 = enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_8),g(y_6)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_6),x_8))),m_52 = enc(((g(x_8),g(y_6)),uri),GtoSymK(exp(g(y_6),x_8))),m_50 = bitG(g(x_8)),!1 = @sid_3]
@occ132_2 = @occ132_1[m_14 = enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_6),x_8))),m_11 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_V[]),GtoSymK(exp(g(y_6),x_8)))),!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_7),x_9))),m_6 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_I[]),GtoSymK(exp(g(y_7),x_9)))),!1 = @sid]
@occ42_2 = @occ42_1[m_2 = enc((sig((g(x_9),g(y_7)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_7),x_9))),m_0 = bitG(g(x_9)),!1 = @sid_1]

Derivation:
Abbreviations:
x_8 = x[!1 = @sid]
y_6 = y[m_0 = bitG(g(x_8)),!1 = @sid_1]
n_i_4 = n_i[m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),!1 = @sid]
x_9 = x_1[!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8))),m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),!1 = @sid]
y_7 = y_2[m_50 = bitG(g(x_9)),!1 = @sid_3]
n_c_8 = n_c_4[m_52 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),m_50 = bitG(g(x_9)),!1 = @sid_3]
randomness_4 = randomness[m_14 = enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_7),x_9))),m_11 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))),!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8))),m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),!1 = @sid]
@occ399_2 = @occ399_1[m_54 = enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_7),x_9))),m_52 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),m_50 = bitG(g(x_9)),!1 = @sid_3]
@occ132_2 = @occ132_1[m_14 = enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_7),x_9))),m_11 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))),!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8))),m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),!1 = @sid]
@occ42_2 = @occ42_1[m_2 = enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8))),m_0 = bitG(g(x_8)),!1 = @sid_1]

1. The message bitG(g(x_8)) may be sent to the attacker at output {88}.
attacker(bitG(g(x_8))).

2. The message bitG(g(x_8)) that the attacker may have by 1 may be received at input {26}.
So the message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))) may be sent to the attacker at output {33}.
attacker((bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8))))).

3. By 2, the attacker may know (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))).
Using the function 2-proj-2-tuple the attacker may obtain enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8))).
attacker(enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))).

4. The message bitG(g(x_8)) that the attacker may have by 1 may be received at input {26}.
So the message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))) may be sent to the attacker at output {33}.
attacker((bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6))))).

5. By 4, the attacker may know (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(x_8),y_6)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_6)).
attacker(bitG(g(y_6))).

6. By 5, the attacker may know bitG(g(y_6)).
By 3, the attacker may know enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))).
attacker((bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8))))).

7. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))) that the attacker may have by 6 may be received at input {89}.
So the message enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8))) may be sent to the attacker at output {99}.
attacker(enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8)))).

8. The message bitG(g(x_8)) that the attacker may have by 1 may be received at input {26}.
The message enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8))) that the attacker may have by 7 may be received at input {34}.
The event auth_IssuerSendsLastMessageToHolder(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8)))) (with occurrence name @occ42_2) may be executed at {42}.
So the message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8))) may be sent to the attacker at output {43}.
attacker(enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8)))).

9. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))) that the attacker may have by 6 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8))) that the attacker may have by 8 may be received at input {100}.
So the message bitG(g(x_9)) may be sent to the attacker at output {113}.
attacker(bitG(g(x_9))).

10. The message bitG(g(x_9)) that the attacker may have by 9 may be received at input {372}.
So the message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))) may be sent to the attacker at output {379}.
attacker((bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9))))).

11. By 10, the attacker may know (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))).
Using the function 2-proj-2-tuple the attacker may obtain enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9))).
attacker(enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))).

12. The message bitG(g(x_9)) that the attacker may have by 9 may be received at input {372}.
So the message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))) may be sent to the attacker at output {379}.
attacker((bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7))))).

13. By 12, the attacker may know (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(x_9),y_7)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_7)).
attacker(bitG(g(y_7))).

14. By 13, the attacker may know bitG(g(y_7)).
By 11, the attacker may know enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))).
attacker((bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9))))).

15. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))) that the attacker may have by 6 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8))) that the attacker may have by 8 may be received at input {100}.
The message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))) that the attacker may have by 14 may be received at input {114}.
So the message enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))) may be sent to the attacker at output {122}.
attacker(enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9)))).

16. The message bitG(g(x_9)) that the attacker may have by 9 may be received at input {372}.
The message enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))) that the attacker may have by 15 may be received at input {380}.
So the message enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_7),x_9))) may be sent to the attacker at output {386}.
attacker(enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_7),x_9)))).

17. The message (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))) that the attacker may have by 6 may be received at input {89}.
The message enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8))) that the attacker may have by 8 may be received at input {100}.
The message (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))) that the attacker may have by 14 may be received at input {114}.
The message enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_7),x_9))) that the attacker may have by 16 may be received at input {123}.
The event auth_ProverSendsLastMessageToVerifier(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_7),x_9))),enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_7),x_9)))) (with occurrence name @occ132_2) may be executed at {132}.
So the message enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_7),x_9))) may be sent to the attacker at output {134}.
attacker(enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_7),x_9)))).

18. The message bitG(g(x_9)) that the attacker may have by 9 may be received at input {372}.
The message enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))) that the attacker may have by 15 may be received at input {380}.
The message enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_7),x_9))) that the attacker may have by 17 may be received at input {387}.
So event auth_VerifierCompletesProtocol(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_7),x_9))),enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_7),x_9)))) may be executed at {399} in session @sid_3.
end(@occ399_2,auth_VerifierCompletesProtocol(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_7),x_9))),enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_7),x_9))))).

19. By 18, end(@occ399_2,auth_VerifierCompletesProtocol(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_7),x_9))),enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_7),x_9))))).
The goal is reached, represented in the following fact:
end(@occ399_2,auth_VerifierCompletesProtocol(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_7),x_9))),enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_7),x_9))))).


A more detailed output of the traces is available with
  set traceDisplay = long.

new attr_2: bitstring creating attr_8 at {1}

out(h, ~M) with ~M = attr_8 at {2}

new sk_I: SecretKey creating sk_I_3 at {3}

new sk_V: SecretKey creating sk_V_5 at {4}

new sk_P: SecretKey creating sk_P_5 at {5}

out(h, ~M_1) with ~M_1 = pk(sk_I_3) at {6}

out(h, ~M_2) with ~M_2 = pk(sk_V_5) at {7}

out(h, ~M_3) with ~M_3 = pk(sk_P_5) at {8}

out(h, ~M_4) with ~M_4 = genDID(pk(sk_I_3),sk_I_3) at {13}

out(h, ~M_5) with ~M_5 = genDID(pk(sk_V_5),sk_V_5) at {14}

out(h, ~M_6) with ~M_6 = genDID(pk(sk_P_5),sk_P_5) at {15}

out(h, ~M_7) with ~M_7 = genDID(pk(sk_E),sk_E) at {16}

new x: exponent creating x_8 at {84} in copy a

out(h, ~M_8) with ~M_8 = bitG(g(x_8)) at {88} in copy a

in(h, ~M_8) with ~M_8 = bitG(g(x_8)) at {26} in copy a_1

new y: exponent creating y_6 at {28} in copy a_1

out(h, (~M_9,~M_10)) with ~M_9 = bitG(g(y_6)), ~M_10 = enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6))) at {33} in copy a_1

in(h, (~M_9,~M_10)) with ~M_9 = bitG(g(y_6)), ~M_10 = enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(y_6),x_8))) at {89} in copy a

new n_i: bitstring creating n_i_4 at {95} in copy a

event auth_HolderSendsLastMessageToIssuer(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(y_6),x_8)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8)))) at {98} in copy a

out(h, ~M_11) with ~M_11 = enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))) at {99} in copy a

in(h, ~M_11) with ~M_11 = enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))) at {34} in copy a_1

event auth_IssuerSendsLastMessageToHolder(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6)))) at {42} in copy a_1

out(h, ~M_12) with ~M_12 = enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(x_8),y_6))) at {43} in copy a_1

out(h, ~M_13) with ~M_13 = Issuer_Completes at {44} in copy a_1

event auth_IssuerCompletesProtocol(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(x_8),y_6)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8)))) at {46} in copy a_1

in(h, ~M_12) with ~M_12 = enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(y_6),x_8))) at {100} in copy a

out(h, ~M_14) with ~M_14 = Holder_Completes at {106} in copy a

new x_1: exponent creating x_9 at {109} in copy a, a_2

out(h, ~M_15) with ~M_15 = bitG(g(x_9)) at {113} in copy a, a_2

in(h, ~M_15) with ~M_15 = bitG(g(x_9)) at {372} in copy a_3

new y_2: exponent creating y_7 at {374} in copy a_3

out(h, (~M_16,~M_17)) with ~M_16 = bitG(g(y_7)), ~M_17 = enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7))) at {379} in copy a_3

in(h, (~M_16,~M_17)) with ~M_16 = bitG(g(y_7)), ~M_17 = enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(y_7),x_9))) at {114} in copy a, a_2

out(h, ~M_18) with ~M_18 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))) at {122} in copy a, a_2

in(h, ~M_18) with ~M_18 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))) at {380} in copy a_3

new n_c_4: bitstring creating n_c_8 at {383} in copy a_3

out(h, ~M_19) with ~M_19 = enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))) at {386} in copy a_3

in(h, ~M_19) with ~M_19 = enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(y_7),x_9))) at {123} in copy a, a_2

new randomness: bitstring creating randomness_4 at {128} in copy a, a_2

event auth_ProverSendsLastMessageToVerifier(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(y_7),x_9)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(y_7),x_9))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9)))) at {132} in copy a, a_2

event auth_ProverSendsLastMessageToVerifierInProtocolFull(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I_3),GtoSymK(exp(g(y_6),x_8)))),enc((sig((g(x_8),g(y_6)),sk_P_5),genDID(pk(sk_P_5),sk_P_5),genDID(pk(sk_I_3),sk_I_3),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sig((((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),genDID(pk(sk_P_5),sk_P_5),n_i_4),sk_I_3)),GtoSymK(exp(g(y_6),x_8))),bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(y_7),x_9)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(y_7),x_9))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9)))) at {133} in copy a, a_2

out(h, ~M_20) with ~M_20 = enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9))) at {134} in copy a, a_2

in(h, ~M_20) with ~M_20 = enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9))) at {387} in copy a_3

new tkn_access_4: bitstring creating tkn_access_8 at {392} in copy a_3

event auth_VerifierSendsLastMessageToProver(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9))),enc((tkn_access_8,sig(tkn_access_8,sk_V_5)),GtoSymK(exp(g(x_9),y_7)))) at {395} in copy a_3

out(h, ~M_21) with ~M_21 = enc((tkn_access_8,sig(tkn_access_8,sk_V_5)),GtoSymK(exp(g(x_9),y_7))) at {396} in copy a_3

out(h, ~M_22) with ~M_22 = Verifier_Completes at {397} in copy a_3

event auth_VerifierCompletesProtocol(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(x_9),y_7)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(x_9),y_7))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9)))) at {399} in copy a_3 (goal)

The event auth_VerifierCompletesProtocol(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V_5),GtoSymK(exp(g(y_7),x_9)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I_3),sk_I_3))),GtoSymK(exp(g(y_7),x_9))),enc(((attr,genDID(pk(sk_I_3),sk_I_3)),proofGen(((attr,genDID(pk(sk_I_3),sk_I_3)),sig((attr,genDID(pk(sk_I_3),sk_I_3)),sk_I_3)),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V_5),sk_V_5)),pk(sk_I_3),randomness_4)),GtoSymK(exp(g(y_7),x_9)))) is executed at {399} in copy a_3.
A trace has been found.
RESULT inj-event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> inj-event(auth_ProverSendsLastMessageToVerifier(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) && inj-event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) && inj-event(auth_HolderCompletesProtocol(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) is false.
RESULT (even event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> event(auth_ProverSendsLastMessageToVerifier(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) && event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) && event(auth_HolderCompletesProtocol(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) is false.)
-- Query event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) && event(auth_ProverSendsLastMessageToVerifierInProtocolFull(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred,m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_14))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 200 rules (46 with conclusion selected). Queue: 251 rules.
400 rules inserted. Base: 384 rules (78 with conclusion selected). Queue: 326 rules.
600 rules inserted. Base: 562 rules (125 with conclusion selected). Queue: 320 rules.
800 rules inserted. Base: 760 rules (134 with conclusion selected). Queue: 376 rules.
1000 rules inserted. Base: 943 rules (140 with conclusion selected). Queue: 634 rules.
1200 rules inserted. Base: 1140 rules (140 with conclusion selected). Queue: 682 rules.
1400 rules inserted. Base: 1225 rules (142 with conclusion selected). Queue: 669 rules.
1600 rules inserted. Base: 1296 rules (144 with conclusion selected). Queue: 744 rules.
1800 rules inserted. Base: 1422 rules (144 with conclusion selected). Queue: 724 rules.
2000 rules inserted. Base: 1539 rules (144 with conclusion selected). Queue: 680 rules.
2200 rules inserted. Base: 1651 rules (156 with conclusion selected). Queue: 759 rules.
2400 rules inserted. Base: 1738 rules (156 with conclusion selected). Queue: 741 rules.
2600 rules inserted. Base: 1784 rules (162 with conclusion selected). Queue: 825 rules.
2800 rules inserted. Base: 1845 rules (169 with conclusion selected). Queue: 833 rules.
3000 rules inserted. Base: 1918 rules (174 with conclusion selected). Queue: 789 rules.
3200 rules inserted. Base: 2046 rules (175 with conclusion selected). Queue: 746 rules.
3400 rules inserted. Base: 2210 rules (177 with conclusion selected). Queue: 726 rules.
3600 rules inserted. Base: 2373 rules (178 with conclusion selected). Queue: 633 rules.
3800 rules inserted. Base: 2569 rules (180 with conclusion selected). Queue: 462 rules.
4000 rules inserted. Base: 2615 rules (182 with conclusion selected). Queue: 416 rules.
4200 rules inserted. Base: 2654 rules (186 with conclusion selected). Queue: 370 rules.
4400 rules inserted. Base: 2828 rules (186 with conclusion selected). Queue: 406 rules.
4600 rules inserted. Base: 2934 rules (193 with conclusion selected). Queue: 432 rules.
4800 rules inserted. Base: 2970 rules (193 with conclusion selected). Queue: 364 rules.
5000 rules inserted. Base: 2957 rules (218 with conclusion selected). Queue: 417 rules.
5200 rules inserted. Base: 2822 rules (222 with conclusion selected). Queue: 420 rules.
5400 rules inserted. Base: 2982 rules (240 with conclusion selected). Queue: 565 rules.
5600 rules inserted. Base: 2937 rules (240 with conclusion selected). Queue: 472 rules.
5800 rules inserted. Base: 3028 rules (242 with conclusion selected). Queue: 518 rules.
6000 rules inserted. Base: 3104 rules (245 with conclusion selected). Queue: 557 rules.
6200 rules inserted. Base: 3172 rules (250 with conclusion selected). Queue: 489 rules.
6400 rules inserted. Base: 3240 rules (250 with conclusion selected). Queue: 477 rules.
6600 rules inserted. Base: 3136 rules (252 with conclusion selected). Queue: 432 rules.
6800 rules inserted. Base: 3227 rules (256 with conclusion selected). Queue: 467 rules.
7000 rules inserted. Base: 3264 rules (260 with conclusion selected). Queue: 434 rules.
7200 rules inserted. Base: 3353 rules (260 with conclusion selected). Queue: 426 rules.
7400 rules inserted. Base: 3468 rules (260 with conclusion selected). Queue: 345 rules.
7600 rules inserted. Base: 3527 rules (264 with conclusion selected). Queue: 285 rules.
7800 rules inserted. Base: 3504 rules (268 with conclusion selected). Queue: 181 rules.
8000 rules inserted. Base: 3596 rules (276 with conclusion selected). Queue: 156 rules.
select attacker(bitG(g(y_6)))/-5000
8200 rules inserted. Base: 3627 rules (284 with conclusion selected). Queue: 192 rules.
8400 rules inserted. Base: 3721 rules (309 with conclusion selected). Queue: 260 rules.
8600 rules inserted. Base: 3829 rules (326 with conclusion selected). Queue: 348 rules.
8800 rules inserted. Base: 3931 rules (331 with conclusion selected). Queue: 403 rules.
9000 rules inserted. Base: 4000 rules (335 with conclusion selected). Queue: 497 rules.
9200 rules inserted. Base: 4137 rules (339 with conclusion selected). Queue: 563 rules.
9400 rules inserted. Base: 4195 rules (339 with conclusion selected). Queue: 536 rules.
9600 rules inserted. Base: 4195 rules (341 with conclusion selected). Queue: 602 rules.
9800 rules inserted. Base: 4262 rules (344 with conclusion selected). Queue: 590 rules.
10000 rules inserted. Base: 4298 rules (344 with conclusion selected). Queue: 608 rules.
10200 rules inserted. Base: 4374 rules (346 with conclusion selected). Queue: 564 rules.
10400 rules inserted. Base: 4396 rules (348 with conclusion selected). Queue: 566 rules.
10600 rules inserted. Base: 4487 rules (348 with conclusion selected). Queue: 454 rules.
10800 rules inserted. Base: 4487 rules (352 with conclusion selected). Queue: 506 rules.
11000 rules inserted. Base: 4599 rules (360 with conclusion selected). Queue: 428 rules.
11200 rules inserted. Base: 4529 rules (360 with conclusion selected). Queue: 356 rules.
11400 rules inserted. Base: 4567 rules (368 with conclusion selected). Queue: 310 rules.
11600 rules inserted. Base: 4501 rules (372 with conclusion selected). Queue: 215 rules.
11800 rules inserted. Base: 4560 rules (372 with conclusion selected). Queue: 186 rules.
12000 rules inserted. Base: 4583 rules (381 with conclusion selected). Queue: 126 rules.
12200 rules inserted. Base: 4613 rules (392 with conclusion selected). Queue: 114 rules.
12400 rules inserted. Base: 4619 rules (414 with conclusion selected). Queue: 95 rules.
12600 rules inserted. Base: 4685 rules (437 with conclusion selected). Queue: 108 rules.
12800 rules inserted. Base: 4797 rules (463 with conclusion selected). Queue: 61 rules.
13000 rules inserted. Base: 4897 rules (470 with conclusion selected). Queue: 8 rules.
13200 rules inserted. Base: 4926 rules (486 with conclusion selected). Queue: 30 rules.
Starting query event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) && event(auth_ProverSendsLastMessageToVerifierInProtocolFull(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred,m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp))
goal reachable: begin(auth_ProverSendsLastMessageToVerifierInProtocolFull(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8))),bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_7),x_9))),enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_7),x_9))))) && begin(auth_IssuerSendsLastMessageToHolder(bitG(g(x_8)),(bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),enc((sig((g(x_8),g(y_6)),sk_P[]),genDID(pk(sk_P[]),sk_P[]),genDID(pk(sk_I[]),sk_I[]),n_i_4),GtoSymK(exp(g(y_6),x_8))),enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8))))) -> end(auth_VerifierCompletesProtocol(bitG(g(x_9)),(bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))),enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_7),x_9))),enc(((attr,genDID(pk(sk_I[]),sk_I[])),proofGen(((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),((g(x_9),g(y_7)),n_c_8,genDID(pk(sk_V[]),sk_V[])),pk(sk_I[]),randomness_4)),GtoSymK(exp(g(y_7),x_9)))))
Abbreviations:
x_8 = x[!1 = @sid]
y_6 = y[m_0 = bitG(g(x_8)),!1 = @sid_1]
n_i_4 = n_i[m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),!1 = @sid]
x_9 = x_1[!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8))),m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),!1 = @sid]
y_7 = y_2[m_50 = bitG(g(x_9)),!1 = @sid_3]
n_c_8 = n_c_4[m_52 = enc(((g(x_9),g(y_7)),uri),GtoSymK(exp(g(y_7),x_9))),m_50 = bitG(g(x_9)),!1 = @sid_3]
randomness_4 = randomness[m_14 = enc((n_c_8,(attr,genDID(pk(sk_I[]),sk_I[]))),GtoSymK(exp(g(y_7),x_9))),m_11 = (bitG(g(y_7)),enc(sig((g(y_7),g(x_9)),sk_V[]),GtoSymK(exp(g(y_7),x_9)))),!2 = @sid_2,m_9 = enc(((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sig((((attr,genDID(pk(sk_I[]),sk_I[])),sig((attr,genDID(pk(sk_I[]),sk_I[])),sk_I[])),genDID(pk(sk_P[]),sk_P[]),n_i_4),sk_I[])),GtoSymK(exp(g(y_6),x_8))),m_6 = (bitG(g(y_6)),enc(sig((g(y_6),g(x_8)),sk_I[]),GtoSymK(exp(g(y_6),x_8)))),!1 = @sid]
RESULT event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) && event(auth_ProverSendsLastMessageToVerifierInProtocolFull(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred,m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) is true.

--------------------------------------------------------------
Verification summary:

Query not attacker(m'_0_fromHolder[]) is false.

Query not attacker(m'_1_fromIssuer[]) is true.

Query not attacker(m'_2_fromHolder[]) is true.

Query not attacker(m'_3_fromIssuer[]) is true.

Query not attacker(m'_4_fromProver[]) is false.

Query not attacker(m'_5_fromVerifier[]) is true.

Query not attacker(m'_6_fromProver[]) is false.

Query not attacker(m'_7_fromVerifier[]) is true.

Query not attacker(m'_8_fromProver[]) is true.

Query not attacker(m'_9_fromVerifier[]) is true.

Query not attacker(rule_fromVerifier[]) is false.

Query not attacker(cred_fromVerifier[]) is true.

Query not attacker(vp_fromVerifier[]) is true.

Query not attacker(access_token_fromVerifier[]) is true.

Query inj-event(auth_ProverCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp,m_accessToken)) ==> inj-event(auth_VerifierSendsLastMessageToProver(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp,m_accessToken)) is true.

Query inj-event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> inj-event(auth_ProverSendsLastMessageToVerifier(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) is true.

Query inj-event(auth_HolderCompletesProtocol(m_handshakeReq,m_handshakeResp,m_did,m_cred)) ==> inj-event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq,m_handshakeResp,m_did,m_cred)) is true.

Query inj-event(auth_IssuerCompletesProtocol(m_handshakeReq,m_handshakeResp,m_did)) ==> inj-event(auth_HolderSendsLastMessageToIssuer(m_handshakeReq,m_handshakeResp,m_did)) is true.

Query inj-event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> inj-event(auth_ProverSendsLastMessageToVerifier(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) && inj-event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) && inj-event(auth_HolderCompletesProtocol(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) is false.

Query event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) && event(auth_ProverSendsLastMessageToVerifierInProtocolFull(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred,m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) is true.

--------------------------------------------------------------

